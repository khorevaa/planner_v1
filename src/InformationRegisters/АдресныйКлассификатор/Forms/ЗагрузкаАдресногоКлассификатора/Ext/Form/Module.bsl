// Форма параметризуется. Необязательные параметры:
//     КодРегионаДляЗагрузки      - Число, Строка, Массив - Код субъекта РФ (или их массив), загрузка которого предлагается.
//     НазваниеРегионаДляЗагрузки - Строка        - Название субъекта РФ, загрузка которого предлагается.
// 
// Если указан хоть один из параметров, то предлагаемый регион будет отмечен для загрузки и выделен как текущий
//

// Флаг подтверждения, используется при закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

// Хранилище передаваемых файлов
&НаКлиенте
Перем ПомещенныеФайлы;

// Параметры загрузки для передачи между клиентскими вызовами
&НаКлиенте
Перем ПараметрыФоновойЗагрузкиКлассификатора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Источник по умолчанию, может быть переопределен при восстановлении параметров
	КодИсточникаЗагрузки = КодИсточникаЗагрузкиПоУмолчанию();
	
	ПараметрыДлительнойОперации = Новый Структура("ИнтервалОжидания, Завершено, АдресРезультата, Идентификатор, Ошибка", 5);
	
	ДоступныеИсточникиЗагрузки.Очистить();
	
	ДоступныеИсточникиЗагрузки.Добавить("КАТАЛОГ", НСтр("ru = 'Из каталога на диске'") );
	
	// ИТС поставляет файлы в виде самораспаковывающихся exe, на linux недоступно.
	Если АдресныйКлассификаторКлиентСервер.ЭтоWindowsКлиент() Тогда
		ДоступныеИсточникиЗагрузки.Добавить("ИТС", НСтр("ru = 'С диска 1С:ИТС'") );
	КонецЕсли;
	
	ДоступныеИсточникиЗагрузки.Добавить("САЙТ", НСтр("ru = 'С сайта поддержки пользователей 1С:Предприятия'") );
	
	// Получаем уже загруженные регионы
	ТаблицаРегионов = РегистрыСведений.АдресныйКлассификатор.СведенияОЗагрузкеСубъектовРФ();
	ТаблицаРегионов.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ТаблицаРегионов.ЗагрузитьКолонку(ТаблицаРегионов.ВыгрузитьКолонку("Загружено"), "Загружать");
	
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Регион.Представление = Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ", " + Регион.Представление;
	КонецЦикла;
	
	// Добавляем пометку для загружаемого региона-параметра и ставим его текущей строкой
	НазваниеРегионаДляЗагрузки = Неопределено;
	ТекущийКодРегиона          = Неопределено;
	
	Параметры.Свойство("КодРегионаДляЗагрузки", ТекущийКодРегиона);
	
	ТипТекущегоКодаРегиона = ТипЗнч(ТекущийКодРегиона);
	ТипЧисло               = Новый ОписаниеТипов("Число");
		
	Если ТипТекущегоКодаРегиона = Тип("Массив") И ТекущийКодРегиона.Количество() > 0 Тогда
		// Указан массив для загрузки
		Для Каждого КодРегиона Из ТекущийКодРегиона Цикл 
			Кандидаты = СубъектыРФ.НайтиСтроки(Новый Структура("КодСубъектаРФ", ТипЧисло.ПривестиЗначение(КодРегиона) )); 
			Если Кандидаты.Количество() > 0 Тогда
				Кандидаты[0].Загружать = Истина;
			КонецЕсли;
		КонецЦикла;
		ТекущийКодРегиона = ТекущийКодРегиона[0];
		
	ИначеЕсли ТипТекущегоКодаРегиона = Тип("Строка") Тогда
		ТекущийКодРегиона = ТипЧисло.ПривестиЗначение(ТекущийКодРегиона);
		
	КонецЕсли;
	
	Если ТекущийКодРегиона = Неопределено И Параметры.Свойство("НазваниеРегионаДляЗагрузки", НазваниеРегионаДляЗагрузки) Тогда;
		// Пытаемся установить по наименованию
		ТекущийКодРегиона = РегистрыСведений.АдресныйКлассификатор.КодРегионаПоНаименованию(НазваниеРегионаДляЗагрузки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаРегионов, "СубъектыРФ");
	
	Если ТекущийКодРегиона <> Неопределено Тогда
		Кандидаты = СубъектыРФ.НайтиСтроки(Новый Структура("КодСубъектаРФ", ТекущийКодРегиона)); 
		Если Кандидаты.Количество() > 0 Тогда
			ТекущаяСтрока = Кандидаты[0];
			ТекущаяСтрока.Загружать = Истина;
			Элементы.СубъектыРФ.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Если не установили текущую строку по параметру, то пытаемся поставить ее на первый отмеченный
	Если Элементы.СубъектыРФ.ТекущаяСтрока = Неопределено Тогда
		Кандидаты = СубъектыРФ.НайтиСтроки(Новый Структура("Загружать", Истина)); 
		Если Кандидаты.Количество() > 0 Тогда
			Элементы.СубъектыРФ.ТекущаяСтрока = Кандидаты[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Зависимости от интерфейса
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.АдресЗагрузки.КартинкаКнопкиВыбора = Новый Картинка;
	КонецЕсли;
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Контроль корректности кода источника данных для загрузки
	КодИсточника = Настройки["КодИсточникаЗагрузки"];
	Если ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточника) = Неопределено Тогда
		Настройки.Удалить("КодИсточникаЗагрузки");
		Настройки.Удалить("АдресЗагрузки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru='В веб-клиенте загрузка адресного классификатора не поддерживается.'"));
	Отказ = Истина;
	Возврат;
#КонецЕсли
	
	УстановитьНадписьИсточникаДанных();
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Проверяем клиентскую переменную
	Если ПодтверждениеЗакрытияФормы<>Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Прервать загрузку адресного классификатора?'");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПараметрыДлительнойОперации.Идентификатор <> Неопределено Тогда
		ОтменитьФоновоеЗадание(ПараметрыДлительнойОперации.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СубъектыРФВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.СубъектыРФПредставление Тогда
		ТекущиеДанные = СубъектыРФ.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Загружать = Не ТекущиеДанные.Загружать;
			ОбновитьИнтерфейсПоКоличествуЗагружаемых();
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИсточникаЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеИзмененияИсточникаЗагрузки", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, ДоступныеИсточникиЗагрузки, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресныйКлассификаторКлиент.ВыбратьКаталог(ЭтотОбъект, "АдресЗагрузки", 
		НСтр("ru = 'Каталог с файлами адресного классификатора'"),
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СубъектыРФЗагружатьПриИзменении(Элемент)
	
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометкиСпискаРегионов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометкиСпискаРегионов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		Текст = НСтр("ru = 'Для загрузки адресного классификатора из каталога
		                   |необходимо установить расширение для работы с файлами.'");
		КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, АдресЗагрузки);
		
	ИначеЕсли КодИсточникаЗагрузки = "ИТС" Тогда
		Текст = НСтр("ru = 'Для загрузки адресного классификатора с диска ИТС
		                   |необходимо установить расширение для работы с файлами.'");
		КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, АдресЗагрузки);
	
	ИначеЕсли КодИсточникаЗагрузки = "САЙТ" Тогда
		Текст = НСтр("ru = 'Для загрузки адресного классификатора с сайта
		                   |необходимо установить расширение для работы с файлами.'");
		КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, АдресЗагрузки);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан источник загрузки классификатора.'"), , "НевидимоеПредставлениеИсточникаЗагрузки");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	ПодтверждениеЗакрытияФормы = Неопределено;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайлами(Знач ТекстПредложения, Знач КодИсточника, Знач АдресИсточника)
	
	Оповещение = Новый ОписаниеОповещения("КонтрольРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("КодИсточникаЗагрузки", КодИсточника);
	Оповещение.ДополнительныеПараметры.Вставить("АдресЗагрузки",        АдресИсточника);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

// Завершение диалога предложения расширения для работы с файлами
&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайламиЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
		
	ИначеЕсли Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расширение для работы с файлами не подключено.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		ЗагрузитьКлассификаторИзКаталога(ДополнительныеПараметры.АдресЗагрузки);
		
	ИначеЕсли ДополнительныеПараметры.КодИсточникаЗагрузки = "ИТС" Тогда
		ЗагрузитьКлассификаторИзКаталогаИТС(ДополнительныеПараметры.АдресЗагрузки);
		
	ИначеЕсли ДополнительныеПараметры.КодИсточникаЗагрузки = "САЙТ" Тогда
		ЗагрузитьКлассификаторССайта();
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение диалога изменения загрузки
&НаКлиенте
Процедура ЗавершениеИзмененияИсточникаЗагрузки(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсточникаЗагрузки = Результат.Значение;
	УстановитьНадписьИсточникаДанных();
КонецПроцедуры

// Завершение диалога закрытия формы
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьИсточникаДанных()
	
	Если КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		Текст = ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки).Представление + ":";
		ВидимостьИсточника = Истина;
		
	ИначеЕсли КодИсточникаЗагрузки = "ИТС" Тогда
		Текст = ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки).Представление + ":";
		ВидимостьИсточника = Истина;
			
	ИначеЕсли КодИсточникаЗагрузки = "САЙТ" Тогда
		Текст = ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки).Представление;
		ВидимостьИсточника = Ложь;
		
	Иначе 
		Текст = НСтр("ru = 'Источник не указан'");
		ВидимостьИсточника = Ложь;
		
	КонецЕсли;
	
	ПредставлениеИсточникаЗагрузки = Новый ФорматированнаяСтрока(Текст, , , , "Ссылка");
	
	Если ВидимостьИсточника Тогда
		Элементы.ГруппаОтображенияАдресаЗагрузки.ТекущаяСтраница = Элементы.ВидимыйАдресЗагрузки;
	Иначе
		Элементы.ГруппаОтображенияАдресаЗагрузки.ТекущаяСтраница = Элементы.НевидимыйАдресЗагрузки;
	КонецЕсли;
	
	УстановитьРазрешениеЗагрузки();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазрешениеЗагрузки(Знач КоличествоЗагружаемых = Неопределено)
	
	Если КоличествоЗагружаемых = Неопределено Тогда
		КоличествоЗагружаемых = СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ).Количество();
	КонецЕсли;
	
	Элементы.Загрузить.Доступность = (КоличествоЗагружаемых > 0) 
		И ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки) <> Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("СубъектыРФКодСубъектаРФ");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("СубъектыРФПредставление");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СубъектыРФ.Загружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиСпискаРегионов(Знач Пометка)
	
	// Устанавливаем пометки только для видимых строк
	ЭлементТаблицы = Элементы.СубъектыРФ;
	Для Каждого СтрокаРегиона Из СубъектыРФ Цикл
		Если ЭлементТаблицы.ДанныеСтроки( СтрокаРегиона.ПолучитьИдентификатор() ) <> Неопределено Тогда
			СтрокаРегиона.Загружать = Пометка;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПоКоличествуЗагружаемых()
	
	// Страница выбора
	ВыбраноРегионовДляЗагрузки = СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ).Количество();
	
	// Страница загрузки
	ТекстОписанияЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загружаются данные по выбранным регионам (%1)'"), ВыбраноРегионовДляЗагрузки 
	);
	
	УстановитьРазрешениеЗагрузки(ВыбраноРегионовДляЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталога(Знач КаталогДанных)
	
	КодыРегионов = КодыРегионовДляЗагрузки();
	
	// Проверка доступности и наличия файлов
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки, ПолеОшибки", КодИсточникаЗагрузки, "АдресЗагрузки");
	РезультатАнализа = АдресныйКлассификаторКлиентСервер.АнализДоступностиФайловКлассификатораВКаталоге(КодыРегионов, КаталогДанных, ПараметрыЗагрузки);
	Если РезультатАнализа.Ошибки <> Неопределено Тогда
		// Не хватает файлов для загрузки по указанным режимам
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатАнализа.Ошибки);
		Возврат;
	КонецЕсли;
	
	// Загружаем в фоне
	УдалитьПослеПередачиНаСервер = Новый Массив;
	РезультатАнализа.Вставить("УдалитьПослеПередачиНаСервер", УдалитьПослеПередачиНаСервер);
	
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(РезультатАнализа);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталогаИТС(Знач КорневойКаталог)
	КодыРегионов = КодыРегионовДляЗагрузки();
	
	// Пробуем найти в указанном каталоге 
	КаталогДанных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КорневойКаталог);
	РазделительПути = Прав(КаталогДанных, 1);
	
	ВариантыКаталогов = Новый Массив;
	ВариантыКаталогов.Добавить(КаталогДанных);
	ВариантыКаталогов.Добавить(КаталогДанных + "EXE\KLADR\");
	ВариантыКаталогов.Добавить(КаталогДанных + "1CIts\EXE\KLADR\");
	ВариантыКаталогов.Добавить(КаталогДанных + "1CitsFr\EXE\KLADR\");
	ВариантыКаталогов.Добавить(КаталогДанных + "1CItsB\EXE\KLADR\");
	
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки, ПолеОшибки", "ИТС", "АдресЗагрузки");
	ЕстьОшибки = Истина;
	
	Для Каждого Вариант Из ВариантыКаталогов Цикл
		РезультатАнализа = АдресныйКлассификаторКлиентСервер.АнализДоступностиФайловКлассификатораВКаталоге(КодыРегионов, Вариант, ПараметрыЗагрузки);
		Если РезультатАнализа.ЕстьВсеФайлы Тогда
			ЕстьОшибки = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Ошибки = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "АдресЗагрузки", НСтр("ru = 'В указанном каталоге 1С:ИТС не найдены файлы для загрузки'") );
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
	КонецЕсли;
	
	// Загружаем в фоне, там же будет удаление лишнего
	ЗапуститьФоновуюЗагрузкуИзКаталогаИТСКлиента(РезультатАнализа);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайта(Знач Аутентификация = Неопределено)
	
	КодыРегионов = КодыРегионовДляЗагрузки();
	
	Если Аутентификация = Неопределено Тогда
		Аутентификация = СохраненныеДанныеАутентификацииСайта();
	КонецЕсли;
	
	Если ПустаяСтрока(Аутентификация.Логин) Тогда
		// Нет сохраненных данных, проходим через форму авторизации
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКлассификаторССайтаЗапросАутентификации", ЭтотОбъект, Новый Структура);
		Оповещение.ДополнительныеПараметры.Вставить("КодыРегионов", КодыРегионов);
		
		ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.Форма.АвторизацияНаПользовательскомСайте", , ЭтотОбъект, , , ,Оповещение);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКлассификаторССайтаАутентификация(Аутентификация, КодыРегионов);
КонецПроцедуры

// Завершение диалога авторизации
//
&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаЗапросАутентификации(Знач Аутентификация, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Аутентификация) <> Тип("Структура") Тогда
		// Возвращаемся на страницу выбора
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		Возврат;
		
	ИначеЕсли ПустаяСтрока(Аутентификация.Логин) Тогда
		// На повторный ввод пароля
		ЗагрузитьКлассификаторССайта(Аутентификация);
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьКлассификаторССайтаАутентификация(Аутентификация, ДополнительныеПараметры.КодыРегионов);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаАутентификация(Знач Аутентификация, Знач КодыРегионов)
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Загрузка файлов с сайта поддержки пользователей ...'");
	
	Элементы.ПрерватьЗагрузку.Доступность = Ложь;
	
	ПараметрыФоновойЗагрузкиКлассификатора = Новый Структура;
	ПараметрыФоновойЗагрузкиКлассификатора.Вставить("Аутентификация", Аутентификация);
	ПараметрыФоновойЗагрузкиКлассификатора.Вставить("КодыРегионов",   КодыРегионов);
	
	ИспользуемыйКлассификатор = АдресныйКлассификаторКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	Если ИспользуемыйКлассификатор <> "КЛАДР" Тогда
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обрабатываемый тип адресного классификатора ""%1""'"), ИспользуемыйКлассификатор);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ЗагрузитьКлассификаторССайтаКЛАДР", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторССайтаКЛАДР()
	
	КодыРегионов  = ПараметрыФоновойЗагрузкиКлассификатора.КодыРегионов;
	
	Аутентификация = Новый Структура;
	Аутентификация.Вставить("КодПользователя", ПараметрыФоновойЗагрузкиКлассификатора.Аутентификация.Логин);
	Аутентификация.Вставить("Пароль",          ПараметрыФоновойЗагрузкиКлассификатора.Аутентификация.Пароль);
	
	// Сбрасываем
	ПараметрыФоновойЗагрузкиКлассификатора = Неопределено;
	
	// Первый файл - сокращения, заодно проверяется корректность авторизации
	КаталогЗагрузки = АдресныйКлассификаторКлиент.ВременныйКаталогКлиента();
	УдалитьПослеПередачиНаСервер = Новый Массив;
	УдалитьПослеПередачиНаСервер.Добавить(КаталогЗагрузки);
	
	Результат = АдресныйКлассификаторКлиент.ЗагрузитьКЛАДРСВебСервера("SO", Аутентификация, КаталогЗагрузки);
	Если Не Результат.Статус Тогда
		// Ошибка загрузки, выводим на повторный запрос авторизации
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка загрузки файлов КЛАДР с сайта 1С.
			         |%1'"), 
			Результат.СообщениеОбОшибке));
			
		АдресныйКлассификаторКлиентСервер.УдалитьВременныйФайл(КаталогЗагрузки);
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКлассификаторССайтаЗапросАутентификации", ЭтотОбъект, Новый Структура);
		Оповещение.ДополнительныеПараметры.Вставить("КодыРегионов", КодыРегионов);
		
		ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.Форма.АвторизацияНаПользовательскомСайте", , ЭтотОбъект, , , ,Оповещение);
		Возврат;
	КонецЕсли;

	ФайлыПоРегионам = Новый Соответствие;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ФайлыПоРегионам", ФайлыПоРегионам);
	ПараметрыЗагрузки.Вставить("КодыРегионов",    КодыРегионов);
	
	ФайлыПоРегионам.Вставить("*", Результат.Путь);
	
	Для Каждого КодРегиона Из КодыРегионов Цикл
		ОбъектЗагрузки = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");;
		Результат = АдресныйКлассификаторКлиент.ЗагрузитьКЛАДРСВебСервера(ОбъектЗагрузки, Аутентификация, КаталогЗагрузки);
		Если Результат.Статус Тогда
			ФайлыПоРегионам.Вставить(КодРегиона, Результат.Путь);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка загрузки файлов КЛАДР с сайта 1С.
				         |%1'"), 
				Результат.СообщениеОбОшибке));
			
			АдресныйКлассификаторКлиентСервер.УдалитьВременныйФайл(КаталогЗагрузки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗагрузки.Вставить("Режим", "КЛАДРВебСайт");
	ПараметрыЗагрузки.Вставить("УдалитьПослеПередачиНаСервер", УдалитьПослеПередачиНаСервер);
	
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(ПараметрыЗагрузки)
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаИТСКлиента(Знач ПараметрыЗагрузки)
	// Переключаем режим - страницу
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Распаковка файлов 1С:ИТС ...'");
	
	Элементы.ПрерватьЗагрузку.Доступность = Ложь;
	ПараметрыФоновойЗагрузкиКлассификатора = ПараметрыЗагрузки;
	ПодключитьОбработчикОжидания("ЗапуститьФоновуюЗагрузкуИзКаталогаИТСКлиентаПродолжение", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаИТСКлиентаПродолжение()
	ПараметрыЗагрузки = ПараметрыФоновойЗагрузкиКлассификатора;
	ПараметрыФоновойЗагрузкиКлассификатора = Неопределено;
	
	// РезультатАнализа - корректный источник
	ИспользуемыйКлассификатор = АдресныйКлассификаторКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	Если ИспользуемыйКлассификатор = "КЛАДР" Тогда
		МаскаОжидаемогоПриРаспаковке = "*.DBF";
	Иначе
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обрабатываемый тип адресного классификатора ""%1""'"), ИспользуемыйКлассификатор);
	КонецЕсли;
	
	// Распаковываем файлы на клиенте (там исполняемый файл, на сервере нет разрешения на запуск)
	УдалитьПослеПередачиНаСервер = Новый Массив;
	ПараметрыЗагрузки.Вставить("УдалитьПослеПередачиНаСервер", УдалитьПослеПередачиНаСервер);
	
	Для Каждого КлючЗначение Из ПараметрыЗагрузки.ФайлыПоРегионам Цикл
		ИсточникФайлов = КлючЗначение.Значение;
		
		Если ТипЗнч(ИсточникФайлов) = Тип("Массив") Тогда
			Позиция = ИсточникФайлов.ВГраница();
			Пока Позиция >= 0 Цикл
				ИмяФайла = ИсточникФайлов[Позиция];
				Если ВРег(Прав(ИмяФайла, 4)) = ".EXE" Тогда
					ДанныеИТС = РаспаковатьАрхивИТС(ИмяФайла, МаскаОжидаемогоПриРаспаковке);
					ИсточникФайлов[Позиция] = ДанныеИТС.ИмяФайла;
					УдалитьПослеПередачиНаСервер.Добавить(ДанныеИТС.ИмяУдаляемогоФайла);
				КонецЕсли;
				Позиция = Позиция - 1;
			КонецЦикла;
		Иначе
			Если ВРег(Прав(ИсточникФайлов, 4)) = ".EXE" Тогда
			 	ДанныеИТС = РаспаковатьАрхивИТС(ИсточникФайлов, МаскаОжидаемогоПриРаспаковке);
				ПараметрыЗагрузки.ФайлыПоРегионам[КлючЗначение.Ключ] = ДанныеИТС.ИмяФайла;
				УдалитьПослеПередачиНаСервер.Добавить(ДанныеИТС.ИмяУдаляемогоФайла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// И запускаем передачу на сервер
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(Знач ПараметрыЗагрузки)
	// Переключаем режим - страницу
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Передача файлов на сервер приложения...'");
	
	Элементы.ПрерватьЗагрузку.Доступность = Ложь;
	ПараметрыФоновойЗагрузкиКлассификатора = ПараметрыЗагрузки;
	ПодключитьОбработчикОжидания("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПродолжение", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПродолжение()
	ПараметрыЗагрузки = ПараметрыФоновойЗагрузкиКлассификатора;
	ПараметрыФоновойЗагрузкиКлассификатора = Неопределено;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		// Возвращаемся на страницу выбора
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		Возврат;
	КонецЕсли;
		
	// Очищаем возможно ранее помещенные файлы
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив") Тогда
		Для Каждого Описание Из ПомещенныеФайлы Цикл
			Если Не ПустаяСтрока(Описание.Хранение) Тогда
				УдалитьИзВременногоХранилища(Описание.Хранение);
			КонецЕсли;
		КонецЦикла;
		ПомещенныеФайлы.Очистить();
	КонецЕсли;
	
	// Список передаваемых на сервер файлов
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрыЗагрузки.ФайлыПоРегионам Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			Для Каждого ИмяФайла Из КлючЗначение.Значение Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла) );
			КонецЦикла;
		Иначе
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КлючЗначение.Значение) );
		КонецЕсли;
	КонецЦикла;
	
	ПомещенныеФайлы = Новый Массив;
	ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор);
	
	// Сохраняем время изменения - версию
	Для Позиция = 0 По ПомещенныеФайлы.ВГраница() Цикл
		Описание = ПомещенныеФайлы[Позиция];
		
		ДанныеФайла = Новый Структура("Имя, Хранение");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		
		Файл = Новый Файл(Описание.Имя);
		ДанныеФайла.Вставить("ВремяИзменения", Файл.ПолучитьУниверсальноеВремяИзменения());
		
		ПомещенныеФайлы[Позиция] = ДанныеФайла;
	КонецЦикла;
	
	// Удаляем локальные временные клиентские файлы
	Для Каждого ИмяФайла Из ПараметрыЗагрузки.УдалитьПослеПередачиНаСервер Цикл
		АдресныйКлассификаторКлиентСервер.УдалитьВременныйФайл(ИмяФайла);
	КонецЦикла;
	
	// Запуск фонового по загрузке из переданных файлов
	Если ЭтоАдресВременногоХранилища(ПараметрыДлительнойОперации.АдресРезультата) Тогда
		УдалитьИзВременногоХранилища(ПараметрыДлительнойОперации.АдресРезультата);
	КонецЕсли;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	
	Режим = Неопределено;
	ПараметрыЗагрузки.Свойство("Режим", Режим);
	
	ЗапуститьФоновуюЗагрузкуНаСервере(ПараметрыЗагрузки.КодыРегионов, ПомещенныеФайлы, Режим);
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновуюЗагрузкуНаСервере(Знач КодыРегионов, Знач ОписаниеФайловЗагрузки, Знач Режим = Неопределено)
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодыРегионов);
	
	// Файлы преобразуем в двоичные данные - хранилище не может быть разделено с сеансом фонового задания
	ОписаниеФайлов = Новый Массив;
	Для Каждого Описание Из ОписаниеФайловЗагрузки Цикл
		
		ДанныеФайла = Новый Структура("Имя, ВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДанныеФайла.Вставить("Хранение", ПолучитьИзВременногоХранилища(Описание.Хранение));
		
		ОписаниеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	ПараметрыМетода.Добавить(ОписаниеФайлов);
	
	ПараметрыМетода.Добавить(Режим);
	
	ПараметрыДлительнойОперации.Идентификатор   = Неопределено;
	ПараметрыДлительнойОперации.Завершено       = Истина;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	ПараметрыДлительнойОперации.Ошибка          = Неопределено;
	
	Попытка
		РезультатЗапуска = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"АдресныйКлассификатор.ФоновоеЗаданиеЗагрузкиКлассификатораАдресов",
			ПараметрыМетода,
			НСтр("ru = 'Загрузка адресного классификатора'")
		);
	Исключение
		ПараметрыДлительнойОперации.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		Возврат;
		
	КонецПопытки;
	
	ПараметрыДлительнойОперации.Идентификатор   = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыДлительнойОперации.Завершено       = РезультатЗапуска.ЗаданиеВыполнено;
	ПараметрыДлительнойОперации.АдресРезультата = РезультатЗапуска.АдресХранилища;
	
	// Запущенное 
	Элементы.ПрерватьЗагрузку.Доступность = Истина;
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗадания()
	Результат = Новый Структура("Прогресс, Завершено, Ошибка");
	
	Результат.Ошибка = "";
	Если ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		Результат.Завершено = Истина;
		Результат.Прогресс  = Неопределено;
		Результат.Ошибка    = ПараметрыДлительнойОперации.Ошибка;
	Иначе
		Попытка
			Результат.Завершено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.Идентификатор);
			Результат.Прогресс  = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.Идентификатор);
		Исключение
			Результат.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		КонецПопытки
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач Идентификатор)
	
	Если Идентификатор <> Неопределено Тогда
		Попытка
			ДлительныеОперации.ОтменитьВыполнениеЗадания(Идентификатор);
		Исключение
			// Действие не требуется, запись в журнал регистрации уже произведена
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеДлительнойОперации()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		// Завершено с ошибкой, сообщим и вернемся на первую страницу
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		Сообщить(Состояние.Ошибка);
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение;
		ТекстОписанияЗагрузки = НСтр("ru = 'Адресный классификатор успешно загружен.'");
		
		Оповестить("ЗагруженАдресныйКлассификатор", , ЭтотОбъект);
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.Закрыть;
		ПодтверждениеЗакрытияФормы = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		ТекстСостоянияЗагрузки = Состояние.Прогресс.Текст;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", ПараметрыДлительнойОперации.ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция КодыРегионовДляЗагрузки()
	Результат = Новый Массив;
	
	Для Каждого Регион Из СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ) Цикл
		Результат.Добавить(Регион.КодСубъектаРФ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция РаспаковатьАрхивИТС(Знач ПолноеИмяФайла, Знач МаскаОжидаемого)
	
	КаталогКлиента = АдресныйКлассификаторКлиент.ВременныйКаталогКлиента();

	Команда = """" + ПолноеИмяФайла + """ -s -d """ + КаталогКлиента + """";
	ЗапуститьПриложение(Команда, КаталогКлиента, Истина);
	
	// Возвращаем первый файл по ожидаемой маске
	Найденное = АдресныйКлассификаторКлиентСервер.НайтиФайл(КаталогКлиента, МаскаОжидаемого);
	Если Не Найденное.Существует Тогда
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборРегионовЗагрузки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка распаковки файла ""%1"", ожидаемое содержимое не получено'"), ПолноеИмяФайла);
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайла", Найденное.ПолноеИмя);
	Результат.Вставить("ИмяУдаляемогоФайла", КаталогКлиента);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СохраненныеДанныеАутентификацииСайта()
	
	Возврат АдресныйКлассификатор.ПараметрыАутентификацииНаСайте();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодИсточникаЗагрузкиПоУмолчанию()
	
	Возврат "КАТАЛОГ";
	
КонецФункции
#КонецОбласти
