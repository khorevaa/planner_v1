
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() И Параметры.ЗапрашиватьПараметрыАдминистрированияКластера Тогда
		ВызватьИсключение НСтр("ru = 'Настройка параметров кластера серверов доступна только в клиент-серверном режиме работы.'");
	КонецЕсли;
	
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	
	Если Параметры.ПараметрыАдминистрирования = Неопределено Тогда
		ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
	Иначе
		ПараметрыАдминистрирования = Параметры.ПараметрыАдминистрирования;
	КонецЕсли;
	
	Если Не ТребуетсяВводПараметровАдминистрирования() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступноИспользованиеРазделенныхДанных Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(
		ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы);
		Если ПользовательИБ <> Неопределено Тогда
			ИдентификаторАдминистратораИБ = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		Пользователи.НайтиНеоднозначныхПользователейИБ(, ИдентификаторАдминистратораИБ);
		АдминистраторИБ = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторАдминистратораИБ);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ПоясняющаяНадпись) Тогда
		Элементы.ПоясняющаяНадпись.Видимость = Ложь;
	Иначе
		Элементы.ПоясняющаяНадпись.Заголовок = Параметры.ПоясняющаяНадпись;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыАдминистрирования);
	
	Элементы.РежимРаботы.ТекущаяСтраница = ?(ДоступноИспользованиеРазделенныхДанных, Элементы.РазделенныйРежим, Элементы.НеразделенныйРежим);
	Элементы.ГруппаАдминистрированиеИБ.Видимость = Параметры.ЗапрашиватьПараметрыАдминистрированияИБ;
	Элементы.ГруппаАдминистрированиеКластера.Видимость = Параметры.ЗапрашиватьПараметрыАдминистрированияКластера;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		
		ТипПодключения = "RAS";
		Элементы.ТипПодключения.Видимость = Ложь;
		Элементы.ГруппаПараметрыУправления.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаПараметрыУправления.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
		
	КонецЕсли;
	
	Элементы.ГруппаТипПодключения.ТекущаяСтраница = ?(ТипПодключения = "COM", Элементы.ГруппаCOM, Элементы.ГруппаRAS);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ТребуетсяВводПараметровАдминистрирования Тогда
		Закрыть(ПараметрыАдминистрирования);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Параметры.ЗапрашиватьПараметрыАдминистрированияИБ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Если Не ЗначениеЗаполнено(АдминистраторИБ) Тогда
			Возврат;
		КонецЕсли;
		ИмяПоля = "АдминистраторИБ";
	Иначе
		Если ПустаяСтрока(ИмяАдминистратораИнформационнойБазы) Тогда
			Возврат;
		КонецЕсли;
		ИмяПоля = "ИмяАдминистратораИнформационнойБазы";
	КонецЕсли;
	ПользовательИБ = Неопределено;
	ПолучитьАдминистратораИБ(ПользовательИБ);
	Если ПользовательИБ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указанный пользователь не имеет доступа к информационной базе.'"),,
			ИмяПоля,,Отказ);
		Возврат;
	КонецЕсли;
	Если Не Пользователи.ЭтоПолноправныйПользователь(ПользовательИБ, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У пользователя нет административных прав.'"),,
			ИмяПоля,,Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТипПодключенияПриИзменении(Элемент)
	
	Элементы.ГруппаТипПодключения.ТекущаяСтраница = ?(ТипПодключения = "COM", Элементы.ГруппаCOM, Элементы.ГруппаRAS);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнениеНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем структуру настроек
	ЗаполнитьЗначенияСвойств(ПараметрыАдминистрирования, ЭтотОбъект);
	
	ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
	
	СохранитьПараметрыПодключения();
	
	// Восстанавливаем значения паролей
	ЗаполнитьЗначенияСвойств(ПараметрыАдминистрирования, ЭтотОбъект);
	
	Закрыть(ПараметрыАдминистрирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверитьЗаполнениеНаСервере()
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыПодключения()
	
	// Сохраняем параметры в константу, пароли очищаем
	СтандартныеПодсистемыСервер.УстановитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдминистратораИБ(ПользовательИБ = Неопределено)
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Если Не ЗначениеЗаполнено(АдминистраторИБ) Тогда
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			АдминистраторИБ.ИдентификаторПользователяИБ);
	Иначе
		Если ПустаяСтрока(ИмяАдминистратораИнформационнойБазы) Тогда
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		Новый УникальныйИдентификатор(ИмяАдминистратораИнформационнойБазы));
	КонецЕсли;
	
	ИмяАдминистратораИнформационнойБазы = ?(ПользовательИБ = Неопределено, "", ПользовательИБ.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрирования)
	
	Если ТипПодключения = "COM" Тогда
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		ПроверитьПараметрыАдминистрированияФайловойБазы();
		
	Иначе
		
		Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
			
			ПроверитьПараметрыАдминистрированияНаСервере();
			
		Иначе
			АдминистрированиеКластераКлиентСервер.ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрирования,,
				Параметры.ЗапрашиватьПараметрыАдминистрированияКластера, Параметры.ЗапрашиватьПараметрыАдминистрированияИБ);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыАдминистрированияНаСервере()
	
	АдминистрированиеКластераКлиентСервер.ПроверитьПараметрыАдминистрирования(ПараметрыАдминистрирования,,
		Параметры.ЗапрашиватьПараметрыАдминистрированияКластера, Параметры.ЗапрашиватьПараметрыАдминистрированияИБ);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяВводПараметровАдминистрирования()
	
	ТребуетсяВводПараметровАдминистрирования = Истина;
	
	Если Параметры.ЗапрашиватьПараметрыАдминистрированияИБ И Не Параметры.ЗапрашиватьПараметрыАдминистрированияКластера Тогда
		
		КоличествоПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество();
		
		Если КоличествоПользователей > 0 Тогда
			
			// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
			// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
			// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь()
			ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			
			Если ТекущийПользователь = Неопределено Тогда
				ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
			КонецЕсли;
			
			Если ТекущийПользователь.АутентификацияСтандартная И Не ТекущийПользователь.ПарольУстановлен 
				И Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь, Истина) Тогда
				
				ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы = ТекущийПользователь.Имя;
				ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы = "";
				
				ТребуетсяВводПараметровАдминистрирования = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли КоличествоПользователей = 0 Тогда
			
			ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы = "";
			ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы = "";
			
			ТребуетсяВводПараметровАдминистрирования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяВводПараметровАдминистрирования;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПараметрыАдминистрированияФайловойБазы()
	
	Если Параметры.ЗапрашиватьПараметрыАдминистрированияИБ Тогда
		
		// В базовых версиях проверку подключения не осуществляем;
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
		Если ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации Тогда
			Возврат;
		КонецЕсли;
		
		ИмяCOMСоединителя = ПараметрыРаботыКлиента.ИмяCOMСоединителя;
		
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		СтрокаПодключения = "Usr=""" + ИмяАдминистратораИнформационнойБазы + """;Pwd=""" + ПарольАдминистратораИнформационнойБазы + """";
		
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
		
		ComConnector = Новый COMОбъект(ИмяCOMСоединителя);
		СтрокаСоединенияИнформационнойБазы = СтрокаСоединения + СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры