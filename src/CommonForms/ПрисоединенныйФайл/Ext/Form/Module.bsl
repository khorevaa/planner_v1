
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ФайлБылСоздан = Параметры.ЭтоНовый;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ТаблицаПодписей").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		КопируемыйОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
		
		ОбъектЗначение = Справочники[КопируемыйОбъект.Метаданные().Имя].СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(
			ОбъектЗначение,
			КопируемыйОбъект,
			"ДатаМодификацииУниверсальная,
			|ДатаСоздания,
			|Зашифрован,
			|Описание,
			|ПодписанЭП,
			|Размер,
			|Расширение,
			|ТекстХранилище,
			|ВладелецФайла,
			|ПометкаУдаления");
		
		Для Каждого ЭлементЭП Из КопируемыйОбъект.ЭлектронныеПодписи Цикл
			НоваяСтрока = ОбъектЗначение.ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЭП);
		КонецЦикла;
		
		Для Каждого ЭлементШифрования Из КопируемыйОбъект.СертификатыШифрования Цикл
			НоваяСтрока = ОбъектЗначение.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементШифрования);
		КонецЦикла;
		
		ОбъектЗначение.Автор = Пользователи.АвторизованныйПользователь();
	Иначе
		Если Параметры.Свойство("ПрисоединенныйФайл") Тогда
			ОбъектЗначение = Параметры.ПрисоединенныйФайл.ПолучитьОбъект();
		Иначе
			ОбъектЗначение = Параметры.Ключ.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	ИмяСправочника = ОбъектЗначение.Метаданные().Имя;
	
	НастроитьОбъектФормы(ОбъектЗначение);
	
	ЗаполнитьСписокПодписей();
	ЗаполнитьСписокШифрования();
	
	Если ТолькоПросмотр
	 ИЛИ НЕ ПравоДоступа("Изменение", ЭтотОбъект.Объект.ВладелецФайла.Метаданные()) Тогда
		
		УстановитьКнопкиИзмененияНевидимыми(Элементы);
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр
	   И НЕ ЭтотОбъект.Объект.Ссылка.Пустая() Тогда
		
		ЗаблокироватьДанныеДляРедактирования(ЭтотОбъект.Объект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаМодификации = МестноеВремя(ЭтотОбъект.Объект.ДатаМодификацииУниверсальная);
	
	ПрочитатьЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	РазблокироватьОбъект(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьСертификатШифрования(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если ЭтоНовый() Или ЭтотОбъект.Объект.Зашифрован Или ЭтотОбъект.Объект.ПодписанЭП Или Не ЭтотОбъект.Объект.Редактирует.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, , Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеЗавершение", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ВыбратьФайлНаДискеИПоместитьВХранилище(ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписатьИЗакрыть(Команда)
	
	Если ОбработатьКомандуЗаписиФайла() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписать(Команда)
	
	ОбработатьКомандуЗаписиФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаления(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и снять пометку на удаление с файла
				      |""%1""?'");
		Иначе
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и пометить на удаление файл
				      |""%1""?'");
		КонецЕсли;
	Иначе
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять пометку на удаление с файла
			                          |""%1""?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить на удаление файл
			                          |""%1""?'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстВопроса, ЭтотОбъект.Объект.Ссылка);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартныеУстановитьПометкуУдаленияОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаленияОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Объект.ПометкаУдаления = НЕ ЭтотОбъект.Объект.ПометкаУдаления;
		ОбработатьКомандуЗаписиФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартнаяПеречитатьОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитатьОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеречитатьДанныеССервера();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеСкопировать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначениеКопирования", ЭтотОбъект.Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд ЭП и шифрования

&НаКлиенте
Процедура ПодписатьФайлЭП(Команда)
	
	Если ЭтоНовый() Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьФайлЭППодписьПолучена", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ВыбратьСертификатыЭПИСформироватьДанныеПодписи(
		ОписаниеОповещения, ЭтотОбъект.Объект.Ссылка, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЭППодписьПолучена(ДанныеПодписи, ДополнительныеПараметры) Экспорт
	
	Если ДанныеПодписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗанестиИнформациюОднойПодписи(ДанныеПодписи);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(Неопределено);
		Возврат;
	КонецЕсли;
	#КонецЕсли

	Если ЭтоНовый() Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаРасширениеПредложено", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаПодписиПолучены", ЭтотОбъект);
		ПрисоединенныеФайлыСлужебныйКлиент.ПолучитьМассивПодписей(ОписаниеОповещения,
			ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	Иначе
#Если ВебКлиент Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаПодписиПолучены(МассивПодписей, ДополнительныеПараметры) Экспорт
	Если МассивПодписей.Количество() > 0 Тогда
		ЗанестиИнформациюОПодписях(МассивПодписей);
		ПрисоединенныеФайлыСлужебныйКлиент.ОповеститьОДобавленииПодписиИзФайла(
			ЭтотОбъект.Объект.Ссылка, МассивПодписей.Количество());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(
		ЭтотОбъект.Объект.Ссылка,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если ЭтоНовый() Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗашифроватьДанныеПолучены", ЭтотОбъект, ДанныеФайла);
	ПрисоединенныеФайлыСлужебныйКлиент.ПолучитьЗашифрованныеДанные(ОписаниеОповещения, ЭтотОбъект.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьДанныеПолучены(РезультатПолучения, ДанныеФайла) Экспорт
	Если РезультатПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеДанные = РезультатПолучения.ЗашифрованныеДанные;
	МассивОтпечатков = РезультатПолучения.МассивОтпечатков;
	
	ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(
		ЭтотОбъект.Объект.Ссылка, ДанныеФайла);
	
	ЗаполнитьСписокШифрования();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если ЭтоНовый() Или Не ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьДанныеПолучены", ЭтотОбъект);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ПолучитьРасшифрованныеДанные(ОписаниеОповещения,
		ЭтотОбъект.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьДанныеПолучены(РасшифрованныеДанные, ДополнительныеПараметры) Экспорт
	
	Если РасшифрованныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасшифроватьСервер(РасшифрованныеДанные);
	ПрисоединенныеФайлыСлужебныйКлиент.ОповеститьОРасшифровкеФайла(ЭтотОбъект.Объект.Ссылка);
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭПСписокОткрытьПодпись(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	ОбщиеНастройкиРаботыСЭП = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Если ОбщиеНастройкиРаботыСЭП.ВыполнятьПроверкуЭПНаСервере Тогда
		
		ДанныеВыделенныхСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТаблицаПодписей.НайтиПоИдентификатору(Элемент));
			ДанныеВыделенныхСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ПроверитьПодписиНаСервере(ДанныеВыделенныхСтрок);
		
		Индекс = 0;
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			Строка = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
			Строка.Статус = ДанныеВыделенныхСтрок[Индекс].Статус;
			Строка.Неверна = ДанныеВыделенныхСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(
			ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка).СсылкаНаДвоичныеДанныеФайла);
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ТаблицаПодписей.ДанныеСтроки(Элемент);
			
			Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ОбщиеНастройкиРаботыСЭП = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Если ОбщиеНастройкиРаботыСЭП.ВыполнятьПроверкуЭПНаСервере Тогда
		
		ДанныеСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЗ);
			ДанныеСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ПроверитьПодписиНаСервере(ДанныеСтрок);
		
		Индекс = 0;
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			СтрокаТЗ.Статус = ДанныеСтрок[Индекс].Статус;
			СтрокаТЗ.Неверна = ДанныеСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(
			ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка).СсылкаНаДвоичныеДанныеФайла);
		
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		
		Для Каждого Строка Из ТаблицаПодписей Цикл
			Если Строка.Объект <> Неопределено И (НЕ Строка.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(Строка, МенеджерКриптографии, ДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	
	Если ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		ЭлектроннаяПодписьКлиент.СохранитьПодпись(ТекущиеДанные.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭПОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭПОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИзСпискаПодписейИЗаписатьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = ТекущиеДанные.Отпечаток;
	
	Сертификат = Неопределено;
	СтруктураСертификата = Неопределено;
	Если НЕ ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ТекущиеДанные.АдресСертификата);
		
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	Иначе
		СтруктураСертификата = ЭлектроннаяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;
	
	Если СтруктураСертификата <> Неопределено Тогда
		
		ЭлектроннаяПодписьКлиент.ОткрытьСертификатСоСтруктурой(
			СтруктураСертификата, Отпечаток, ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместной работы с файлами

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.ПодписанЭП
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	   И ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	Иначе
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
		ЗанятьФайлДляРедактированияСервер();
		ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если ЭтоНовый()
		Или Не ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		Или ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
			Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, , Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения,ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле <> Неопределено Тогда
		ПоместитьФайлВХранилищеИОсвободить(ИнформацияОФайле);
		ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если ЭтоНовый()
	 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 ИЛИ ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Присоединенный файл)'"), Строка(ЭтотОбъект.Объект.Ссылка));
	Иначе
		Заголовок = НСтр("ru = 'Присоединенный файл (Создание)'")
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПодписиНаСервере(КоллекцияСтрок)
	
	ФайловыеФункцииСлужебный.ПроверитьПодписиВСтрокахКоллекции(КоллекцияСтрок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра()
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ФайлРедактируется = ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	                  И ЭтотОбъект.Объект.Редактирует = ТекущийПользователь;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла()
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыСлужебныйКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак()
	
	Если ЭтоНовый()
	 ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ЗаписываемыйОбъект, ИнформацияОФайле);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкиИзмененияНевидимыми(Элементы)
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	
	Для каждого ЭлементФормы ИЗ Элементы Цикл
	
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если ЭтотОбъект.Объект.Зашифрован Тогда
		Для Каждого СтруктураСертификата Из РеквизитФормыВЗначение("Объект").СертификатыШифрования Цикл
			
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
			
			ДвоичныеДанныеСертификата = СтруктураСертификата.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Разрешено расшифровывать'");
	
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка =ТекстЗаголовка + " (" + Формат(СертификатыШифрования.Количество(), "ЧГ=") + ")";
	КонецЕсли;
	
	Элементы.ГруппаШифрование.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанныеФайла)
	
	СтруктураВозврата = "";
	
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
	
	Попытка
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
			МенеджерКриптографии,
			ДвоичныеДанныеФайла,
			ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус =
			НСтр("ru = 'Неверна.'") + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ТаблицаПодписей.Очистить();
	
	Если ЭтотОбъект.Объект.ПодписанЭП Тогда
		
		Для Каждого ЭлементЭП Из РеквизитФормыВЗначение("Объект").ЭлектронныеПодписи Цикл
			
			НоваяСтрока = ТаблицаПодписей.Добавить();
			
			НоваяСтрока.КомуВыданСертификат = ЭлементЭП.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи         = ЭлементЭП.ДатаПодписи;
			НоваяСтрока.Комментарий         = ЭлементЭП.Комментарий;
			НоваяСтрока.Объект              = ЭтотОбъект.Объект.Ссылка;
			НоваяСтрока.Отпечаток           = ЭлементЭП.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ЭлементЭП.УстановившийПодпись;
			НоваяСтрока.Неверна             = Ложь;
			НоваяСтрока.АдресПодписи        = ПоместитьВоВременноеХранилище(
				ЭлементЭП.Подпись.Получить(), УникальныйИдентификатор);
			
			ДвоичныеДанныеСертификата = ЭлементЭП.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Электронные подписи'");
	
	Если ТаблицаПодписей.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ТаблицаПодписей.Количество()) + ")";
	КонецЕсли;
	
	Элементы.ГруппаЭлектронныеПодписи.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаПодписейИЗаписатьФайл()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого НомерВыделеннойСтроки Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
		УдаляемаяСтрока = ТаблицаПодписей.НайтиПоИдентификатору(НомерВыделеннойСтроки);
		ИндексУдаляемойСтроки = ТаблицаПодписей.Индекс(УдаляемаяСтрока);
		ТаблицаПодписей.Удалить(ИндексУдаляемойСтроки);
		ЗаписываемыйОбъект.ЭлектронныеПодписи.Удалить(ИндексУдаляемойСтроки);
	КонецЦикла;
	
	Если ЗаписываемыйОбъект.ЭлектронныеПодписи.Количество() = 0 Тогда
		ЗаписываемыйОбъект.ПодписанЭП = Ложь;
	КонецЕсли;
	
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(РасшифрованныеДанные)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.Расшифровать(ЗаписываемыйОбъект, РасшифрованныеДанные);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопок(Форма, Элементы, ТекущийПользователь)
	
	ФайлРедактируется = ЗначениеЗаполнено(Форма.Объект.Редактирует);
	ФайлРедактируетТекущийПользователь = Форма.Объект.Редактирует = ТекущийПользователь;
	
	ИменаВсехКоманд = ПолучитьИменаКомандФормы();
	ИменаКоманд = ПолучитьДоступныеКоманды(
		ФайлРедактируется,
		ФайлРедактируетТекущийПользователь,
		Форма.Объект.ПодписанЭП,
		Форма.Объект.Зашифрован,
		Форма.Объект.Ссылка.Пустая());
		
	Если Форма.ТаблицаПодписей.Количество() = 0 Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьПодпись");
	КонецЕсли;
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаВсехКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды, которые доступны любому пользователю читающему файлы.
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("ОткрытьСертификат");
	ИменаКоманд.Добавить("ОткрытьПодпись");
	ИменаКоманд.Добавить("ПроверитьЭП");
	ИменаКоманд.Добавить("ПроверитьВсе");
	ИменаКоманд.Добавить("СохранитьПодпись");
	
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъекта()
	
	ИменаКоманд = Новый Массив;
	
	ИменаКоманд.Добавить("ПодписатьФайлЭП");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	
	ИменаКоманд.Добавить("УдалитьЭП");
	
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("СтандартныеСкопировать");
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	ИменаКоманд.Добавить("СтандартнаяЗаписать");
	ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
	ИменаКоманд.Добавить("СтандартныеУстановитьПометкуУдаления");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
                                 ФайлРедактируетТекущийПользователь,
                                 ФайлПодписан,
                                 ФайлЗашифрован,
                                 ЭтоНовыйФайл)
	
	Если ЭтоНовыйФайл Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("СтандартнаяЗаписать");
		ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
		Возврат ИменаКоманд;
	КонецЕсли;
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандыЭП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьСертификат");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьПодпись");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьЭП");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьВсе");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьПодпись");
		УдалитьКомандуИзМассива(ИменаКоманд, "УдалитьЭП");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭП");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭП(Знач ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭП");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ПрисоединенныеФайлыСлужебный.Зашифровать(ЗаписываемыйОбъект, ЗашифрованныеДанные, МассивОтпечатков);
	
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиИнформациюОПодписях(МассивПодписей)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ПрисоединенныеФайлы.ЗанестиИнформациюОПодписях(
		ЗаписываемыйОбъект, МассивПодписей);
	
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиИнформациюОднойПодписи(ДанныеПодписи)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ЗаписываемыйОбъект, ДанныеПодписи);
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанятьФайлДляРедактированияСервер()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ИнформацияОФайле)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(ЗаписываемыйОбъект, ИнформацияОФайле);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьФайл()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлыСлужебный.ОсвободитьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьКомандуЗаписиФайла()
	
	Если ПустаяСтрока(ЭтотОбъект.Объект.Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для продолжения укажите имя файла.'"), , "Наименование", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ФайловыеФункцииСлужебныйКлиент.КорректноеИмяФайла(ЭтотОбъект.Объект.Наименование);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,"Наименование", "Объект");
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗаписатьФайл() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	
	Оповестить("Запись_ПрисоединенныйФайл",
	           Новый Структура("ЭтоНовый", ФайлБылСоздан),
	           ЭтотОбъект.Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПеречитатьДанныеССервера()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьФайл(Знач ПараметрОбъект = Неопределено)
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ЗаписываемыйОбъект = ПараметрОбъект;
	КонецЕсли;
	
	ТранзакцияАктивна = Ложь;
	Попытка
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЗначениеКопирования);
			
			Если ФайловыеФункцииСлужебный.ТипХраненияФайлов()
			   = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				
				НачатьТранзакцию();
				ТранзакцияАктивна = Истина;
				СсылкаНового = Справочники[ИмяСправочника].ПолучитьСсылку();
				ЗаписываемыйОбъект.УстановитьСсылкуНового(СсылкаНового);
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Иначе
				// Добавление файла в один из томов (где есть свободное место).
				ФайловыеФункцииСлужебный.ДобавитьНаДиск(
					ДвоичныеДанные,
					ЗаписываемыйОбъект.ПутьКФайлу,
					ЗаписываемыйОбъект.Том, 
					ЗаписываемыйОбъект.ДатаМодификацииУниверсальная,
					"",
					ЗаписываемыйОбъект.Наименование,
					ЗаписываемыйОбъект.Расширение,
					ЗаписываемыйОбъект.Размер);
				
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписываемыйОбъект.Записать();
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Ошибка записи присоединенного файла'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	КонецЕсли;
	
	ЗначениеКопирования = Справочники[ИмяСправочника].ПустаяСсылка();
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы, ТекущийПользователь);
	
	ОбновитьЗаголовок();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НастроитьОбъектФормы(Знач НовыйОбъект)
	
	ТипНовогоОбъекта = Новый Массив;
	ТипНовогоОбъекта.Добавить(ТипЗнч(НовыйОбъект));
	
	НовыйРеквизит = Новый РеквизитФормы("Объект", Новый ОписаниеТипов(ТипНовогоОбъекта));
	НовыйРеквизит.СохраняемыеДанные = Истина;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы")
		   И Лев(Элемент.ПутьКДанным, СтрДлина("ОбъектПрототип[0].")) = "ОбъектПрототип[0]."
		   И Прав(Элемент.Имя, 1) = "0" Тогда
			
			ИмяЭлемента = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) -1);
			Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Вставить(ИмяЭлемента, ТипЗнч(Элемент), Элемент.Родитель, Элемент);
			НовыйЭлемент.ПутьКДанным = "Объект." + Сред(Элемент.ПутьКДанным, СтрДлина("ОбъектПрототип[0].") + 1);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент, ,
				"Имя, ПутьКДанным, ВыделенныйТекст, СвязьПоТипу");
			
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьОбъект(Знач Ссылка, Знач УникальныйИдентификатор)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЭП()
	
	Если ТаблицаПодписей.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройкиРаботыСЭП = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	
	Если ОбщиеНастройкиРаботыСЭП.ВыполнятьПроверкуЭПНаСервере Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПодключитьРасширениеРаботыСКриптографией() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПодписей Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.Отпечаток) Тогда // Подпись не была прочитана при записи объекта.
			Подпись = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресПодписи);
			
			Если ЗначениеЗаполнено(Подпись) Тогда 
				Попытка
					Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
				Исключение
					Возврат;
				КонецПопытки;
				Сертификат = Сертификаты[0];
				
				СтрокаТаблицы.Отпечаток = Base64Строка(Сертификат.Отпечаток);
				
				СтрокаТаблицы.КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер
					.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоНовый()
	
	Возврат ЭтотОбъект.Объект.Ссылка.Пустая();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзФайлаНаДискеЗавершение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти
