
#Область УправлениеФормой

&НаКлиенте
Процедура УстановитьЗаголовок()
	ЭтотОбъект.АвтоЗаголовок	= Ложь;
	ЭтотОбъект.Заголовок		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Событие%1'"),
		?(ПустаяСтрока(Наименование), "", ": ") + СокрЛП(Наименование));
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыПереключенияЦветовНаСервере()
	Справочники.ЦветоваяГаммаПланировщика.ДобавитьПалитруЦветовНаФорму(ЭтотОбъект, ЦветФона, "ГруппаКомандыЦветФона", "ЦветФонаСобытия", 1);	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьЭлементыНапоминанийНаСервере()
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Напоминания Цикл
		Индекс		= Индекс + 1;
		СтрИндекс	= Формат(Индекс, "ЧГ=");
		
		ИмяГруппы			= "ГруппаНапоминание_" + СтрИндекс;
		ГруппаНапоминания	= Элементы.Найти(ИмяГруппы);
		Если ГруппаНапоминания = Неопределено Тогда
			ГруппаНапоминания = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаНапоминания, Элементы.ДобавитьНапоминание);
			ГруппаНапоминания.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНапоминания.Заголовок		= "";
			ГруппаНапоминания.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаНапоминания.ОтображатьЗаголовок	= Ложь;
			ГруппаНапоминания.Отображение	= ОтображениеОбычнойГруппы.Нет;
			
			// Вид
			ПолеВидНапоминания = Элементы.Добавить("ВидНапоминания_" + СтрИндекс, Тип("ПолеФормы"), ГруппаНапоминания);
			ПолеВидНапоминания.Вид					= ВидПоляФормы.ПолеВвода;
			ПолеВидНапоминания.Заголовок			= "";
			ПолеВидНапоминания.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВидНапоминания.Подсказка			= НСтр("ru='Вид напоминания'");
			ПолеВидНапоминания.ПутьКДанным			= "Напоминания[" + Формат(Индекс-1, "ЧН=0; ЧГ=") + "].Вид";
			ПолеВидНапоминания.ПодсказкаВвода		= НСтр("ru='Способ'");
			ПолеВидНапоминания.РедактированиеТекста	= Ложь;
			ПолеВидНапоминания.РежимВыбораИзСписка	= Истина;
			ПолеВидНапоминания.Ширина				= 30;
			
			ДобавитьВидыНапоминанийВСписокВыбораНаСервере(Элементы["ВидНапоминания_" + СтрИндекс].СписокВыбора, ЭтотОбъект.ДопустимыеВидыНапоминаний);
			
			// Интервал
			ПолеИнтервалНапоминания = Элементы.Добавить("ИнтервалНапоминания_" + СтрИндекс, Тип("ПолеФормы"), ГруппаНапоминания);
			ПолеИнтервалНапоминания.Вид					= ВидПоляФормы.ПолеВвода;
			ПолеИнтервалНапоминания.Заголовок			= "";
			ПолеИнтервалНапоминания.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеИнтервалНапоминания.Подсказка			= НСтр("ru='Интервал напоминания'");
			ПолеИнтервалНапоминания.ПутьКДанным			= "Напоминания[" + Формат(Индекс-1, "ЧН=0; ЧГ=") + "].Интервал";
			ПолеИнтервалНапоминания.Ширина				= 5;
			ПолеИнтервалНапоминания.КнопкаРегулирования	= Истина;
			
			УстановитьГраницыЗначенийИнтервалаНапоминания(ЭтотОбъект, Элементы["ИнтервалНапоминания_" + СтрИндекс]);
			
			// Вид интервала
			ПолеВидИнтервалаНапоминания = Элементы.Добавить("ВидИнтервалаНапоминания_" + СтрИндекс, Тип("ПолеФормы"), ГруппаНапоминания);
			ПолеВидИнтервалаНапоминания.Вид						= ВидПоляФормы.ПолеВвода;
			ПолеВидИнтервалаНапоминания.Заголовок				= "";
			ПолеВидИнтервалаНапоминания.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВидИнтервалаНапоминания.Подсказка				= НСтр("ru='Вид интервала напоминания'");
			ПолеВидИнтервалаНапоминания.ПутьКДанным				= "Напоминания[" + Формат(Индекс-1, "ЧН=0; ЧГ=") + "].ВидИнтервала";
			ПолеВидИнтервалаНапоминания.ПодсказкаВвода			= НСтр("ru='Кратность'");
			ПолеВидИнтервалаНапоминания.РедактированиеТекста	= Ложь;
			ПолеВидИнтервалаНапоминания.РежимВыбораИзСписка		= Истина;
			ПолеВидИнтервалаНапоминания.Ширина					= 10;
			ПолеВидИнтервалаНапоминания.УстановитьДействие("ПриИзменении", "ВидИнтервалаНапоминанияПриИзменении");
			
			ДобавитьВидыИнтерваловНапоминанийВСписокВыбораНаСервере(Элементы["ВидИнтервалаНапоминания_" + СтрИндекс].СписокВыбора);
			
			// Удалить
			КомандаФормы = Команды.Найти("УдалитьНапоминание_" + СтрИндекс);
			Если КомандаФормы = Неопределено Тогда
				КомандаФормы = Команды.Добавить("УдалитьНапоминание_" + СтрИндекс);
				КомандаФормы.Заголовок					= "";
				КомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
				КомандаФормы.Картинка					= БиблиотекаКартинок.Очистить;
				КомандаФормы.Отображение				= ОтображениеКнопки.Картинка;
				КомандаФормы.Подсказка					= НСтр("ru='Удалить напоминание'");
				КомандаФормы.Действие					= "УдалитьНапоминание";
			КонецЕсли;
			
			КнопкаУдалить = Элементы.Добавить("УдалитьНапоминание_" + СтрИндекс, Тип("КнопкаФормы"), ГруппаНапоминания);
			КнопкаУдалить.Вид			= ВидКнопкиФормы.Гиперссылка;
			КнопкаУдалить.ИмяКоманды	= КомандаФормы.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Индекс		= Индекс + 1;
	ИмяГруппы	= "ГруппаНапоминание_" + Формат(Индекс, "ЧГ=");
	Пока НЕ Элементы.Найти(ИмяГруппы) = Неопределено Цикл
		Элементы.Удалить(Элементы[ИмяГруппы]);
		
		Индекс = Индекс + 1;
		ИмяГруппы = "ГруппаНапоминание_" + Формат(Индекс, "ЧГ=");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьЭлементыУчастниковНаСервере()
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Участники Цикл
		Индекс		= Индекс + 1;
		СтрИндекс	= Формат(Индекс, "ЧГ=");
		
		Если СтрокаТаблицы.ВидУчастника = Перечисления.ВидыУчастниковСобытийПланировщика.Организатор Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы		= "ГруппаУчастник_" + СтрИндекс;
		ГруппаУчастника	= Элементы.Найти(ИмяГруппы);
		Если ГруппаУчастника = Неопределено Тогда
			ГруппаУчастника = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСписокУчастников);
			ГруппаУчастника.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаУчастника.Заголовок	= "";
			ГруппаУчастника.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаУчастника.ОтображатьЗаголовок	= Ложь;
			ГруппаУчастника.Отображение	= ОтображениеОбычнойГруппы.Нет;
			
			// Представление
			ГруппаПредставлениеУчастника = Элементы.Добавить("ГруппаУчастникПредставление_" + СтрИндекс, Тип("ГруппаФормы"), ГруппаУчастника);
			ГруппаПредставлениеУчастника.Вид			= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПредставлениеУчастника.Заголовок		= "";
			ГруппаПредставлениеУчастника.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаПредставлениеУчастника.ОтображатьЗаголовок	= Ложь;
			ГруппаПредставлениеУчастника.Отображение	= ОтображениеОбычнойГруппы.Нет;
			
			// Обязательно
			КомандаОбязательно = Команды.Найти("УчастникОбязательно_" + СтрИндекс);
			Если КомандаОбязательно = Неопределено Тогда
				КомандаОбязательно = Команды.Добавить("УчастникОбязательно_" + СтрИндекс);
				КомандаОбязательно.Заголовок					= "";
				КомандаОбязательно.ИзменяетСохраняемыеДанные	= Истина;
				КомандаОбязательно.Картинка						= БиблиотекаКартинок.НеобязательныйУчастникСобытия;
				КомандаОбязательно.Отображение					= ОтображениеКнопки.Картинка;
				КомандаОбязательно.Подсказка					= НСтр("ru='Обязательное участие в событии'");
				КомандаОбязательно.Действие						= "ИзменениеОбязательноУчастника";
			КонецЕсли;
			
			КнопкаОбязательно = Элементы.Добавить("УчастникОбязательно_" + СтрИндекс, Тип("КнопкаФормы"), ГруппаПредставлениеУчастника);
			КнопкаОбязательно.Вид			= ВидКнопкиФормы.Гиперссылка;
			КнопкаОбязательно.ИмяКоманды	= КомандаОбязательно.Имя;
			КнопкаОбязательно.Ширина		= 2;
			КнопкаОбязательно.Доступность	= ЭтоСобытиеИсполнителя;
			КнопкаОбязательно.Картинка		= ?(СтрокаТаблицы.Обязательно, БиблиотекаКартинок.ОбязательныйУчастникСобытия, БиблиотекаКартинок.НеобязательныйУчастникСобытия);
			
			// Уведомлять
			КомандаУведомлять = Команды.Найти("УведомлятьУчастника_" + СтрИндекс);
			Если КомандаУведомлять = Неопределено Тогда
				КомандаУведомлять = Команды.Добавить("УведомлятьУчастника_" + СтрИндекс);
				КомандаУведомлять.Заголовок					= "";
				КомандаУведомлять.ИзменяетСохраняемыеДанные	= Истина;
				КомандаУведомлять.Картинка					= БиблиотекаКартинок.НеуведомлятьУчастникаСобытия;
				КомандаУведомлять.Отображение				= ОтображениеКнопки.Картинка;
				КомандаУведомлять.Подсказка					= НСтр("ru='Уведомление о событии'");
				КомандаУведомлять.Действие					= "УведомлятьУчастника";
			КонецЕсли;
			
			Если СтрокаТаблицы.Уведомлять И СтрокаТаблицы.Отправлено Тогда
				КнопкаУведомлять = Элементы.Добавить("УведомлятьУчастника_" + СтрИндекс, Тип("ДекорацияФормы"), ГруппаПредставлениеУчастника);
				КнопкаУведомлять.Вид	= ВидДекорацииФормы.Картинка;
				КнопкаУведомлять.Высота	= 1;
			Иначе 
				КнопкаУведомлять = Элементы.Добавить("УведомлятьУчастника_" + СтрИндекс, Тип("КнопкаФормы"), ГруппаПредставлениеУчастника);
				КнопкаУведомлять.Вид		= ВидКнопкиФормы.Гиперссылка;
				КнопкаУведомлять.ИмяКоманды	= КомандаУведомлять.Имя;
			КонецЕсли;
			КнопкаУведомлять.Ширина		= 2;
			КнопкаУведомлять.Видимость	= ЭтоСобытиеИсполнителя;
			КнопкаУведомлять.Картинка	= ?(СтрокаТаблицы.Уведомлять, 
				?(СтрокаТаблицы.Отправлено, БиблиотекаКартинок.УведомлениеУчастникуОтправлено, БиблиотекаКартинок.УведомлятьУчастникаСобытия),
				БиблиотекаКартинок.НеуведомлятьУчастникаСобытия);
			
			// Участник
			ПолеУчастник = Элементы.Добавить("Участник_" + СтрИндекс, Тип("ПолеФормы"), ГруппаПредставлениеУчастника);
			ПолеУчастник.Вид				= ВидПоляФормы.ПолеНадписи;
			ПолеУчастник.Гиперссылка		= Истина;
			ПолеУчастник.Заголовок			= "";
			ПолеУчастник.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеУчастник.Подсказка			= НСтр("ru=''");
			ПолеУчастник.ПутьКДанным		= "Участники[" + Формат(Индекс-1, "ЧН=0; ЧГ=") + "].Представление";
			ПолеУчастник.Ширина				= 20;
			ПолеУчастник.УстановитьДействие("Нажатие", "УчастникПредставлениеНажатие");
			
			// Удалить
			КомандаФормы = Команды.Найти("УдалитьУчастника_" + СтрИндекс);
			Если КомандаФормы = Неопределено Тогда
				КомандаФормы = Команды.Добавить("УдалитьУчастника_" + СтрИндекс);
				КомандаФормы.Заголовок					= "";
				КомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
				КомандаФормы.Картинка					= БиблиотекаКартинок.Очистить;
				КомандаФормы.Отображение				= ОтображениеКнопки.Картинка;
				КомандаФормы.Подсказка					= НСтр("ru='Удалить участника'");
				КомандаФормы.Действие					= "УдалитьУчастника";
			КонецЕсли;
			
			КнопкаУдалить = Элементы.Добавить("УдалитьУчастника_" + СтрИндекс, Тип("КнопкаФормы"), ГруппаПредставлениеУчастника);
			КнопкаУдалить.Вид			= ВидКнопкиФормы.Гиперссылка;
			КнопкаУдалить.ИмяКоманды	= КомандаФормы.Имя;
			КнопкаУдалить.Видимость		= ЭтоСобытиеИсполнителя;
			
			// Комментарий
			Если ЗначениеЗаполнено(СтрокаТаблицы.Комментарий) Тогда
				ПолеКомментарий = Элементы.Добавить("УчастникКомментарий_" + СтрИндекс, Тип("ПолеФормы"), ГруппаУчастника);
				ПолеКомментарий.Вид			= ВидПоляФормы.ПолеНадписи;
				ПолеКомментарий.Заголовок	= "";
				ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеКомментарий.Подсказка	= НСтр("ru=''");
				ПолеКомментарий.ПутьКДанным	= "Участники[" + Формат(Индекс-1, "ЧН=0; ЧГ=") + "].Комментарий";
				ПолеКомментарий.РастягиватьПоГоризонтали = Истина;
				ПолеКомментарий.Шрифт		= Новый Шрифт(ПолеКомментарий.Шрифт,, 8);
				ПолеКомментарий.ЦветТекста	= WebЦвета.Серый;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Индекс		= Индекс + 1;
	ИмяГруппы	= "ГруппаУчастник_" + Формат(Индекс, "ЧГ=");
	Пока НЕ Элементы.Найти(ИмяГруппы) = Неопределено Цикл
		Элементы.Удалить(Элементы[ИмяГруппы]);
		
		Индекс		= Индекс + 1;
		ИмяГруппы	= "ГруппаУчастник_" + Формат(Индекс, "ЧГ=");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ИнициализацияФормыПостороннегоСобытия()
	// Настройка доступа
	Элементы.ГруппаНаименованиеКод.ТолькоПросмотр		= НЕ ЭтоСобытиеИсполнителя;
	Элементы.ГруппаПериодСобытия.ТолькоПросмотр			= НЕ ЭтоСобытиеИсполнителя;
	Элементы.ГруппаДопНастройкиПериода.ТолькоПросмотр	= НЕ ЭтоСобытиеИсполнителя;
	Элементы.ГруппаСодержание.ТолькоПросмотр			= НЕ ЭтоСобытиеИсполнителя;
	Элементы.ГруппаЦветФона.ТолькоПросмотр				= НЕ ЭтоСобытиеИсполнителя;
	
	// Видимость некоторых элементов
	Элементы.ГруппаДанныеУчастника.Видимость= НЕ ЭтоСобытиеИсполнителя;
	Элементы.ГруппаОтветУчастника.Видимость = НЕ ЭтоСобытиеИсполнителя;
	Элементы.Календарь.Видимость			= ЭтоСобытиеИсполнителя;
	Элементы.ДобавитьНапоминание.Видимость	= ЭтоСобытиеИсполнителя;
	Элементы.ДобавитьУчастника.Видимость	= ЭтоСобытиеИсполнителя;
	Элементы.ФормаУдалитьИЗакрыть.Видимость	= ЭтоСобытиеИсполнителя;
	Элементы.ГруппаУчастники.Видимость		= ЭтоСобытиеИсполнителя;
	
	// Доступность редактирования
	Элементы.ГруппаКомандыЦветФона.Доступность	= ЭтоСобытиеИсполнителя;
	
	// Цвет фона
	Элементы.ГруппаНапоминания.ЦветФона = Элементы.ГруппаДанныеУчастника.ЦветФона;
	
	// Команды на форме
	Элементы.ФормаЗаписатьИЗакрыть.ИмяКоманды	= "ЗаписатьУчастникаИЗакрыть";
	Элементы.ФормаЗаписать.ИмяКоманды			= "ЗаписатьУчастника";
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы()
	
	// проверка представления повторения
	Если Повторять И ПустаяСтрока(ПовторПредставление) Тогда
		СтруктураПовтор = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруПовторения();
		ЗаполнитьЗначенияСвойств(СтруктураПовтор, ЭтотОбъект);
		ЭтотОбъект.ПовторПредставление = ПланировщикДанныеКлиентСервер.ПолучитьПредставлениеПовторения(СтруктураПовтор);
	КонецЕсли;
	
	// отмененные события на всякий случай блокируем
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыСобытийПланировщика.Отменено") Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// контактная информация
	ПодсистемаКИ	= ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация");
	МестоСобытияВид	= ?(ПодсистемаКИ, Справочники["ВидыКонтактнойИнформации"].ФактАдресОрганизации, Неопределено);
	Элементы.МестоСобытия.КнопкаВыбора = ?(ПодсистемаКИ, Истина, Ложь);
	
	// Виды напоминаний
	ЗаполнитьДопустимыеВидыНапоминанийНаСервере(ЭтотОбъект.ДопустимыеВидыНапоминаний, ЭтотОбъект.ТекущийПользователь);
	
	// Проверка Исполнитель = ЭтотОбъект.ТекущийПользователь
	Если ЭтотОбъект.ТекущийПользователь <> ЭтотОбъект.Исполнитель Тогда
		ИнициализацияФормыПостороннегоСобытия();
	Иначе 
		Элементы.ГруппаДанныеУчастника.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗадачаИсполнителя) Тогда
		Элементы.Наименование.КнопкаОткрытия	= Истина;
		Элементы.Наименование.Подсказка			= НСтр("ru='Событие создано на основании задачи.
		|Просмотреть ее можно по кнопке ""Открыть"" в поле наименования.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьРеквизита(Форма, ИмяРеквизита = "")
	
	Если ИмяРеквизита = "Исполнитель" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Исполнитель", "Видимость", НЕ ЗначениеЗаполнено(Форма.Исполнитель));
	КонецЕсли;
	
	Если ИмяРеквизита = "НачалоСобытияВремя" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НачалоСобытияВремя", "Видимость", НЕ Форма.ВесьДень);
	КонецЕсли;
	
	Если ИмяРеквизита = "ОкончаниеСобытияВремя" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ОкончаниеСобытияВремя", "Видимость", НЕ Форма.ВесьДень);
	КонецЕсли;
	
	Если ИмяРеквизита = "ПовторПредставление" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ПовторПредставление", "Видимость", Форма.Повторять);
	КонецЕсли;
	
	Если ИмяРеквизита = "ДобавитьНапоминание" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ДобавитьНапоминание", "Видимость", Форма.ДопустимыеВидыНапоминаний.Количество() > 0 И Форма.Напоминания.Количество() < 5);
	КонецЕсли;
	
	Если ИмяРеквизита = "ПредупреждениеНапоминанияОтключены" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ПредупреждениеНапоминанияОтключены", "Видимость", Форма.ДопустимыеВидыНапоминаний.Количество() = 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма, ИмяРеквизитов = "")
	
	Если ПустаяСтрока(ИмяРеквизитов) Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("");
	Иначе 
		МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизитов, ",");
	КонецЕсли;
		
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		УстановитьВидимостьРеквизита(Форма, СокрЛП(ИмяРеквизита));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппаНапоминания(Форма)
	
	КолНапоминаний = Форма.Напоминания.Количество();
	Если КолНапоминаний = 0 Тогда
		ТекстЗаголовка = НСтр("ru='Напоминания: не заданы. Нажмите для добавления.'");
	Иначе
		СтрКолНапоминания = Формат(КолНапоминаний, "ЧГ=");
		Если Найти("2 3 4", Прав(СтрКолНапоминания, 1)) > 0 Тогда
			СтрЕдИзм = НСтр("ru='раза'");
		Иначе 
			СтрЕдИзм = НСтр("ru='раз'");
		КонецЕсли;
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Напоминания: %1 %2'"),
			Формат(КолНапоминаний, "ЧГ="),
			СтрЕдИзм);
	КонецЕсли; 
	
	ПланировщикКлиентСервер.УстановитьЗаголовокГруппы(Форма, "ГруппаНапоминания", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокУчастникиСтатус(Форма)
	
	Ответы = Новый Структура("Да, МожетБыть, Нет, Ожидается", 0, 0, 0, 0);
	
	Для Каждого СтрокаТаблицы Из Форма.Участники Цикл
		Если СтрокаТаблицы.Организатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Ответ = 1 Тогда
			Ответы.Да = Ответы.Да + 1;
		ИначеЕсли СтрокаТаблицы.Ответ = 2 Тогда
			Ответы.МожетБыть = Ответы.МожетБыть + 1;
		ИначеЕсли СтрокаТаблицы.Ответ = 3 Тогда
			Ответы.Нет = Ответы.Нет + 1;
		Иначе
			Ответы.Ожидается = Ответы.Ожидается + 1;
		КонецЕсли;
	КонецЦикла;
	
	Форма.УчастникиСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Да: %1. Может быть: %2. Нет: %3. Ожидается: %4.'"),
		Формат(Ответы.Да, "ЧН=0; ЧГ="),
		Формат(Ответы.МожетБыть, "ЧН=0; ЧГ="),
		Формат(Ответы.Нет, "ЧН=0; ЧГ="),
		Формат(Ответы.Ожидается, "ЧН=0; ЧГ="));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗадачаИсполнителя) Тогда
		ПоказатьЗначение(, ЭтотОбъект.ЗадачаИсполнителя);
	КонецЕсли;
КонецПроцедуры

// Период события

&НаКлиенте
Процедура НачалоСобытияДатаПриИзменении(Элемент)
	Если НачалоСобытия = НачалоДня(НачалоСобытия) Тогда
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		НачалоСобытия = НачалоСобытия + (ДатаСеанса - НачалоДня(ДатаСеанса));
	КонецЕсли;
	
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("НачалоСобытия");
	
	// Заполним список выбора
	ЗаполнитьСписокВыбораВремени("НачалоСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяПриИзменении(Элемент)
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("НачалоСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НачалоСобытия = НачалоСобытия + Направление * 900;
	
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("НачалоСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияДатаПриИзменении(Элемент)
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	
	// Заполним список выбора
	ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяПриИзменении(Элемент)
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОкончаниеСобытия = ОкончаниеСобытия + Направление * 900;
	
	// Округлим выбранное время
	ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	
	// Проверим окончание события
	ПроверитьВыбранныйПериод();
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

// Напоминания

&НаКлиенте
Процедура ВидИнтервалаНапоминанияПриИзменении(Элемент)
	
	СтрИндекс = Сред(Элемент.Имя, 25);
	УстановитьГраницыЗначенийИнтервалаНапоминания(ЭтотОбъект, Элементы["ИнтервалНапоминания_" + СтрИндекс]);
	
КонецПроцедуры

// Участники

&НаКлиенте
Процедура УчастникПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НомерУчастника = Сред(Элемент.Имя, 10);
	НомерСтроки	= Число(НомерУчастника);
	Если НомерСтроки > Участники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	АдресЭП = Участники[НомерСтроки-1].АдресЭлектроннойПочты;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭП) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Адрес электронной почты не соответствует требованиям.'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Получатель", АдресЭП);
		
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru='Подсистема работы с почтовыми сообщениями не установлена.
		|Отправка e-mail невозможна. Обратитесь к администратору.'"), 30); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникВыборПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	УчастникВыборЗначение		= Новый ФиксированнаяСтруктура(ВыбранноеЗначение);
	УчастникВыборПредставление	= ВыбранноеЗначение.Представление;
	
	ДобавитьУчастника(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УчастникВыборПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораДляУчастникаНаСервере(Текст);

	//// Иногда поле может самоочищаться, не дадим это сделать
	//Если СтандартнаяОбработка И НЕ ДанныеВыбора = Неопределено И ДанныеВыбора.Количество() = 0 Тогда
	//	УчастникПредставление = Текст;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникВыборПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат
	КонецЕсли;
		
	Модифицированность = Истина;
	
	ДанныеВыбора = ПолучитьДанныеВыбораДляУчастникаНаСервере(Текст);
	Если ДанныеВыбора.Количество() = 1 Тогда
		
		УчастникВыборЗначение = Новый ФиксированнаяСтруктура(ДанныеВыбора[0].Значение);
		
	ИначеЕсли ДанныеВыбора.Количество() = 0 Тогда
		
		УчастникВыборЗначение		= Неопределено;
		УчастникВыборПредставление	= Текст;

	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	//// Иногда поле может самоочищаться, не дадим это сделать
	//Если СтандартнаяОбработка И ДанныеВыбора.Количество() = 0 Тогда
	//	УчастникПредставление = Текст;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникВыборПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	УчастникВыборЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникВыборПредставлениеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(УчастникВыборЗначение) И ПустаяСтрока(УчастникВыборПредставление) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(УчастникВыборЗначение) Тогда
		ЭтоАдресЭП = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(УчастникВыборПредставление);
		Если НЕ ЭтоАдресЭП Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьУчастника(Неопределено);
	
КонецПроцедуры

// Место события

&НаКлиенте
Процедура МестоСобытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", МестоСобытияВид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей"			, МестоСобытияЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление"			, МестоСобытия);
	
	Оповещение = Новый ОписаниеОповещения("МестоСобытияНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОбщийМодульКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	ОбщийМодульКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте 
Процедура МестоСобытияНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	МестоСобытия				= Результат.Представление;
	МестоСобытияЗначенияПолей	= Результат.КонтактнаяИнформация;
	Модифицированность      	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура МестоСобытияПриИзменении(Элемент)
	
	// Если это очистка, то сбрасываем представление
	Если ПустаяСтрока(МестоСобытия) Тогда
		МестоСобытияЗначенияПолей = "";
	КонецЕсли;
	
	// Разбираем введенное значение
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		ОбщийМодульВызовСервера = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("КонтактнаяИнформацияСлужебныйВызовСервера");
		МестоСобытияЗначенияПолей = ОбщийМодульВызовСервера.ПарсингКонтактнойИнформацииXML(МестоСобытия, МестоСобытияВид);
	КонецЕсли;
	
КонецПроцедуры

// Прочие реквизиты

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	УстановитьРабочееВремя();
	
	ЗаполнитьСписокВыбораВремени("НачалоСобытия");
	ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
	
	УстановитьЦветФонаСобытияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриИзменении(Элемент)
	Если ВесьДень Тогда
		НачалоСобытия		= НачалоДня(НачалоСобытия);
		ОкончаниеСобытия	= КонецДня(ОкончаниеСобытия);
		
		ОкруглитьВыбранноеВремя("НачалоСобытия");
		ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	КонецЕсли;
	
	УстановитьВидимость(ЭтотОбъект, "НачалоСобытияВремя, ОкончаниеСобытияВремя");
КонецПроцедуры

&НаКлиенте
Процедура ПовторятьПриИзменении(Элемент)
	Если НЕ Повторять Тогда
		ПовторПериодичность	= 0;
		ПовторНачало		= Дата(1, 1, 1);
		ПовторОкончание		= Дата(1, 1, 1);
		ПовторИнтервал		= 0;
		ПовторВидОкончания	= 0;
		ПовторПредставление	= "";
	Иначе 
		ПовторПериодичность	= 1;
		ПовторНачало		= НачалоСобытия;
		ПовторОкончание		= ОкончаниеСобытия;
		ПовторИнтервал		= 1;
		ПовторВидОкончания	= 2;
		ПовторПредставление	= "<не задано>";
	КонецЕсли;
	ПовторКоличество = 0;
	
	УстановитьВидимость(ЭтотОбъект, "ПовторПредставление");
КонецПроцедуры

&НаКлиенте
Процедура ПовторПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Повторять Тогда
		ПовторПериодичность	= ?(ПовторПериодичность = 0, 1 , ПовторПериодичность);
		
		Если ПовторПериодичность = 1 ИЛИ ПовторПериодичность >= 5 Тогда
			ПовторИнтервал = ?(ПовторИнтервал = 0, 1, ПовторИнтервал);
		КонецЕсли;
		
		ПовторНачало = ?(ПовторНачало < НачалоСобытияСсылка, НачалоСобытияСсылка, ПовторНачало);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПовторПредставлениеНажатиеЗавершение", ЭтотОбъект);
	
	СтруктураПовтор = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруПовторения();
	ЗаполнитьЗначенияСвойств(СтруктураПовтор, ЭтотОбъект);
	СтруктураПовтор.Вставить("НачалоСобытия"	, НачалоСобытияСсылка);
	СтруктураПовтор.Вставить("ОкончаниеСобытия"	, ОкончаниеСобытияСсылка);
	
	ОткрытьФорму("Справочник.СобытияПланировщика.Форма.НастройкаПовторения",
		Новый Структура("Объект, ТолькоПросмотр",
			СтруктураПовтор,
			(ЭтотОбъект.Исполнитель <> ЭтотОбъект.ТекущийПользователь)),
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте 
Процедура ПовторПредставлениеНажатиеЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, , "НачалоСобытия, ОкончаниеСобытия");
	ЭтотОбъект.НачалоСобытияСсылка		= Результат.НачалоСобытия;
	ЭтотОбъект.ОкончаниеСобытияСсылка	= Результат.ОкончаниеСобытия;
	
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтотОбъект.Ссылка				= Параметры.СобытиеСсылка;
	ЭтотОбъект.ТекущийПользователь	= Пользователи.ТекущийПользователь();
	
	// заполнение из данных заполнения
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	// считывание данных по ссылке
	ДанныеСсылкиВРеквизитыФормыНаСервере();
	
	// Инициализация переменных и базовой настройки внешнего вида формы
	ИнициализацияФормы();

	// Динамические элементы формы
	ОбновитьЭлементыНапоминанийНаСервере();
	ОбновитьЭлементыУчастниковНаСервере();
	
	// Цвет фона события
	УстановитьЦветФонаСобытияНаСервере();
	ДобавитьКомандыПереключенияЦветовНаСервере();
	
	// установка начала и окончание периода экземпляра
	Если Параметры.НачалоЭкземпляра <> Дата(1, 1, 1) Тогда
		НачалоСобытия = Параметры.НачалоЭкземпляра;
	КонецЕсли;
	Если Параметры.КонецЭкземпляра <> Дата(1, 1, 1) Тогда
		ОкончаниеСобытия = Параметры.КонецЭкземпляра;
	КонецЕсли;
	
	УстановитьВидимость(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьРабочееВремя();
	
	ЗаполнитьСписокВыбораВремени("НачалоСобытия");
	ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
	
	УстановитьЗаголовок();
	УстановитьЗаголовокГруппаНапоминания(ЭтотОбъект);
	УстановитьЗаголовокУчастникиСтатус(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПослеЗаписиКалендариПланировщика" И Источник = Календарь Тогда
		УстановитьРабочееВремя();
		
		ЗаполнитьСписокВыбораВремени("НачалоСобытия");
		ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
		
		УстановитьЦветФонаСобытияНаСервере();
	//ИначеЕсли (ИмяСобытия = "ПриОбновленииСобытия" И Параметр = Ссылка)
	//	ИЛИ (ИмяСобытия = "ПриОбновленииСобытийКалендаря" И Параметр = Календарь) Тогда
	//	
	//	// считывание данных
	//	ИнициализацияФормы();
	//	ПриЧтенииНаСервере();
	//	
	//	// настройка формы
	//	НастроитьФорму();
	//	
	//	// перезаполнение списков
	//	ЗаполнитьСписокВыбораВремени("НачалоСобытия");
	//	ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
	//	
	//	// настройка видимости и заголовка
	//	УстановитьВидимость();		
	//	УстановитьЗаголовок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// ВНИМАНИЕ !!!
	// Для управления записью событием применяется параметр формы "ПравилоЗаписи"
	// 0 - событие не записывается (ошибка)
	// 1 - изменить полностью текущее событие
	// 2 - изменить только текущее событие в цепочке (выделить)
	// 3 - изменить все последующие события в цепочке (разделить)
	
	// Если параметры записи определены тогда возврат
	Если ПараметрыЗаписи.Свойство("ПравилоЗаписи") И ПараметрыЗаписи.ПравилоЗаписи <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// если ссылка пустая, то значит происходит запись нового события
	// просто записываем без лишних вопросов
	Если Ссылка.Пустая() Тогда
		Если Повторять Тогда
			ПараметрыЗаписи.Вставить("ПравилоЗаписи", 1);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// если ссылка не пустая необходимо проверить не является ли событие
	// экземпляром другого события и задать вопрос пользователю
	
	// если событие не повторяется, ссылка и есть оригинальное событие
	СсылкаПовторять = ПолучитьПризнакПовторятьНаСервере(ЭтотОбъект.Ссылка);
	Если НЕ СсылкаПовторять Тогда
		Если Повторять Тогда
			ПараметрыЗаписи.Вставить("ПравилоЗаписи", 1);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// теперь необходимо узнать вносятся изменения во все события, в текущее или последующие
	СтруктураДанных = Новый Структура("Ссылка, НачалоСобытия, ОкончаниеСобытия, Статус, Повторять, ПовторИнтервал, ПовторКоличество"
					+ ", ПовторВидОкончания, ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭтотОбъект);
	
	ОписаниеОповещения	= Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
	ПараметрыФормы		= Новый Структура;
	ПараметрыФормы.Вставить("ОкончаниеСобытия"		, ЭтотОбъект.ОкончаниеСобытия);
	ПараметрыФормы.Вставить("ОкончаниеПовторений"	, ПолучитьКонецПериодаПовторенийНаСервере(СтруктураДанных));	
	ОткрытьФорму("Справочник.СобытияПланировщика.Форма.ФормаЗапросаСохранения", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте 
Процедура ПередЗаписьюЗавершение(ПравилоЗаписи, ПараметрыЗаписи) Экспорт 
	Если ПравилоЗаписи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПравилоЗаписи", ПравилоЗаписи);
	
	ВыполнитьЗаписьСобытия(Ложь, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ПослеЗаписиЗакрыть") И ПараметрыЗаписи.ПослеЗаписиЗакрыть Тогда
		ЭтотОбъект.Закрыть(ЭтотОбъект.Ссылка);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеРеквизитовФормыВОбъектНаСервере(ТекущийОбъект);

	Если Повторять И ПараметрыЗаписи.ПравилоЗаписи = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Повторять Тогда // необходимо проверить вариант записи
		Если ПараметрыЗаписи.ПравилоЗаписи = 1 Тогда // Все события
			Если НачалоСобытия <> Параметры.НачалоЭкземпляра Тогда
				ТекущийОбъект.НачалоСобытия = НачалоСобытия;
				Параметры.НачалоЭкземпляра	= НачалоСобытия;
			Иначе 
				ТекущийОбъект.НачалоСобытия = НачалоСобытияСсылка;
			КонецЕсли;
			
			Если ОкончаниеСобытия <> Параметры.КонецЭкземпляра Тогда
				ТекущийОбъект.ОкончаниеСобытия	= ОкончаниеСобытия;
				Параметры.КонецЭкземпляра		= ОкончаниеСобытия;
			Иначе 
				ТекущийОбъект.ОкончаниеСобытия	= ОкончаниеСобытияСсылка;
			КонецЕсли;
		Иначе
			ТекОбъект = Новый Структура;
			ТекОбъект.Вставить("Наименование"				, Наименование);
			ТекОбъект.Вставить("ВесьДень"					, ВесьДень);
			ТекОбъект.Вставить("ЗадачаИсполнителя"			, ЗадачаИсполнителя);
			ТекОбъект.Вставить("Календарь"					, Календарь);
			ТекОбъект.Вставить("МестоСобытия"				, МестоСобытия);
			ТекОбъект.Вставить("НачалоСобытия"				, НачалоСобытия);
			ТекОбъект.Вставить("ОкончаниеСобытия"			, ОкончаниеСобытия);
			ТекОбъект.Вставить("ОригинальноеНачалоСобытия"	, Параметры.НачалоЭкземпляра);
			ТекОбъект.Вставить("ПовторВидОкончания"			, ПовторВидОкончания);
			ТекОбъект.Вставить("ПовторДниПовторения"		, ПовторДниПовторения);
			ТекОбъект.Вставить("ПовторИнтервал"				, ПовторИнтервал);
			ТекОбъект.Вставить("ПовторКоличество"			, ПовторКоличество);
			ТекОбъект.Вставить("ПовторНачало"				, ПовторНачало);
			ТекОбъект.Вставить("ПовторОкончание"			, ПовторОкончание);
			ТекОбъект.Вставить("ПовторПериодичность"		, ПовторПериодичность);
			ТекОбъект.Вставить("ПовторПредставление"		, ПовторПредставление);
			ТекОбъект.Вставить("Повторять"					, Повторять);
			ТекОбъект.Вставить("Содержание"					, Содержание);
			ТекОбъект.Вставить("ЦветФона"					, ЦветФона);
			ТекОбъект.Вставить("Напоминания"				, Напоминания);
			
			Если ПараметрыЗаписи.ПравилоЗаписи = 2 Тогда // Текущее событие
				Экземпляры = Справочники.СобытияПланировщика.ВыделитьСобытие(Ссылка, ТекОбъект);
				
				НоваяСсылка = ?(Экземпляры = Неопределено, Неопределено, Экземпляры.Новое);
			ИначеЕсли ПараметрыЗаписи.ПравилоЗаписи = 3 Тогда // Все последующие
				Экземпляры = Справочники.СобытияПланировщика.РазделитьСобытие(Ссылка, ТекОбъект);
				
				НоваяСсылка = ?(Экземпляры = Неопределено, Неопределено, Экземпляры.Новое);
			КонецЕсли;
			
			Если НоваяСсылка = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ТекущийОбъект = НоваяСсылка.ПолучитьОбъект();
			ТекущийОбъект.ПометкаУдаления = ЭтотОбъект.ПометкаУдаления;
			
			Параметры.НачалоЭкземпляра	= НачалоСобытия;
			Параметры.КонецЭкземпляра	= ОкончаниеСобытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Ссылка <> ТекущийОбъект.Ссылка Тогда
		Ссылка = ТекущийОбъект.Ссылка;
		ДанныеСсылкиВРеквизитыФормыНаСервере();
	Иначе 
		ДанныеНапоминаний = ПланировщикДанные.ПолучитьДанныеНапоминаний(ЭтотОбъект.Ссылка);
		ДанныеНапоминанийВРеквизитыФормыНаСервере(ДанныеНапоминаний);
	КонецЕсли;
	
	Если НЕ (ПараметрыЗаписи.Свойство("ПослеЗаписиЗакрыть") И ПараметрыЗаписи.ПослеЗаписиЗакрыть) Тогда
		ОбновитьЭлементыНапоминанийНаСервере();
		ОбновитьЭлементыУчастниковНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПараметрыЗаписи.Вставить("ПравилоЗаписи", 0);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Исполнитель"		, ЭтотОбъект.ТекущийПользователь);
	ПараметрыОповещения.Вставить("НачалоСобытия"	, ЭтотОбъект.НачалоСобытия);
	ПараметрыОповещения.Вставить("ОкончаниеСобытия"	, ЭтотОбъект.ОкончаниеСобытия);
	ПараметрыОповещения.Вставить("Участники"		, ПолучитьМассивУчастниковНаСервере(ЭтотОбъект.Ссылка));
	
	Оповестить("ПослеЗаписиСобытияПланировщика", ПараметрыОповещения, ЭтотОбъект.Ссылка);
	
	Если ЭтотОбъект.Повторять И Параметры.НачалоЭкземпляра <> Дата(1, 1, 1) Тогда
		ЭтотОбъект.НачалоСобытия = Параметры.НачалоЭкземпляра;
	Иначе 
		ЭтотОбъект.НачалоСобытия = ЭтотОбъект.НачалоСобытияСсылка;	
	КонецЕсли;
	Если ЭтотОбъект.Повторять И Параметры.КонецЭкземпляра <> Дата(1, 1, 1) Тогда
		ЭтотОбъект.ОкончаниеСобытия = Параметры.КонецЭкземпляра;
	Иначе 
		ЭтотОбъект.ОкончаниеСобытия = ЭтотОбъект.ОкончаниеСобытияСсылка;
	КонецЕсли;
	
	УстановитьВидимость(ЭтотОбъект);
	
	УстановитьЗаголовок();
	УстановитьЗаголовокГруппаНапоминания(ЭтотОбъект);
	
	ОбновитьОповещенияВсплывающимОкном();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.Модифицированность Тогда
		Отказ = Истина;
		
		ОбработкаОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработкаОповещения,
			НСтр("ru='Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да,,
			КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПередЗакрытиемЗавершение(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		ЭтотОбъект.Закрыть(ЭтотОбъект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ЗаписатьИЗакрыть(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте 
Процедура ЦветФонаСобытия(Команда)
	
	ИдентификаторКоманды	= Сред(Команда.Имя, 6);
	ИдентификаторЦвета		= Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторКоманды, "_", "-"));
	
	ДанныеЦвета = ПолучитьЦветПоИдентификаторуНаСервере(ИдентификаторЦвета);
	
	ЭтотОбъект.ЦветФона = ДанныеЦвета.Ссылка;
	Элементы.ДекорацияТекущийЦвет.ЦветФона = Новый Цвет(ДанныеЦвета.Красный, ДанныеЦвета.Зеленый, ДанныеЦвета.Синий);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиМестоСобытияВGoogle(Команда)
	Если ПустаяСтрока(МестоСобытия) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Адрес места события не указан.'"), 15);
		Возврат;
	КонецЕсли;
	
	URLСтрокаАдреса = ПолучитьАдресДляПодстановкиВСсылкуНаСервере(МестоСобытияЗначенияПолей, МестоСобытия);
	ЗапуститьПриложение("https://www.google.ru/maps/place/" + URLСтрокаАдреса);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНапоминание(Команда)
	Если Напоминания.Количество() >= 5 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Напоминания.Добавить();
	НоваяСтрока.Вид				= 2;
	НоваяСтрока.Интервал		= 30;
	НоваяСтрока.ВидИнтервала	= 1;
	
	ОбновитьЭлементыНапоминанийНаСервере();
	УстановитьВидимость(ЭтотОбъект, "ДобавитьНапоминание");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНапоминание(Команда)
	НомерНапоминания = Сред(Команда.Имя, 20);
	НомерСтроки	= Число(НомерНапоминания);
	Если НомерСтроки > Напоминания.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Напоминания.Удалить(НомерСтроки - 1);
	
	ОбновитьЭлементыНапоминанийНаСервере();
	УстановитьВидимость(ЭтотОбъект, "ДобавитьНапоминание");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчастника(Команда)
	Если НЕ ТипЗнч(УчастникВыборЗначение) = Тип("ФиксированнаяСтруктура")
		И ПустаяСтрока(УчастникВыборПредставление) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(УчастникВыборЗначение) = Тип("ФиксированнаяСтруктура") Тогда
		ЭтоАдресЭП = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(УчастникВыборПредставление);
		
		СтруктураУчастника = Новый Структура;
		СтруктураУчастника.Вставить("Ссылка"		, Неопределено);
		СтруктураУчастника.Вставить("Адрес"			, ?(ЭтоАдресЭП, УчастникВыборПредставление, ""));
		СтруктураУчастника.Вставить("Представление"	, УчастникВыборПредставление);
		
		УчастникВыборЗначение = Новый ФиксированнаяСтруктура(СтруктураУчастника);
	КонецЕсли;
	
	ДобавитьНайденногоУчастникаВСписок(УчастникВыборЗначение);
	
	УчастникВыборЗначение		= Неопределено;
	УчастникВыборПредставление	= "";
	
	ОбновитьЭлементыУчастниковНаСервере();
	
	УстановитьЗаголовокУчастникиСтатус(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчастника(Команда)
	НомерУчастника = Сред(Команда.Имя, 18);
	НомерСтроки	= Число(НомерУчастника);
	Если НомерСтроки > Участники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Участники.Удалить(НомерСтроки - 1);
	
	ОбновитьЭлементыУчастниковНаСервере();
	
	УстановитьЗаголовокУчастникиСтатус(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура УведомлятьУчастника(Команда)
	НомерУчастника = Сред(Команда.Имя, 21);
	НомерСтроки	= Число(НомерУчастника);
	Если НомерСтроки > Участники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Участники[НомерСтроки-1].Уведомлять = НЕ Участники[НомерСтроки-1].Уведомлять;
	Элементы[Команда.Имя].Картинка = ?(Участники[НомерСтроки-1].Уведомлять, БиблиотекаКартинок.УведомлятьУчастникаСобытия, БиблиотекаКартинок.НеуведомлятьУчастникаСобытия);
КонецПроцедуры

&НаКлиенте 
Процедура ИзменениеОбязательноУчастника(Команда)
	НомерУчастника = Сред(Команда.Имя, 21);
	НомерСтроки	= Число(НомерУчастника);
	Если НомерСтроки > Участники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Участники[НомерСтроки-1].Обязательно = НЕ Участники[НомерСтроки-1].Обязательно;
	Элементы[Команда.Имя].Картинка = ?(Участники[НомерСтроки-1].Обязательно, БиблиотекаКартинок.ОбязательныйУчастникСобытия, БиблиотекаКартинок.НеобязательныйУчастникСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьУчастникаИЗакрыть(Команда)
	Отказ			= Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПослеЗаписиЗакрыть", Истина);
	
	ВыполнитьЗаписьУчастника(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Закрыть(ЭтотОбъект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьУчастника(Команда)
	Отказ			= Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПоЗавершению", Ложь);
	
	ВыполнитьЗаписьУчастника(Отказ, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Отказ			= Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПослеЗаписиЗакрыть", Истина);
	
	ВыполнитьЗаписьСобытия(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Закрыть(ЭтотОбъект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Отказ			= Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПоЗавершению", Ложь);
	
	ВыполнитьЗаписьСобытия(Отказ, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИЗакрыть(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИЗакрытьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Событие будет удалено безвозвратно. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте 
Процедура УдалитьИЗакрытьЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	Если НЕ РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ПометкаУдаления		= Истина;
	ЭтотОбъект.Модифицированность	= Истина;
	
	Отказ			= Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПослеЗаписиЗакрыть", Истина);
	
	ВыполнитьЗаписьСобытия(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Закрыть(ЭтотОбъект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОкруглитьВыбранноеВремя(ИмяРеквизита)
	ЗначениеВремени = НачалоМинуты(ЭтотОбъект[ИмяРеквизита]);
	
	Если ВесьДень Тогда
		ЭтотОбъект[ИмяРеквизита] = НачалоДня(ЗначениеВремени);
	Иначе 
		ЭтотОбъект[ИмяРеквизита] = ПланировщикКлиентСервер.ОкруглитьВыбранноеВремя(ЗначениеВремени);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыбранныйПериод()
	Если ОкончаниеСобытия < НачалоСобытия Тогда
		ОкончаниеСобытия = НачалоСобытия + 3600;
		ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
		ЗаполнитьСписокВыбораВремени("ОкончаниеСобытия");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВремени(ИмяРеквизита)
	СписокЗначений = Элементы[ИмяРеквизита + "Время"].СписокВыбора;
	СписокЗначений.Очистить();
	
	НачалоПериода	= НачалоДня(ЭтотОбъект[ИмяРеквизита]) + НачалоРабочегоВремени;
	КонецПериода	= НачалоДня(ЭтотОбъект[ИмяРеквизита]) + ОкончаниеРабочегоВремени + 1;
	
	ТекущийПериод = НачалоПериода;
	Пока ТекущийПериод < КонецПериода Цикл
		СписокЗначений.Добавить(ТекущийПериод, Формат(ТекущийПериод, "ДФ=HH:mm"));
		
		ТекущийПериод = ТекущийПериод + 900;
	КонецЦикла;
	
	Элементы[ИмяРеквизита + "Время"].СписокВыбора.НайтиПоЗначению(ЭтотОбъект[ИмяРеквизита]);
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьНайденногоУчастникаВСписок(ЗначениеВыбора)
	
	Отказ = Ложь;
	
	СтруктураОтбора = Новый Структура("Участник", ЗначениеВыбора.Ссылка);
	НайденныеСтроки = ЭтотОбъект.Участники.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если НайденныеСтроки[0].Организатор Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 является организатором события.'"),
					ЗначениеВыбора.Представление),,,, Отказ);
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Участник %1 уже добавлен.'"),
					ЗначениеВыбора.Представление),,,, Отказ);
		КонецЕсли;
	ИначеЕсли ЗначениеВыбора.Ссылка = ЭтотОбъект.Исполнитель Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 является организатором события.'"),
				ЗначениеВыбора.Представление),,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ЭтотОбъект.Участники.Добавить();
	НоваяСтрока.Идентификатор			= Новый УникальныйИдентификатор;
	НоваяСтрока.Участник				= ЗначениеВыбора.Ссылка;
	НоваяСтрока.АдресЭлектроннойПочты	= ЗначениеВыбора.Адрес;
	НоваяСтрока.Обязательно				= Истина;
	НоваяСтрока.Уведомлять				= Ложь;
	НоваяСтрока.Представление			= ЗначениеВыбора.Представление;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьРабочееВремя()
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДанныеКалендаря = ПолучитьДанныеРабочегоВремениКалендаря(Исполнитель, Календарь);
		Если ДанныеКалендаря = Неопределено Тогда
			РабочееВремя = Ложь;
		Иначе 
			РабочееВремя = ДанныеКалендаря.РабочееВремя;
		КонецЕсли;
	Иначе 
		РабочееВремя = Ложь;
	КонецЕсли;
	
	Если РабочееВремя Тогда
		НачалоРабочегоВремени		= ДанныеКалендаря.Начало;
		ОкончаниеРабочегоВремени	= ДанныеКалендаря.Конец;
	Иначе 
		НачалоРабочегоВремени		= 0;
		ОкончаниеРабочегоВремени	= 86399;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьОповещенияВсплывающимОкном()
	
	ЭлементСписка = ЭтаФорма.ДопустимыеВидыНапоминаний.НайтиПоЗначению(1);
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульКлиент		= ОбщегоНазначенияКлиентСервер.ОбщийМодуль("НапоминанияПользователяКлиент");
	МассивНапоминаний	= ПолучитьНапоминанияПоСобытию(ТекущийПользователь, Ссылка, НачалоСобытия);
	
	// для обновления кэша
	Для Каждого Структура Из МассивНапоминаний Цикл
		МодульКлиент.ОбновитьЗаписьВКэшеОповещений(Структура);
	КонецЦикла;
	
	МодульКлиент.СброситьТаймерПроверкиТекущихОповещений();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаСобытияНаСервере()
	Если ЭтоСобытиеИсполнителя Тогда
		КалендарьСсылка = ЭтотОбъект.Календарь;
	Иначе 
		КалендарьСсылка = ЭтотОбъект.УчастникКалендарь;
	КонецЕсли;
	
	ЦветФонаКалендаря	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КалендарьСсылка, "ЦветФона");
	Если НЕ ЗначениеЗаполнено(ЦветФонаКалендаря) И НЕ ЭтоСобытиеИсполнителя Тогда
		ЗначениеЦветФона	= Справочники.ЦветоваяГаммаПланировщика.Серый;
	Иначе 
		ЗначениеЦветФона	= ?(ЦветФона.Пустая(), ЦветФонаКалендаря, ЦветФона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеЦветФона) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначениеЦветФона, "ЦветФонаКрасный, ЦветФонаЗеленый, ЦветФонаСиний");
		Элементы.ДекорацияТекущийЦвет.ЦветФона = Новый Цвет(Реквизиты.ЦветФонаКрасный, Реквизиты.ЦветФонаЗеленый, Реквизиты.ЦветФонаСиний);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ДанныеУчастникаВРеквизитыФормыНаСервере()
	
	СтруктураОтбора = Новый Структура("Участник", ЭтотОбъект.ТекущийПользователь);
	
	СтрокиУчастников = ЭтотОбъект.Участники.НайтиСтроки(СтруктураОтбора);
	Если СтрокиУчастников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника = СтрокиУчастников[0];
	
	УчастникИдентификатор	= СтрокаУчастника.Идентификатор;
	УчастникОтвет			= СтрокаУчастника.Ответ;
	УчастникКомментарий 	= СтрокаУчастника.Комментарий;
	УчастникКалендарь		= СтрокаУчастника.Календарь;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеНапоминанийВРеквизитыФормыНаСервере(ДанныеНапоминаний)
	// Напоминания
	ЭтотОбъект.Напоминания.Очистить();
	Для Каждого СтруктураНапоминания Из ДанныеНапоминаний Цикл
		Если СтруктураНапоминания.Пользователь <> ЭтотОбъект.ТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНапоминаний = ЭтотОбъект.Напоминания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНапоминаний, СтруктураНапоминания);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДанныеСсылкиВРеквизитыФормыНаСервере()
	Если НЕ ЭтотОбъект.Ссылка.Пустая() Тогда
		// Основные данные, напоминания и участники
		СтруктураСобытия = ПланировщикДанные.ПолучитьДанныеСобытия(ЭтотОбъект.Ссылка);
		
		// Переименование и добавление реквизитов
		СтруктураСобытия.Вставить("Исполнитель"				, СтруктураСобытия.Владелец);
		СтруктураСобытия.Вставить("НачалоСобытияСсылка"		, СтруктураСобытия.НачалоСобытия);
		СтруктураСобытия.Вставить("ОкончаниеСобытияСсылка"	, СтруктураСобытия.ОкончаниеСобытия);
		
		// Основные параметры
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСобытия, , "Напоминания, Участники");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСобытия.НастройкаПовтора);
		
		// Напоминания
		ДанныеНапоминанийВРеквизитыФормыНаСервере(СтруктураСобытия.Напоминания);

		// Участники
		Участники.Очистить();
		Для Каждого СтруктураУчастника Из СтруктураСобытия.Участники Цикл
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураУчастника);
		КонецЦикла;
	КонецЕсли;
	
	// Проверка исполнителя
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ЭтоСобытиеИсполнителя = (ЭтотОбъект.Исполнитель = ЭтотОбъект.ТекущийПользователь);
	
	// Считывание данных участника
	Если НЕ ЭтоСобытиеИсполнителя Тогда
		ДанныеУчастникаВРеквизитыФормыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДанныеРеквизитовФормыВОбъектНаСервере(ТекущийОбъект)
	
	// Основные реквизиты
	ТекущийОбъект.Владелец = ЭтотОбъект.Исполнитель;
	
	Реквизиты	= "ВесьДень, ЗадачаИсполнителя, Календарь, МестоСобытия, Наименование, НачалоСобытия"
				+ ", ОкончаниеСобытия, ПовторВидОкончания, ПовторДниПовторения, ПовторИнтервал"
				+ ", ПовторКоличество, ПовторНачало, ПовторОкончание, ПовторПериодичность"
				+ ", ПовторПредставление, Повторять, Содержание, Статус, ЦветФона"
				+ ", МестоСобытияЗначенияПолей, ПометкаУдаления";
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, ЭтотОбъект, Реквизиты);
	
	// Напоминания
	ОтборПользователь	= Новый Структура("Пользователь", ЭтотОбъект.ТекущийПользователь);
	МассивСтрокУдалить	= ТекущийОбъект.Напоминания.НайтиСтроки(ОтборПользователь);
	Для Каждого СтрокаУдалить Из МассивСтрокУдалить Цикл
		ТекущийОбъект.Напоминания.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Напоминания Цикл
		НоваяСтрока = ТекущийОбъект.Напоминания.Добавить();
		НоваяСтрока.Пользователь = ЭтотОбъект.ТекущийПользователь;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
		
	// Участники
	ТекущийОбъект.Участники.Очистить();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Участники Цикл
		НоваяСтрока = ТекущийОбъект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьКонецПериодаПовторенийНаСервере(СтруктураДанных)
	
	Возврат ПланировщикДанные.ПолучитьКонецПериодаПовторений(СтруктураДанных);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДопустимыеВидыНапоминанийНаСервере(ДопустимыеВиды, ТекущийПользователь)
	АдресЭП		= ПланировщикДанныеПереопределяемый.ПолучитьАдресЭлектроннойПочтыПользователя(ТекущийПользователь);
	ЭтоАдресЭП	= ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭП);
	МобТелефон	= ПланировщикДанныеПереопределяемый.ПолучитьНомерМобильногоТелефонаПользователя(ТекущийПользователь);
	
	ДопустимыеВиды.Очистить();
	
	Если ПланировщикДанныеВызовСервера.НапоминанияВсплывающимОкном() Тогда
		ДопустимыеВиды.Добавить(1, НСтр("ru='Всплывающее окно'"));
	КонецЕсли;
	Если ПланировщикДанныеВызовСервера.НапоминанияЭлектроннойПочтой() И НЕ ПустаяСтрока(АдресЭП) И ЭтоАдресЭП Тогда
		ДопустимыеВиды.Добавить(2, НСтр("ru='Электронная почта'"));
	КонецЕсли;
	Если ПланировщикДанныеВызовСервера.НапоминанияСообщениемSMS() И НЕ ПустаяСтрока(МобТелефон) Тогда
		ДопустимыеВиды.Добавить(3, НСтр("ru='SMS оповещение'")); 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ДобавитьВидыНапоминанийВСписокВыбораНаСервере(СписокЗначений, ДопустимыеВиды)
	
	СписокЗначений.Очистить();
	Для Каждого ЭлементЗначение Из ДопустимыеВиды Цикл
		СписокЗначений.Добавить(ЭлементЗначение.Значение, ЭлементЗначение.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ДобавитьВидыИнтерваловНапоминанийВСписокВыбораНаСервере(СписокЗначений)
	
	СписокЗначений.Очистить();
	СписокЗначений.Добавить(1, НСтр("ru='мин.'"));
	СписокЗначений.Добавить(2, НСтр("ru='ч.'"));
	СписокЗначений.Добавить(3, НСтр("ru='дн.'")); 
	СписокЗначений.Добавить(4, НСтр("ru='нед.'")); 
	СписокЗначений.Добавить(5, НСтр("ru='мес.'"));
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьЦветПоИдентификаторуНаСервере(ИдентификаторЦвета)
	
	ДанныеЦвета = Новый Структура("Ссылка, Красный, Зеленый, Синий",
		Неопределено, 29, 29, 29);
	
	ЦветСсылка = Справочники.ЦветоваяГаммаПланировщика.ПолучитьСсылку(ИдентификаторЦвета);
	Если ОбщегоНазначения.СсылкаСуществует(ЦветСсылка) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦветСсылка, "ЦветФонаКрасный, ЦветФонаЗеленый, ЦветФонаСиний");
		
		ДанныеЦвета.Ссылка	= ЦветСсылка;
		ДанныеЦвета.Красный	= Реквизиты.ЦветФонаКрасный;
		ДанныеЦвета.Зеленый	= Реквизиты.ЦветФонаЗеленый;
		ДанныеЦвета.Синий	= Реквизиты.ЦветФонаСиний;
	КонецЕсли;
	
	Возврат ДанныеЦвета; 
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьАдресДляПодстановкиВСсылкуНаСервере(ЗначенияПолей, Адрес)
	АдресДляПодстановки = "";
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация")
		И НЕ ПустаяСтрока(ЗначенияПолей) И Лев(ЗначенияПолей, 1) = "<" Тогда
		
		ОбщийМодульСервер = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Структура = ОбщийМодульСервер.ПредыдущаяСтруктураКонтактнойИнформацииXML(ЗначенияПолей);
		
		Если Структура.Количество() > 0 Тогда
			АдресДляПодстановки = "";
			
			// Основной адрес
			//Если НЕ ПустаяСтрока(Структура.Регион) Тогда
			//	АдресДляПодстановки = АдресДляПодстановки + Структура.Регион + " ";
			//КонецЕсли;
			Если НЕ ПустаяСтрока(Структура.НаселенныйПункт) Тогда
				АдресДляПодстановки = АдресДляПодстановки + Структура.НаселенныйПункт + " ";
			ИначеЕсли НЕ ПустаяСтрока(Структура.Город) Тогда
				АдресДляПодстановки = АдресДляПодстановки + Структура.Город + " ";
			КонецЕсли;
			Если НЕ ПустаяСтрока(Структура.Улица) Тогда
				АдресДляПодстановки = АдресДляПодстановки + Структура.Улица + " ";
			КонецЕсли;
			Если НЕ ПустаяСтрока(Структура.Дом) Тогда
				АдресДляПодстановки = АдресДляПодстановки + Структура.Дом;
				Если НЕ ПустаяСтрока(Структура.Корпус) Тогда
					АдресДляПодстановки = АдресДляПодстановки + "/" + Структура.Корпус;
				КонецЕсли;
			КонецЕсли;
			
			// Если не пустой Страна + основной адрес
			Если НЕ ПустаяСтрока(АдресДляПодстановки) И НЕ ПустаяСтрока(Структура.Страна) Тогда
				АдресДляПодстановки = Структура.Страна + " " + АдресДляПодстановки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(АдресДляПодстановки) Тогда
		АдресДляПодстановки = Адрес;
	КонецЕсли;

	Возврат КодироватьСтроку(АдресДляПодстановки, СпособКодированияСтроки.КодировкаURL);
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьДанныеВыбораДляУчастникаНаСервере(ПодстрокаПоиска)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	
	МассивТипов = Метаданные.ОпределяемыеТипы.УчастникиСобытия.Тип.Типы();
	МассивТипов.Удалить(МассивТипов.Найти(Тип("СправочникСсылка.Пользователи")));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Контакт,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
	|ГДЕ
	|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)";
	
	Для каждого ТипУчастника Из МассивТипов Цикл
			
		УсловиеПолейВводаПоСтроке = "";
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипУчастника);
		СписокПолей = МетаданныеОбъекта.ВводПоСтроке;
		Для Каждого Поле Из СписокПолей Цикл
			Если МетаданныеОбъекта.СтандартныеРеквизиты[Поле.Имя].Тип.Типы()[0] = Тип("Строка") Тогда
				УсловиеПолейВводаПоСтроке = УсловиеПолейВводаПоСтроке + " ИЛИ Таблица." + Поле.Имя + " ПОДОБНО &ВведеннаяСтрока";
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Контакт,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление,
		|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + МетаданныеОбъекта.Имя + " КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + МетаданныеОбъекта.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
		|ГДЕ
		|	(ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока 
		|" + УсловиеПолейВводаПоСтроке + ") 
		|";
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", ПодстрокаПоиска + "%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Ссылка"		, Выборка.Контакт);
		ЗначениеВыбора.Вставить("Адрес"			, Выборка.АдресЭП);
		ЗначениеВыбора.Вставить("Представление"	, Выборка.Представление);
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.Представление, Выборка.АдресЭП, ""));
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьДанныеРабочегоВремениКалендаря(ИсполнительСсылка, КалендарьСсылка)
	Если НЕ ЗначениеЗаполнено(КалендарьСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("РабочееВремя, Начало, Конец");
	СтруктураДанных.РабочееВремя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КалендарьСсылка, "ИспользоватьРабочееВремя");
	Если СтруктураДанных.РабочееВремя Тогда
		МассивКалендарей = Новый Массив;
		МассивКалендарей.Добавить(КалендарьСсылка);
		
		РабочееВремяНачало	= 0;
		РабочееВремяКонец	= 24;
		ПланировщикДанные.ПолучитьРабочееВремя(ИсполнительСсылка, МассивКалендарей, РабочееВремяНачало, РабочееВремяКонец);
		
		СтруктураДанных.Начало	= РабочееВремяНачало * 3600;
		СтруктураДанных.Конец	= РабочееВремяКонец * 3600 - ?(РабочееВремяКонец = 24, 1, 0);
	Иначе 
		СтруктураДанных.Начало		= 0;
		СтруктураДанных.Конец	= 86399;
	КонецЕсли;
	
	Возврат СтруктураДанных
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивУчастниковНаСервере(СобытиеСсылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СобытиеСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчастникиСобытийПланировщика.Участник
	|ИЗ
	|	РегистрСведений.УчастникиСобытийПланировщика КАК УчастникиСобытийПланировщика
	|ГДЕ
	|	УчастникиСобытийПланировщика.Событие = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Участник");
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьПризнакПовторятьНаСервере(СобытиеСсылка)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеСсылка, "Повторять");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНапоминанияПоСобытию(ПользовательСсылка, СобытиеСсылка, НачалоСобытия)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания,
	|	НапоминанияПользователя.Описание,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника,
	|	НапоминанияПользователя.Расписание,
	|	НапоминанияПользователя.ПредставлениеИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.ВремяСобытия = &ВремяСобытия
	|	И НапоминанияПользователя.Источник = &Источник";
	Запрос.УстановитьПараметр("Пользователь", ПользовательСсылка);
	Запрос.УстановитьПараметр("Источник", СобытиеСсылка);
	Запрос.УстановитьПараметр("ВремяСобытия", НачалоСобытия);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьГраницыЗначенийИнтервалаНапоминания(Форма, ЭлементФормы)
	
	СтрИндекс = Сред(ЭлементФормы.Имя, 21);
	ИндексСтроки = Число(СтрИндекс);
	Если ИндексСтроки > Форма.Напоминания.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНапоминания = Форма.Напоминания[ИндексСтроки - 1];
	Если СтрокаНапоминания.ВидИнтервала = 5 Тогда
		Максимум = 3;
	ИначеЕсли СтрокаНапоминания.ВидИнтервала = 4 Тогда
		Максимум = 8;
	ИначеЕсли СтрокаНапоминания.ВидИнтервала = 3 Тогда
		Максимум = 28;
	ИначеЕсли СтрокаНапоминания.ВидИнтервала = 2 Тогда
		Максимум = 23;
	Иначе
		Максимум = 59;
	КонецЕсли;
	
	СтрокаНапоминания.Интервал = ?(СтрокаНапоминания.Интервал = 0, 1, Мин(СтрокаНапоминания.Интервал, Максимум));
	
	ЭлементФормы.МинимальноеЗначение	= 1;
	ЭлементФормы.МаксимальноеЗначение	= Максимум;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСозданияЗаписиСобытия

&НаКлиенте 
Процедура ВыполнитьЗаписьУчастника(Отказ, ПараметрыЗаписи)
	Если НЕ ЭтотОбъект.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	НеВыполнятьЗапись = Ложь;
	
	// Участники
	СтрокиУчастников = ЭтотОбъект.Участники.НайтиСтроки(Новый Структура("Идентификатор", УчастникИдентификатор));
	Если СтрокиУчастников.Количество() > 0 Тогда
		СтрокаУчастника = СтрокиУчастников[0];
		
		СтрокаУчастника.Идентификатор	= УчастникИдентификатор;
		СтрокаУчастника.Ответ			= УчастникОтвет;
		СтрокаУчастника.Комментарий		= УчастникКомментарий;
		СтрокаУчастника.Календарь		= УчастникКалендарь;
	Иначе 
		НеВыполнятьЗапись = Истина;
	КонецЕсли;
	
	ВыполнитьЗаписьДанныхУчастникаНаСервере(Отказ, ПараметрыЗаписи);
	
	Если НЕ Отказ Тогда
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьЗаписьДанныхУчастникаНаСервере(Отказ, ПараметрыЗаписи)
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	РегистрыСведений.НапоминанияСобытийПланировщика.ВыполнитьЗапись(Отказ, ЭтотОбъект.Ссылка, ЭтотОбъект.ТекущийПользователь, ЭтотОбъект.Напоминания.Выгрузить());
	РегистрыСведений.УчастникиСобытийПланировщика.ВыполнитьЗапись(Отказ, ЭтотОбъект.Ссылка, ЭтотОбъект.Участники.Выгрузить());
	РегистрыСведений.ГраницыСобытийПланировщика.ВыполнитьПроверкуГраницСобытия(ЭтотОбъект.Ссылка);
	
	Справочники.СобытияПланировщика.ВыполнитьОбновлениеДанныхОповещения(ЭтотОбъект.Ссылка, Истина);
	
	Если Отказ Тогда
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьСобытия(Отказ, ПараметрыЗаписи)
	Если НЕ ЭтотОбъект.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	// эмуляция стандартных событий
	ПередЗаписью(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьСобытияНаСервере(Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// эмуляция стандартных событий
	ПослеЗаписи(ПараметрыЗаписи);
	
	ЭтотОбъект.Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьСобытияНаСервере(Отказ, ПараметрыЗаписи)
	
	НачатьТранзакцию();
	
	Если Ссылка.Пустая() Тогда
		СсылкаОбъект = Справочники.СобытияПланировщика.СоздатьЭлемент();
	Иначе 
		СсылкаОбъект = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	// эмуляция стандартных событий
	ПередЗаписьюНаСервере(Отказ, СсылкаОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Попытка
		СсылкаОбъект.Записать();
	Исключение
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// эмуляция стандартных событий
	ПриЗаписиНаСервере(Отказ, СсылкаОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	// эмуляция стандартных событий
	ПослеЗаписиНаСервере(СсылкаОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
