Перем Участники Экспорт; // все участники события независимо от пользователя
Перем Напоминания Экспорт; // все напоминания по событию независимо от пользователя

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПоОбъектуОснованию(Основание) Экспорт
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Ссылка, Наименование, ДатаНачала, СрокИсполнения, Описание");
		
		ЭтотОбъект.Наименование = Реквизиты.Наименование;
		ЭтотОбъект.Содержание	= Реквизиты.Описание;
		
		ЭтотОбъект.ОкончаниеСобытия		= Реквизиты.СрокИсполнения;
		ЭтотОбъект.НачалоСобытия		= ?(Реквизиты.ДатаНачала <> Дата(1, 1, 1), Реквизиты.ДатаНачала, ЭтотОбъект.ОкончаниеСобытия - 3600);
		ЭтотОбъект.ЗадачаИсполнителя	= Реквизиты.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуреСобытия(СтруктураСобытия) Экспорт
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСобытия.НастройкаПовтора);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСобытия, , "Напоминания, Участники");
	
	// Проверим заполнение кода
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Код) Тогда
		ЭтотОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	// Напоминания
	Для Каждого СтруктураНапоминания Из СтруктураСобытия.Напоминания Цикл
		СтрокаНапоминания = ЭтотОбъект.Напоминания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНапоминания, СтруктураНапоминания);
	КонецЦикла;
	
	// Участники
	Для Каждого СтруктураУчастники Из СтруктураСобытия.Участники Цикл
		СтрокаУчастники = ЭтотОбъект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастники, СтруктураУчастники);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЗаполнениеПередЗаписью() Экспорт
	// ПовторПредставление
	Если ЭтотОбъект.Повторять И ПустаяСтрока(ЭтотОбъект.ПовторПредставление) Тогда
		СтруктураПовторения = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруПовторения();
		ЗаполнитьЗначенияСвойств(СтруктураПовторения, ЭтотОбъект);
		ЭтотОбъект.ПовторПредставление = ПланировщикДанныеКлиентСервер.ПолучитьПредставлениеПовторения(СтруктураПовторения);
	КонецЕсли;
	
	// Статус
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Статус) Тогда
		ЭтотОбъект.Статус = Перечисления.СтатусыСобытийПланировщика.Подтверждено;
	КонецЕсли;
	
	// Статус, ПометкаУдаления
	СтатусИзменился		= СтатусИзменился();
	ПометкаИзменилась	= ПометкаУдаленияИзменилась();
	Если СтатусИзменился Тогда
		ЭтотОбъект.ПометкаУдаления = (ЭтотОбъект.Статус = Перечисления.СтатусыСобытийПланировщика.Отменено);
	ИначеЕсли ПометкаИзменилась Тогда
		ЭтотОбъект.Статус = ?(ЭтотОбъект.ПометкаУдаления, Перечисления.СтатусыСобытийПланировщика.Отменено, Перечисления.СтатусыСобытийПланировщика.Подтверждено);
	КонецЕсли;
	
	// Период события
	Если ПовторНачало < НачалоСобытия Тогда
		ПовторНачало = НачалоСобытия;
	КонецЕсли;
	
	ОкруглитьВыбранноеВремя("НачалоСобытия");
	ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	
	// Настройка повторения
	ПроверитьНастройкуПовторения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаписи

Процедура ЗаписатьУчастниковСобытийПланировщика(Отказ)
	МассивСтрок = Участники.НайтиСтроки(Новый Структура("Участник", ЭтотОбъект.Владелец));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаОрганизатор = Участники.Добавить();
		СтрокаОрганизатор.Участник		= ЭтотОбъект.Владелец;
		СтрокаОрганизатор.Идентификатор	= Новый УникальныйИдентификатор;
		СтрокаОрганизатор.Представление	= Строка(ЭтотОбъект.Владелец);
	Иначе 
		СтрокаОрганизатор = МассивСтрок[0];
	КонецЕсли;
	СтрокаОрганизатор.ВидУчастника	= Перечисления.ВидыУчастниковСобытийПланировщика.Организатор;
	СтрокаОрганизатор.Организатор	= Истина;
	
	РегистрыСведений.УчастникиСобытийПланировщика.ВыполнитьЗапись(Отказ, ЭтотОбъект.Ссылка, Участники);
КонецПроцедуры

Процедура ЗаписатьНапоминанияСобытийПланировщика(Отказ)
	
	РегистрыСведений.НапоминанияСобытийПланировщика.ВыполнитьЗапись(Отказ, ЭтотОбъект.Ссылка, Неопределено, Напоминания);
	
КонецПроцедуры

Процедура ЗаписатьГраницыСобытияПланировщика(Отказ)
	
	СдвигНапоминанийНачало	= 0;
	СдвигНапоминанийКонец	= 3 * ПланировщикКлиентСервер.МесяцВСекундах(31);
	ЕстьНапоминания			= (ЭтотОбъект.Напоминания.Количество() > 0);
	Для Каждого СтрокаНапоминания Из ЭтотОбъект.Напоминания Цикл
		СдвигНапоминанийНачало	= Макс(СдвигНапоминанийНачало, СтрокаНапоминания.ИнтервалСекунды);
		СдвигНапоминанийКонец	= Мин(СдвигНапоминанийКонец, СтрокаНапоминания.ИнтервалСекунды);
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ГраницыСобытийПланировщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если НЕ ЭтотОбъект.Статус = Перечисления.СтатусыСобытийПланировщика.Отменено Тогда
		Если НЕ ЭтотОбъект.Повторять Тогда
			НачалоПовторений	= НачалоДня(ЭтотОбъект.НачалоСобытия);
			ОкончаниеПовторений	= НачалоДня(ЭтотОбъект.ОкончаниеСобытия);
		Иначе 
			НачалоПовторений	= ЭтотОбъект.ПовторНачало;
			ОкончаниеПовторений = ПланировщикДанные.РассчитатьКонецПериодаПовторений(ЭтотОбъект.Ссылка);
		КонецЕсли;
		СдвигСНачалаДня = ЭтотОбъект.НачалоСобытия - НачалоДня(ЭтотОбъект.НачалоСобытия);
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Событие				= ЭтотОбъект.Ссылка;
		ЗаписьРегистра.НачалоПовторений		= НачалоПовторений;
		ЗаписьРегистра.ОкончаниеПовторений	= ОкончаниеПовторений;
		ЗаписьРегистра.НачалоНапоминаний	= ?(НЕ ЕстьНапоминания, Дата(1, 1, 1), НачалоПовторений + СдвигСНачалаДня - СдвигНапоминанийНачало);
		ЗаписьРегистра.ОкончаниеНапоминаний	= ?(НЕ ЕстьНапоминания, Дата(1, 1, 1), ОкончаниеПовторений + СдвигСНачалаДня - СдвигНапоминанийКонец);
	КонецЕсли;
	
	НаборЗаписей.Записать();
			
КонецПроцедуры

Процедура ЗаписатьСтатусПодчиненныхСобытий(Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Статус", ЭтотОбъект.Статус);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытияПланировщика.Ссылка
	|ИЗ
	|	Справочник.СобытияПланировщика КАК СобытияПланировщика
	|ГДЕ
	|	СобытияПланировщика.ОригинальноеСобытие = &Ссылка
	|	И СобытияПланировщика.Статус <> &Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Попытка
		// Блокируем данные для записи
		Блокировка = Новый БлокировкаДанных;
		
		Элемент = Блокировка.Добавить("Справочник.СобытияПланировщика");
		Элемент.Режим = РежимБлокировкиДанных.Исключительный;
		Элемент.ИсточникДанных = РезультатЗапроса;
		Элемент.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		Блокировка.Заблокировать();
		
		// Считываем записи и заполняем их вновь
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементОбъект.Статус = ЭтотОбъект.Статус;
			ЭлементОбъект.Записать();
		КонецЦикла;  
	Исключение
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеПередЗаписью();
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("СтатусИзменился", СтатусИзменился());
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьУчастниковСобытийПланировщика(Отказ);
	ЗаписатьНапоминанияСобытийПланировщика(Отказ);
	ЗаписатьГраницыСобытияПланировщика(Отказ);
	
	ИзменитьСтатусПодчиненных = Ложь;
	Результат = ЭтотОбъект.ДополнительныеСвойства.Свойство("СтатусИзменился", ИзменитьСтатусПодчиненных);
	Если Результат И ИзменитьСтатусПодчиненных Тогда
		ЗаписатьСтатусПодчиненныхСобытий(Отказ);
	КонецЕсли;
	
	Справочники.СобытияПланировщика.ВыполнитьОбновлениеДанныхОповещения(ЭтотОбъект.Ссылка, Истина);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено
		И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		ЗаполнитьПоОбъектуОснованию(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьПоСтруктуреСобытия(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Статус) Тогда
		ЭтотОбъект.Статус = Перечисления.СтатусыСобытийПланировщика.Подтверждено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Владелец) Тогда
		ЭтотОбъект.Владелец = Пользователи.ТекущийПользователь();
	КонецЕсли;
 	
	Если ЭтотОбъект.НачалоСобытия = Дата(1, 1, 1) Тогда
		ЭтотОбъект.НачалоСобытия = ТекущаяДатаСеанса();
	КонецЕсли;	
    ОкруглитьВыбранноеВремя("НачалоСобытия");
	
	Если ЭтотОбъект.ОкончаниеСобытия = Дата(1, 1, 1) Тогда
		ЭтотОбъект.ОкончаниеСобытия = ЭтотОбъект.НачалоСобытия + 3600;
	КонецЕсли;
	ОкруглитьВыбранноеВремя("ОкончаниеСобытия");
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Календарь) Тогда
		ЭтотОбъект.Календарь = ПланировщикДанные.ПолучитьОсновнойКалендарьПользователя(ЭтотОбъект.Владелец);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОкруглитьВыбранноеВремя(ИмяРеквизита)
	ЗначениеВремени = НачалоМинуты(ЭтотОбъект[ИмяРеквизита]);
	
	Если ЭтотОбъект.ВесьДень Тогда
		ЭтотОбъект[ИмяРеквизита] = ?(ИмяРеквизита = "НачалоСобытия", НачалоДня(ЗначениеВремени), КонецДня(ЗначениеВремени));
	Иначе 
		ЭтотОбъект[ИмяРеквизита] = ПланировщикКлиентСервер.ОкруглитьВыбранноеВремя(ЗначениеВремени);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНастройкуПовторения()
	Если ПовторПериодичность = 6 И НЕ ЗначениеЗаполнено(ПовторДниПовторения) Тогда
		ПовторДниПовторения = "1";
	КонецЕсли;
	
	//ПовторДниПовторения = СтрЗаменить(ПовторДниПовторения, "  ", " ");
	ПовторДниПовторения = СтрЗаменить(ПовторДниПовторения, " ", "");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПовторДниПовторения);
	
	Количество = МассивПодстрок.Количество();
	Есть_1 = НЕ (МассивПодстрок.Найти("1") = Неопределено);
	Есть_2 = НЕ (МассивПодстрок.Найти("2") = Неопределено);
	Есть_3 = НЕ (МассивПодстрок.Найти("3") = Неопределено);
	Есть_4 = НЕ (МассивПодстрок.Найти("4") = Неопределено);
	Есть_5 = НЕ (МассивПодстрок.Найти("5") = Неопределено);
	Есть_6 = НЕ (МассивПодстрок.Найти("6") = Неопределено);
	Есть_7 = НЕ (МассивПодстрок.Найти("7") = Неопределено);
	
	Если Количество = 5 И Есть_1 И Есть_2 И Есть_3 И Есть_4 И Есть_5 Тогда
		ПовторПериодичность = 2;
		ПовторДниПовторения = "";
	ИначеЕсли Количество = 3 И Есть_1 И Есть_3 И Есть_5 Тогда
		ПовторПериодичность = 3;
		ПовторДниПовторения	= "";
	ИначеЕсли Количество = 2 И Есть_2 И Есть_4 Тогда
		ПовторПериодичность = 4;
		ПовторДниПовторения = "";
	КонецЕсли;
КонецПроцедуры

Функция СтатусИзменился()
	СтатусСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "Статус");
	Возврат СтатусСсылка <> ЭтотОбъект.Статус;
КонецФункции

Функция ПометкаУдаленияИзменилась()
	ПометкаУдаленияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "ПометкаУдаления");
	Возврат ПометкаУдаленияСсылка <> ЭтотОбъект.ПометкаУдаления;
КонецФункции

#КонецОбласти

#Область ИнициализацияМодуля

Процедура ИнициализацияМодуля()
	
	// Участники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СобытиеПланировщика", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчастникиСобытийПланировщика.*
	|ИЗ
	|	РегистрСведений.УчастникиСобытийПланировщика КАК УчастникиСобытийПланировщика
	|ГДЕ
	|	УчастникиСобытийПланировщика.Событие = &СобытиеПланировщика
	|	И УчастникиСобытийПланировщика.Организатор = Ложь";
	Участники = Запрос.Выполнить().Выгрузить();

	Участники.Колонки.Удалить("Событие");

	Участники.Индексы.Добавить("Идентификатор");
	Участники.Индексы.Добавить("ВидУчастника, Участник");
	Участники.Индексы.Добавить("Участник");
	
	// Напоминания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СобытиеПланировщика"	, ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НапоминанияСобытийПланировщика.*
	|ИЗ
	|	РегистрСведений.НапоминанияСобытийПланировщика КАК НапоминанияСобытийПланировщика
	|ГДЕ
	|	НапоминанияСобытийПланировщика.Событие = &СобытиеПланировщика";
	Напоминания = Запрос.Выполнить().Выгрузить();

	Напоминания.Колонки.Удалить("Событие");

	Напоминания.Индексы.Добавить("Пользователь, Идентификатор");
	
КонецПроцедуры

ИнициализацияМодуля();

#КонецОбласти
