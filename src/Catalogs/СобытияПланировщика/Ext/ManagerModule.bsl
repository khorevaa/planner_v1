#Область ПрограммныйИнтерфейс

// Выполняет создание события по переданной структуре
//
// Параметры:
//	СтруктураСобытия - Тип: Структура. см. ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруСобытия
//
// Возвращаемое значение:
//	СправочникСсылка.СобытияПланировщика, Неопределено
//
Функция СоздатьСобытие(СтруктураСобытия) Экспорт
	
	ПараметрыСобытия = ПланировщикДанныеКлиентСервер.ПолучитьПараметрыСобытияПриЗаписи();
	ПараметрыСобытия.Новое = Истина;
	
	СобытиеОбъект = Справочники.СобытияПланировщика.СоздатьЭлемент();
	СобытиеОбъект.Заполнить(СтруктураСобытия);
	
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", СтруктураСобытия);
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ПараметрыСобытия", ПараметрыСобытия);
	
	Попытка
		СобытиеОбъект.Записать();
		Результат = Истина;
	Исключение
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Результат = Ложь;
	КонецПопытки;
	
	Возврат ?(Результат, СобытиеОбъект.Ссылка, Неопределено);
	
КонецФункции

// Выполняет создание события по переданной структуре
//
// Параметры:
//	ОбъектОснование - Тип: ЛюбаяСсылка, Структура.
//		Типы: см. Справочник.СобытияПланировщика.ВводитсяНаОсновании
//	ДополнительныеСвойства - Тип: Структура. Ключи согласно именам реквизитов справочника.
//
// Возвращаемое значение:
//	СправочникСсылка.СобытияПланировщика, Неопределено
//
Функция СоздатьСобытиеНаОсновании(ОбъектОснование, ДополнительныеСвойства) Экспорт
	
	ПараметрыСобытия = ПланировщикДанныеКлиентСервер.ПолучитьПараметрыСобытияПриЗаписи();
	ПараметрыСобытия.Новое = Истина;
	
	СобытиеОбъект = Справочники.СобытияПланировщика.СоздатьЭлемент();
	СобытиеОбъект.Заполнить(ОбъектОснование);
	
	ЗаполнитьЗначенияСвойств(СобытиеОбъект, ДополнительныеСвойства);
	
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ОбъектОснование", ОбъектОснование);
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДополнительныеСвойства);
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ПараметрыСобытия", ПараметрыСобытия);
	
	Попытка
		СобытиеОбъект.Записать();
		Результат = Истина;
	Исключение
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Результат = Ложь;
	КонецПопытки;
	
	Возврат ?(Результат, СобытиеОбъект.Ссылка, Неопределено);
	
КонецФункции

// Создает из цепочки событий новое событие с указанными изменениями
//
// Параметры
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//	ДополнительныеПараметры - Тип: Структура. Параметры и реквизиты для заполнения новых элементов
//		Обязательные ключи:
//			- НачалоСобытия - Тип: Дата. Дата начала выделяемого события
//			- ОкончаниеСобытия - Тип: Дата. Дата окончания выделяемого события
//			- ОригинальноеНачалоСобытия - Тип: Дата. Дата оригинального события
//
// Возвращаемое значение
//	Структура
//		- Старое - Тип: СправочникСсылка.СобытияПланировщика. Старое событие.
//		- Новое - Тип: СправочникСсылка.СобытияПланировщика. Новый экземпляр выделенного события.
//
Функция ВыделитьСобытие(СобытиеСсылка, ДополнительныеПараметры) Экспорт
	НачалоСобытия		= ДополнительныеПараметры.НачалоСобытия;
	ОкончаниеСобытия	= ДополнительныеПараметры.ОкончаниеСобытия;
	
	ПовторОкончание		= КонецДня(ОкончаниеСобытия) + 1;
	
	СписокКолонок		= "Ссылка, НачалоСобытия, ОкончаниеСобытия, ПовторВидОкончания, ПовторКоличество, ПовторОкончание";
	РеквизитыСобытия	= ПланировщикДанные.ПолучитьСтруктуруРеквизитовСобытия(СобытиеСсылка, СписокКолонок);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Создадим экземпляр текущего события
		Параметры = Новый Структура;
		Для Каждого КлючИЗначение Из ДополнительныеПараметры Цикл
			Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		Параметры.Вставить("Повторять"					, Ложь);
		Параметры.Вставить("ПовторВидОкончания"			, 0);
		Параметры.Вставить("ПовторДниПовторения"		, "");
		Параметры.Вставить("ПовторИнтервал"				, 0);
		Параметры.Вставить("ПовторКоличество"			, 0);
		Параметры.Вставить("ПовторНачало"				, Дата(1, 1, 1));
		Параметры.Вставить("ПовторОкончание"			, Дата(1, 1, 1));
		Параметры.Вставить("ПовторПериодичность"		, 0);
		Параметры.Вставить("ПовторПредставление"		, "");
		Параметры.Вставить("ОригинальноеСобытие"		, РеквизитыСобытия.Ссылка);
		
		ВыделенноеСобытие = СоздатьКопиюСобытия(РеквизитыСобытия.Ссылка, Параметры);
		
		ЗафиксироватьТранзакцию();
		
		Структура = Новый Структура("Старое, Новое", РеквизитыСобытия.Ссылка, ВыделенноеСобытие);
		
	Исключение
		
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ОтменитьТранзакцию();
		
		Структура = Неопределено;
		
	КонецПопытки;
	
	Возврат Структура;
КонецФункции

// Разделяет цепочку событий на две части до и после указанной даты
//
// Параметры
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//	ДополнительныеПараметры - Тип: Структура. Параметры и реквизиты для заполнения новых элементов
//		Обязательные ключи:
//			- НачалоСобытия - Тип: Дата. Дата начала выделяемого события
//			- ОкончаниеСобытия - Тип: Дата. Дата окончания выделяемого события
//			- НомерПовтора - Тип: Дата. Номер повтора выделяемого события
//
// Возвращаемое значение
//	Структура
//		- Старое - Тип: СправочникСсылка.СобытияПланировщика. Старое событие.
//		- Новое - Тип: СправочникСсылка.СобытияПланировщика. Новое событие - наследний старого.
//
Функция РазделитьСобытие(СобытиеСсылка, ДополнительныеПараметры) Экспорт
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеСсылка, "Ссылка, НачалоСобытия, ОкончаниеСобытия, Повторять, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания, ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения");
	
	НачалоСобытия		= ДополнительныеПараметры.НачалоСобытия;
	ОкончаниеСобытия	= ДополнительныеПараметры.ОкончаниеСобытия;
	НомерПовтора		= ПланировщикДанные.ПолучитьНомерПовтораСобытия(Реквизиты, НачалоСобытия, ОкончаниеСобытия);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Создадим экземпляр последующих событий
		ВремяНачало	= НачалоСобытия - НачалоДня(НачалоСобытия);
		ВремяКонец	= ОкончаниеСобытия - НачалоДня(НачалоСобытия);
			                                                                       
		ПериодСледующегоСобытия = ПланировщикДанные.ПолучитьПериодСледующегоСобытия(Реквизиты, НачалоСобытия, ОкончаниеСобытия, НомерПовтора);
		Если ПериодСледующегоСобытия > ПланировщикДанные.ПолучитьКонецПериодаПовторений(СобытиеСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Для Каждого КлючИЗначение Из ДополнительныеПараметры Цикл
			Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		Параметры.Вставить("НачалоСобытия"				, ПериодСледующегоСобытия + ВремяНачало);
		Параметры.Вставить("ОкончаниеСобытия"			, ПериодСледующегоСобытия + ВремяКонец);
		Параметры.Вставить("ПовторНачало"				, НачалоСобытия);
		Параметры.Вставить("ПовторКоличество"			, ?(Реквизиты.ПовторВидОкончания = 1, Реквизиты.ПовторКоличество - НомерПовтора, 0));
		Параметры.Вставить("ПовторПредставление"		, "");
		Параметры.Вставить("ОригинальноеСобытие"		, Справочники.СобытияПланировщика.ПустаяСсылка());
		Параметры.Вставить("ОригинальноеНачалоСобытия"	, Дата(1, 1, 1));
		
		ПоследующееСобытие = СоздатьКопиюСобытия(СобытиеСсылка, Параметры);
		
		// Необходимо внести изменения в указанное событие
		Блокировка = Новый БлокировкаДанных;
		
		Элемент = Блокировка.Добавить("Справочник.СобытияПланировщика");
		Элемент.Режим = РежимБлокировкиДанных.Исключительный;
		Элемент.УстановитьЗначение("Ссылка", СобытиеСсылка);
		
		Блокировка.Заблокировать();
		
		СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
		СобытиеОбъект.ПовторВидОкончания	= 2;
		СобытиеОбъект.ПовторОкончание		= НачалоСобытия;
		СобытиеОбъект.ПовторПредставление	= ПланировщикДанныеКлиентСервер.ПолучитьПредставлениеПовторения(СобытиеОбъект);
		СобытиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Структура = Новый Структура("Старое, Новое", СобытиеОбъект.Ссылка, ПоследующееСобытие);
		
	Исключение
		
		Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ОтменитьТранзакцию();
		
		Структура = Неопределено;
		
	КонецПопытки;
	
	Возврат Структура;		
КонецФункции

// Перемещает событие на новое время, при этом если событие находится в цепочке повторений
// выделяет новый экземпляр события из цепочки
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика, Структура
//	ТекущееНачало - Тип: ДатаВремя
//	НовоеНачало - Тип: ДатаВремя
//	НовоеОкончание - Тип: ДатаВремя
//	НовоеВесьДень - Тип: Булево
//
// Возвращаемое значение:
//	СправочникСсылка.СобытияПланировщика
//
Функция ПереместитьСобытие(знач СобытиеСсылка, знач ТекущееНачало, знач НовоеНачало, знач НовоеОкончание, знач НовоеВесьДень) Экспорт
	
	СписокКолонок		= "Ссылка, Повторять, НачалоСобытия, ОкончаниеСобытия";
	РеквизитыСобытия	= ПланировщикДанные.ПолучитьСтруктуруРеквизитовСобытия(СобытиеСсылка, СписокКолонок);
	
	Если РеквизитыСобытия.Повторять Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("НачалоСобытия"				, НовоеНачало);
		ДопПараметры.Вставить("ОкончаниеСобытия"			, НовоеОкончание);
		ДопПараметры.Вставить("ОригинальноеНачалоСобытия"	, ТекущееНачало);
		ДопПараметры.Вставить("ВесьДень"					, НовоеВесьДень);
		
		СтруктураДанных = ВыделитьСобытие(РеквизитыСобытия, ДопПараметры);
		Если НЕ СтруктураДанных = Неопределено Тогда
			НовоеСобытие = СтруктураДанных.Новое;
		КонецЕсли;
	Иначе 
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(РеквизитыСобытия.Ссылка);
			
			ЭлементОбъект = РеквизитыСобытия.Ссылка.ПолучитьОбъект();
			ЭлементОбъект.НачалоСобытия		= НовоеНачало;
			ЭлементОбъект.ОкончаниеСобытия	= НовоеОкончание;
			ЭлементОбъект.ВесьДень			= НовоеВесьДень;
			ЭлементОбъект.Записать();
			
			НовоеСобытие = СобытиеСсылка;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат НовоеСобытие;
	
КонецФункции

// Выполняет обновление данных по необходимым оповещениям пользователя
//
Функция ВыполнитьОбновлениеДанныхОповещения(знач СобытиеСсылка, ФоновыйРежим = Истина) Экспорт
	
	// ОбновитьЗаписиНапоминанийПоСобытию
	
	П1 = Новый Структура("События", СобытиеСсылка);
	П2 = "";
	Если ФоновыйРежим Тогда
		ПараметрыОбновить = Новый Массив;
		ПараметрыОбновить.Добавить(П1);
		ПараметрыОбновить.Добавить(П2);
		ФоновыеЗадания.Выполнить("ПланировщикДанные.ОбновитьЗаписиНапоминанийПоСобытию", ПараметрыОбновить,, НСтр("ru='Обновление уведомлений по событию'"));  
	Иначе 
		ПланировщикДанные.ОбновитьЗаписиНапоминанийПоСобытию(П1, П2);
	КонецЕсли;
	
	// ОтправитьОповещенияУчастникамСобытия 
	
	П1 = СобытиеСсылка;
	Если ФоновыйРежим Тогда
		ПараметрыОбновить = Новый Массив;
		ПараметрыОбновить.Добавить(П1);
		ФоновыеЗадания.Выполнить("ПланировщикДанные.ОтправитьОповещенияУчастникамСобытия", ПараметрыОбновить,, НСтр("ru='Отправка уведомлений участников по событию'"));  
	Иначе 
		ПланировщикДанные.ОтправитьОповещенияУчастникамСобытия(П1);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийМодуля

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "ФормаСобытия";
		
		Если Параметры.Свойство("Ключ") Тогда
			Параметры.Вставить("СобытиеСсылка", Параметры.Ключ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьКопиюСобытия(СобытиеСсылка, ДополнительныеПараметры)
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСобытия = ПланировщикДанныеКлиентСервер.ПолучитьПараметрыСобытияПриЗаписи();
	ПараметрыСобытия.Копия		= Истина;
	ПараметрыСобытия.Источник	= СобытиеСсылка;
	
	СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
	
	НовыйЭлемент = Справочники.СобытияПланировщика.СоздатьЭлемент();
	НовыйЭлемент.ДополнительныеСвойства.Вставить("ПараметрыСобытия", ПараметрыСобытия);
	
	// Основные свойства
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СобытиеОбъект, , "Код, Родитель, ПометкаУдаления");
	
	// Дополнительные свойства
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДополнительныеПараметры);
	
	// Участники
	Если ДополнительныеПараметры.Свойство("Участники") Тогда
		НовыйЭлемент.Участники.Очистить();
		Для Каждого ЗначениеУчастника Из ДополнительныеПараметры.Участники Цикл
			СтрокаУчастники = НовыйЭлемент.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУчастники, ЗначениеУчастника);
		КонецЦикла;
	КонецЕсли;
	
	// Напоминания
	Если ДополнительныеПараметры.Свойство("Напоминания") Тогда
		НовыйЭлемент.Напоминания.Очистить();
		Для Каждого ЗначениеНапоминания Из ДополнительныеПараметры.Напоминания Цикл
			СтрокаНапоминания = НовыйЭлемент.Напоминания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНапоминания, ЗначениеНапоминания);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
КонецФункции

#КонецОбласти
