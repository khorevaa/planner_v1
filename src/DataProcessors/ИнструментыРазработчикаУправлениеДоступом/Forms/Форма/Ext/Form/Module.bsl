
// Начало ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

Процедура ВидыДоступаНестандартныхОграниченийПрав()
	
	// СтандартныеПодсистемы.Пользователи
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.Пользователи";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.Пользователи";
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.ГруппыПользователей";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";

	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.ВнешниеПользователи";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.ВнешниеПользователи";
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "Справочник.ГруппыВнешнихПользователей";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "РегистрСведений.СоставыГруппПользователей";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = "РегистрСведений.СоставыГруппПользователей";
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Обработчик для описания исключений из стандартов.
// Параметры:
//  ВидОшибки     - Строка - строковые идентификаторы ошибок:
//                  "НеверноеИмяТаблицы" - проверка, что указанное имя таблицы соответствует
//                  имени реальной таблицы, для которой указано ограничение.
//                  "НеверноеИмяПрава" - проверка, что имя проверяемого права указано,
//                  то оно соответствует проверяемому праву для которого указано ограничение.
//                  "НеверноеИмяВидаДоступа" - проверка, что имя вида доступа указано корректно.
//                  "РолиБезОграничений" - проверка ролей ПолныеПрава, АдминистраторСистемы.
//                  "ОграничениеНеПоВсемПолям" - проверка, что ограничение задано для "<Прочие поля>".
//                  "ОграничениеПраваУдаление" - проверка, что не задано ограничения права Удаления.
//                  "ОграниченияВРазныхРоляхНеСовпадают" - проверка, что для той же таблицы с тем же
//                  правом ограничения совпадают в разных ролях.
//                  "ОграничениеДобавленияНеСовпадаетСИзменением",
//                  "ОграничениеИзмененияНеСовпадаетСДобавлением" - проверяется, что в каждой роли
//                  по-отдельности ограничение добавления совпадает с ограничением изменения.
//
//  Строка        - СтрокаТаблицыЗначений с колонками Роль, Право, Таблица, Поля, Ограничение.
//  ЭтоИсключение - Булево (возвращаемое значение) - начальное значение Ложь,
//                  если установить Истина, тогда ошибка не будет добавлена в список.
//
&НаСервере
Процедура ПриОбнаруженииОшибки(ВидОшибки, Строка, ЭтоИсключение)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ВидОшибки      = "ОграничениеНеПоВсемПолям"
	   И Строка.Роль    = "ЧтениеИнформацииОВерсияхОбъектов"
	   И Строка.Таблица = "РегистрСведений.ВерсииОбъектов"
	   И Строка.Право   = "Чтение"
	   И Строка.Поля    = "ВерсияОбъекта" Тогда
		
		ЭтоИсключение = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Обработчик определения ролей для внешних, которые не будут совмещаться
// с ролями для обычных пользователей у одного пользователя ИБ.
// Тексты ограничений в этих ролях для той же таблицы с тем же правом
// могут отличаться.
//
// Параметры:
//  Роли - Массив (возвращаемое значение) - требуется добавить имена ролей.
//
&НаСервере
Процедура РолиТолькоДляВнешнихПользователей(Роли)
	
	// СтандартныеПодсистемы.Пользователи
	Роли.Добавить("ИзменениеТекущегоВнешнегоПользователя");
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Конец  ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОписаниеПрофилейВыполнить(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке());
	ТекстовыйДокумент.Показать("ru = 'Описание начального заполнения имеющихся профилей групп доступа'");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписание(Команда)
	
	НовоеОписание = НовоеОписаниеВидовОграниченийПрав();
	Если НовоеОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(
	"	Описание =
	|	""");
	
	Текст.ДобавитьСтроку(НовоеОписание);
	
	Текст.ДобавитьСтроку(
	"	|"";");
	
	Текст.Показать(НСтр("ru = 'Описание видов ограничений прав объектов метаданных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписаниеРазличий(Команда)
	
	НовоеОписание = НовоеОписаниеВидовОграниченийПрав();
	Если НовоеОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующееОписание = "";
	ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание);
	
	НедостающиеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(НовоеОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(НовоеОписание, НомерСтроки);
		Если Найти(СуществующееОписание, Сред(Строка, 3)) = 0 Тогда
			НедостающиеСтроки = НедостающиеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	ЛишниеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(СуществующееОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = "	|" + СтрПолучитьСтроку(СуществующееОписание, НомерСтроки);
		Если Найти(НовоеОписание, Строка) = 0 Тогда
			ЛишниеСтроки = ЛишниеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Текст = Новый ТекстовыйДокумент;
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Недостающие виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(НедостающиеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Лишние виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(ЛишниеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.Показать(НСтр("ru = 'Недостающие и лишние виды ограничений прав объектов метаданных'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание)
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(СуществующееОписание);
	КонецЦикла;
	
	УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(СуществующееОписание);
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеВидовОграниченийПрав()
	
	Если ВсеОграниченияДоступа.ВысотаТаблицы = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Требуется заполнение табличного
			           |документа ""Все ограничения доступа"".
			           |Инструкции см. выше.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыОграниченийПрав.Очистить();
	
	ВидыДоступаНестандартныхОграниченийПрав();
	
	НайденныеОшибки = ОпределитьВидыОграниченийПравНаСервере();
	Если ЗначениеЗаполнено(НайденныеОшибки) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(НайденныеОшибки);
		ТекстовыйДокумент.Показать(НСтр("ru = 'Ошибки, найденные в текстах ограничений доступа'"));
	КонецЕсли;
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		Если ВРег(Лев(Строка.Таблица, СтрДлина("Справочник."))) = ВРег("Справочник.") Тогда
			Строка.ПорядокКоллекции = 1;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Документ."))) = ВРег("Документ.") Тогда
			Строка.ПорядокКоллекции = 2;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ЖурналДокументов."))) = ВРег("ЖурналДокументов.") Тогда
			Строка.ПорядокКоллекции = 3;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовХарактеристик."))) = ВРег("ПланВидовХарактеристик.") Тогда
			Строка.ПорядокКоллекции = 4;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланСчетов."))) = ВРег("ПланСчетов.") Тогда
			Строка.ПорядокКоллекции = 5;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовРасчета."))) = ВРег("ПланВидовРасчета.") Тогда
			Строка.ПорядокКоллекции = 6;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрСведений."))) = ВРег("РегистрСведений.") Тогда
			Строка.ПорядокКоллекции = 7;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрНакопления."))) = ВРег("РегистрНакопления.") Тогда
			Строка.ПорядокКоллекции = 8;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрБухгалтерии."))) = ВРег("РегистрБухгалтерии.") Тогда
			Строка.ПорядокКоллекции = 9;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрРасчета."))) = ВРег("РегистрРасчета.") Тогда
			Строка.ПорядокКоллекции = 10;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("БизнесПроцесс."))) = ВРег("БизнесПроцесс.") Тогда
			Строка.ПорядокКоллекции = 11;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Задача."))) = ВРег("Задача.") Тогда
			Строка.ПорядокКоллекции = 12;
			
		КонецЕсли;
		
		Если Строка.Право = "Чтение" Тогда
			Строка.ПорядокПрав = 1;
		Иначе
			Строка.ПорядокПрав = 2;
		КонецЕсли;
	КонецЦикла;
	
	ВидыОграниченийПрав.Сортировать("ПорядокКоллекции Возр, Таблица Возр, ПорядокПрав Возр, ВидДоступа Возр, ТаблицаОбъекта Возр");
	
	НовоеОписание = "";
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		
		НовоеОписание = НовоеОписание
			+ "	|"
			+ Строка.Таблица
			+ "." + Строка.Право
			+ "." + Строка.ВидДоступа
			+ ?(ЗначениеЗаполнено(Строка.ТаблицаОбъекта), "." + Строка.ТаблицаОбъекта, "")
			+ Символы.ПС;
		
	КонецЦикла;
	
	Возврат СокрП(НовоеОписание);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|ГДЕ
	|	Профили.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|	И НЕ Профили.ПометкаУдаления
	|	И &ОтборЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профили.Наименование";
	
	Если Метаданные.Справочники.ПрофилиГруппДоступа.Иерархический
	   И Метаданные.Справочники.ПрофилиГруппДоступа.ВидИерархии
	     = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		УсловиеОтбораЭлементов = "(НЕ Профили.ЭтоГруппа)";
	Иначе
		УсловиеОтбораЭлементов = "Истина";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭлементов", УсловиеОтбораЭлементов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Текст = "";
	Пока Выборка.Следующий() Цикл
		Текст = Текст + ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Текст + Символы.ПС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(Профиль)
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	СвойстваПрофиля = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).ПоставляемыеПрофилиГруппДоступа.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	ОписаниеПоставляемогоПрофиля = "";
	Если СвойстваПрофиля <> Неопределено Тогда
		ОписаниеПоставляемогоПрофиля = СвойстваПрофиля.Описание;
	КонецЕсли;
	
	Описание = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОписаниеПоставляемогоПрофиля) Цикл
		Если ЗначениеЗаполнено(Описание) Тогда
			Описание = Описание +
				"
				|		           |";
		КонецЕсли;
		Описание = Описание + СтрПолучитьСтроку(ОписаниеПоставляемогоПрофиля, НомерСтроки);
	КонецЦикла;
	
	Имя = ОбщегоНазначения.ИмяПредопределенного(Профиль);
	
	Если Не ЗначениеЗаполнено(Имя)
	   И СвойстваПрофиля <> Неопределено
	   И ЗначениеЗаполнено(СвойстваПрофиля.Имя) Тогда
		
		Имя = СвойстваПрофиля.Имя;
	КонецЕсли;
	
	Если Профиль.ИдентификаторПоставляемыхДанных
		= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		
		Идентификатор = Строка(Профиль.УникальныйИдентификатор());
	Иначе
		Идентификатор = Строка(Профиль.ИдентификаторПоставляемыхДанных);
	КонецЕсли;
	
	Текст = "
	|	// Профиль """ + Профиль.Наименование + """.
	|	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();" + ?(НЕ ЗначениеЗаполнено(Имя), "", "
	|	ОписаниеПрофиля.Имя           = """ + Имя + """") + ";
	|	ОписаниеПрофиля.Идентификатор = """ + Профиль.УникальныйИдентификатор() + """;
	|	ОписаниеПрофиля.Наименование  = НСтр(""ru = '" + Профиль.Наименование + "'"");
	|	ОписаниеПрофиля.Описание =
	|		НСтр(""ru = '" + Описание + "'"");";
	
	ОписаниеРолей = Новый СписокЗначений;
	Для каждого ОписаниеРоли Из Профиль.Роли Цикл
		ОписаниеРолей.Добавить(ОписаниеРоли.Роль.Имя);
	КонецЦикла;
	ОписаниеРолей.СортироватьПоЗначению();
	
	Для каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Текст = Текст + "
		|	ОписаниеПрофиля.Роли.Добавить(""" + ОписаниеРоли.Значение + """);"
	КонецЦикла;
	
	Для каждого ОписаниеВидаДоступа Из Профиль.ВидыДоступа Цикл
		
		ИмяВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.ВидДоступа).Имя;
		
		Текст = Текст + "
		|	ОписаниеПрофиля.ВидыДоступа.Добавить(""" + ИмяВидаДоступа + """"
			+ ?(ОписаниеВидаДоступа.Предустановленный,
			    ", ""Предустановленный""",
			    ?(ОписаниеВидаДоступа.ВсеРазрешены,
			      ", ""ВначалеВсеРазрешены""", ""))
			+ ");";
		
		Для каждого ОписаниеЗначенияДоступа Из Профиль.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа)) Цикл
			Если НЕ ЗначениеЗаполнено(ОписаниеЗначенияДоступа.ЗначениеДоступа) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеЗначения = ОписаниеЗначенияДоступа.ЗначениеДоступа.Метаданные();
			Если Метаданные.Перечисления.Найти(МетаданныеЗначения.Имя) = МетаданныеЗначения Тогда
				ИмяЗначенияДоступа = ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			Иначе
				ИмяЗначенияДоступа = ОбщегоНазначения.ИмяПредопределенного(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИмяЗначенияДоступа) Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяЗначенияДоступа = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОписаниеЗначенияДоступа.ЗначениеДоступа) + "." + ИмяЗначенияДоступа;
			Текст = Текст + "
			|	ОписаниеПрофиля.ЗначенияДоступа.Добавить(""" + ИмяВидаДоступа + """,
			|		""" + ПолноеИмяЗначенияДоступа + """);"
		КонецЦикла;
	КонецЦикла;
	
	Текст = Текст + "
	|	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	|";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ОпределитьВидыОграниченийПравНаСервере()
	
	НайденныеОшибки = "";
	
	РолиТолькоДляВнешнихПользователей = Новый Массив;
	РолиТолькоДляВнешнихПользователей(РолиТолькоДляВнешнихПользователей);
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Таблица");
	Ограничения.Колонки.Добавить("Роль");
	Ограничения.Колонки.Добавить("ВидРоли");
	Ограничения.Колонки.Добавить("Право");
	Ограничения.Колонки.Добавить("Поля");
	Ограничения.Колонки.Добавить("Ограничение");
	
	Ограничения.Колонки.Добавить("УказаннаяТаблица"); // Таблица, указанная в ограничении.
	Ограничения.Колонки.Добавить("УказанноеПраво");   // Право, указанное в ограничении.
	
	Для НомерСтроки = 2 По ВсеОграниченияДоступа.ВысотаТаблицы Цикл
		
		Таблица     = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C1").Текст;
		Роль        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C2").Текст;
		Право       = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C3").Текст;
		Поля        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C4").Текст;
		Ограничение = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C5").Текст;
		
		// Удаление комментариев.
		Результат = "";
		Для НомерСтрокиОграничения = 1 По СтрЧислоСтрок(Ограничение) Цикл
			Строка = СтрПолучитьСтроку(Ограничение, НомерСтрокиОграничения);
			ПозицияКомментария = Найти(Строка, "//");
			Если ПозицияКомментария > 0 Тогда
				Строка = Сред(Строка, 1, ПозицияКомментария - 1);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Результат) Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			Результат = Результат + Строка;
		КонецЦикла;
		Ограничение = Результат;
		
		Если ВРег(Роль) = ВРег("ПолныеПрава")
		 Или ВРег(Роль) = ВРег("АдминистраторСистемы") Тогда
			
			Если ЗначениеЗаполнено(Ограничение) Тогда
				Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение");
				Свойства.Таблица     = Таблица;
				Свойства.Роль        = Роль;
				Свойства.Право       = Право;
				Свойства.Поля        = Поля;
				Свойства.Ограничение = Ограничение;
				
				ДобавитьОшибку("РолиБезОграничений", Свойства, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для роли %1 не должно быть ограничений на уровне записей, однако обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5'"),
						Роль, Поля, Право, Таблица, Ограничение));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ограничения.Добавить();
		НоваяСтрока.Таблица     = Таблица;
		НоваяСтрока.Роль        = Роль;
		НоваяСтрока.ВидРоли     = РолиТолькоДляВнешнихПользователей.Найти(Роль) <> Неопределено;
		НоваяСтрока.Право       = Право;
		НоваяСтрока.Поля        = Поля;
		НоваяСтрока.Ограничение = Ограничение;
		
		Если ВРег(Право) = ВРег("Добавление")
		 ИЛИ ВРег(Право) = ВРег("Удаление") Тогда
		
			// Эти права не используются для отдельного ограничения доступа.
			// Ограничение добавления совпадает с ограничением изменения,
			// ограничение удаления, либо не используется, либо совпадает с ограничением изменения.
			ПропуститьПраво = Истина;
		Иначе
			ПропуститьПраво = Ложь;
		КонецЕсли;
		
		Ограничение = СтрЗаменить(СокрЛП(Ограничение), Символы.ПС, " ");
		Пока Найти(Ограничение, ", ") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, ", ", ",");
		КонецЦикла;
		Пока Найти(Ограничение, " ,") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, " ,", ",");
		КонецЦикла;
		
		Если ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениям("))) = ВРег("#ПоЗначениям(") Тогда
			
			Позиция = Найти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, Найти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, Найти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, Найти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = Найти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, Найти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, Найти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, Таблица, Право, ВидДоступа, ПолноеИмяПоля, "");
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямРасширенный("))) = ВРег("#ПоЗначениямРасширенный(") Тогда
			
			Позиция = Найти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, Найти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, Найти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, Найти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = Найти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, Найти(Строка, """,""")-1);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, Найти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, Найти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, Таблица, Право, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямИНаборамРасширенный("))) = ВРег("#ПоЗначениямИНаборамРасширенный(") Тогда
			
			Позиция = Найти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, Найти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, Найти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, Найти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = Найти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, Найти(Строка, """,""")-1);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, Найти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, Найти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, Таблица, Право, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = Найти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоНаборамЗначений("))) = ВРег("#ПоНаборамЗначений(") Тогда
			
			Позиция = Найти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, Найти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, Найти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, Найти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = Найти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = Найти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПолноеИмяПоля = Лев(Строка, Найти(Строка, """,""")-1);
			
			ВидДоступа = "Объект";
			
			Если НЕ ЗначениеЗаполнено(ПолноеИмяПоля) Тогда
				ПолноеИмяПоля = "Ссылка";
			КонецЕсли;
			
			ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, Таблица, Право, ВидДоступа, ПолноеИмяПоля, "");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление видов ограничений НастройкиПрав, для которых в поле нет ни одного из типов владельцев настроек прав.
	Отбор = Новый Структура("ВидДоступа, ТаблицаОбъекта", "НастройкиПрав", "");
	НайденныеСтроки = ВидыОграниченийПрав.НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		ВидыОграниченийПрав.Удалить(ВидыОграниченийПрав.Индекс(Строка));
	КонецЦикла;
	
	// Проверка использование ограничения по всем полям.
	СтрокаПрочиеПоля = НСтр("ru = '<Прочие поля>'");
	Для каждого Строка Из Ограничения Цикл
		Если ВРег(Строка.Поля) <> ВРег(СтрокаПрочиеПоля) Тогда
			
			ДобавитьОшибку("ОграничениеНеПоВсемПолям", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения на уровне записей стандартно применяются ко всем полям: ""%6"".
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'"),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, СтрокаПрочиеПоля));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка отсутствия ограничения на право Удаление.
	Для каждого Строка Из Ограничения Цикл
		Если ВРег(Строка.Право) = ВРег("Удаление") И ЗначениеЗаполнено(Строка.Ограничение) Тогда
			
			ДобавитьОшибку("ОграничениеПраваУдаление", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения для права Удаление стандартно не используются.
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'"),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка совпадения текстов ограничения в разных ролях для одной таблицы и одного права.
	ПраваТаблиц = Ограничения.Скопировать(, "Таблица, Право, ВидРоли");
	ПраваТаблиц.Свернуть("Таблица, Право, ВидРоли");
	
	Для каждого ПравоТаблицы Из ПраваТаблиц Цикл
		// Проверка совпадения ограничений.
		Отбор = Новый Структура("Таблица, Право, ВидРоли");
		ЗаполнитьЗначенияСвойств(Отбор, ПравоТаблицы);
		НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() < 1 Тогда
			Продолжить;
		КонецЕсли;
		ПерваяСтрока = НайденныеСтроки[0];
		ТекущееОграничение = "";
		Для каждого Строка Из НайденныеСтроки Цикл
			ПерваяСтрокаОграничение = СтрЗаменить(ПерваяСтрока.Ограничение, """" + ПерваяСтрока.УказанноеПраво   + """", """""");
			ПерваяСтрокаОграничение = СтрЗаменить(ПерваяСтрокаОграничение,  """" + ПерваяСтрока.УказаннаяТаблица + """", """""");
			СтрокаОграничение       = СтрЗаменить(Строка.Ограничение,       """" + Строка.УказанноеПраво   + """", """""");
			СтрокаОграничение       = СтрЗаменить(СтрокаОграничение,        """" + Строка.УказаннаяТаблица + """", """""");
			
			Если СокрЛП(ПерваяСтрокаОграничение) = СокрЛП(СтрокаОграничение)
			 ИЛИ НЕ ЗначениеЗаполнено(ПерваяСтрока.Ограничение)
			 ИЛИ НЕ ЗначениеЗаполнено(Строка.Ограничение) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОшибку("ОграниченияВРазныхРоляхНеСовпадают", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения на уровне записей в разных ролях стандартно должны совпадать для той же таблицы и права.
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'"),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение)
				+ Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'которое не совпадает с ролью %1, в которой
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'"),
					ПерваяСтрока.Роль, ПерваяСтрока.Поля, ПерваяСтрока.Право, ПерваяСтрока.Таблица, ПерваяСтрока.Ограничение));
		КонецЦикла;
	КонецЦикла;
	
	// Проверка совпадения текста ограничения прав Добавление и Изменение в ролях по-отдельности.
	// (Дополнительное ограничение на Добавление папок файлов накладывается в обработчике ПередЗаписью).
	
	Ограничения.Колонки.Добавить("Обработана");
	
	Для каждого Строка Из Ограничения Цикл
		
		Если ВРег(Строка.Право) <> ВРег("Добавление") ИЛИ Строка.Обработана <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.Обработана = Истина;
		
		Отбор = Новый Структура("Таблица, Право, Роль, Поля", Строка.Таблица, "Изменение", Строка.Роль, Строка.Поля);
		НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'
					           |для которого не найдено соответствующего ограничения права Изменение."),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение));
			
		Иначе
			НайденныеСтроки[0].Обработана = Истина;
			ОграничениеДобавления = СтрЗаменить(Строка.Ограничение,    """" + Строка.УказанноеПраво   + """", """""");
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления, """" + Строка.УказаннаяТаблица + """", """""");
			ОграничениеИзменения  = СтрЗаменить(НайденныеСтроки[0].Ограничение, """" + НайденныеСтроки[0].УказанноеПраво   + """", """""");
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,           """" + НайденныеСтроки[0].УказаннаяТаблица + """", """""");
			
			Если СокрЛП(ОграничениеДобавления)<> СокрЛП(ОграничениеИзменения) Тогда
				
				ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5
						           |которое не совпадает с ограничением тех же полей для права Изменение:
						           |%6'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, НайденныеСтроки[0].Ограничение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Ограничения Цикл
		
		Если ВРег(Строка.Право) <> ВРег("Изменение") ИЛИ Строка.Обработана <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.Обработана = Истина;
		
		Отбор = Новый Структура("Таблица, Право, Роль, Поля", Строка.Таблица, "Добавление", Строка.Роль, Строка.Поля);
		НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДобавитьОшибку("ОграничениеИзмененияНеСовпадаетСДобавлением", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения для права Изменение стандартно совпадает с ограничением права Добавление.
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'
					           |для которого не найдено соответствующего ограничения права Добавление."),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение));
			
		Иначе
			НайденныеСтроки[0].Обработана = Истина;
			ОграничениеДобавления = СтрЗаменить(НайденныеСтроки[0].Ограничение, """" + НайденныеСтроки[0].УказанноеПраво   + """", """""");
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления,          """" + НайденныеСтроки[0].УказаннаяТаблица + """", """""");
			ОграничениеИзменения  = СтрЗаменить(Строка.Ограничение,    """" + Строка.УказанноеПраво   + """", """""");
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,  """" + Строка.УказаннаяТаблица + """", """""");
			
			Если СокрЛП(ОграничениеДобавления)<> СокрЛП(ОграничениеИзменения) Тогда
				
				ДобавитьОшибку("ОграничениеИзмененияНеСовпадаетСДобавлением", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения для права Изменение стандартно совпадает с ограничением права Добавление.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5
						           |которое не совпадает с ограничением тех же полей для права Добавление:
						           |%6'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, НайденныеСтроки[0].Ограничение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛ(НайденныеОшибки);
	
КонецФункции

&НаСервере
Процедура ПроверитьИмяТаблицы(Свойства, НайденныеОшибки)
	
	Если Свойства.Таблица <> Свойства.УказаннаяТаблица Тогда
		ДобавитьОшибку("НеверноеИмяТаблицы", Свойства, НайденныеОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В роли %1 неверно указано имя таблицы в
				           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
				           |%5'"),
				Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИмяПрава(Свойства, НайденныеОшибки)
	
	Если ЗначениеЗаполнено(Свойства.УказанноеПраво)
	   И Свойства.Право <> Свойства.УказанноеПраво Тогда
		
		ДобавитьОшибку("НеверноеИмяПрава", Свойства, НайденныеОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В роли %1 неверно указано имя права в
				           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
				           |%5'"),
				Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидДоступа(Знач Свойства, НайденныеОшибки, Знач ВидыОграниченийПрав, Знач Таблица,
		Знач Право, Знач ВидДоступа, Знач ПолноеИмяПоля, Знач ПрисоединяемыеТаблицы)
	
	Если ВидДоступа <> "Условие"
	   И ВидДоступа <> "ПравоЧтения"
	   И ВидДоступа <> "ПравоИзменения" Тогда
		
		Отбор = Новый Структура("Таблица, Право, ВидДоступа, ТаблицаОбъекта");
		
		Отбор.Таблица    = Таблица;
		Отбор.Право      = Право;
		Отбор.ВидДоступа = ВидДоступа;
		
		Если ВидДоступа = "Объект" Или ВидДоступа = "НастройкиПрав" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			| " + ПолноеИмяПоля + " КАК ПолеИскомыхТипов
			|ИЗ
			|	" + Таблица + " КАК Т
			|" + ПрисоединяемыеТаблицы + "
			|ГДЕ
			|	Ложь";
			
			Если ВидДоступа = "НастройкиПрав" Тогда
				ВладельцыПрав = УправлениеДоступомСлужебныйПовтИсп.Параметры(
					).ВозможныеПраваДляНастройкиПравОбъектов.ПоПолнымИменам;
			КонецЕсли;
			
			Для каждого Тип Из Запрос.Выполнить().Выгрузить().Колонки.ПолеИскомыхТипов.ТипЗначения.Типы() Цикл
				Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(Тип) <> Неопределено Тогда
					МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
					ТаблицаТипа = МетаданныеТипа.ПолноеИмя();
					Если ВидДоступа = "НастройкиПрав" И ВладельцыПрав.Получить(ТаблицаТипа) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Отбор.ТаблицаОбъекта = ТаблицаТипа;
					Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
			
			ДобавитьОшибку("НеверноеИмяВидаДоступа", Свойства, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В роли %1 неверно указано имя вида доступа ""%2"" в
					           |ограничении полей ""%3"" права ""%4"" таблицы ""%5"":
					           |%6'"),
					Свойства.Роль, ВидДоступа, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
		Иначе
			Отбор.ТаблицаОбъекта = "";
			Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОшибку(ВидОшибки, Строка, НайденныеОшибки, ТекстОшибки)
	
	ЭтоИсключение = Ложь;
	ПриОбнаруженииОшибки(ВидОшибки, Строка, ЭтоИсключение);
	
	Если НЕ ЭтоИсключение Тогда
		НайденныеОшибки = НайденныеОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
