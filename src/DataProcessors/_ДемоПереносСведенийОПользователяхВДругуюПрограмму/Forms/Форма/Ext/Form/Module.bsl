// Флаг подтверждения, используется при не модальном закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

// Организация фонового выполнения переноса
&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура;
	
	ИнициализироватьДеревоГруппПользователей();
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПодтверждениеЗакрытияФормы <> Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Отказаться от переноса сведений о пользователях?'");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогФайловойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогФайловойБазы;
	
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогФайловойБазы = ДиалогВыбора.Каталог;
		ТипБазы             = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерверБазыПриИзменении(Элемент)
	
	ТипБазы = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяБазыПриИзменении(Элемент)
	
	ТипБазы = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Если ПустаяСтрока(Комментарий) Тогда
		Элементы.СтраницаКомментарий.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаКомментарий.Картинка = БиблиотекаКартинок.Комментарий;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПользователи

&НаКлиенте
Процедура ПользователиПометкаПриИзменении(Элемент)
	
	ИзменениеПометки(Элементы.ПользователиГрупп.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиГруппВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПользователиГрупп.ТекущиеДанные;
	
	ТекущиеДанные.Пометка = (ТекущиеДанные.Пометка + 1) % 2;
	ИзменениеПометки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверитьПодключениеCOMЗавершение", ЭтотОбъект);
	ПроверитьРазрешенияБезопасногоРежимаCOM(ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	// Проверка выбранных данных
	СоответствиеПользователей = ПользователиДляПереноса(ПользователиГрупп);
	Если СоответствиеПользователей.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ни один пользователь для переноса'") );
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнениеПереноса", ЭтотОбъект, Новый Структура);
	ОповещениеОЗакрытии.ДополнительныеПараметры.Вставить("СоответствиеПользователей", СоответствиеПользователей);
	
	ПроверитьРазрешенияБезопасногоРежимаCOM(ОповещениеОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьВсеПометки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьВсеПометки(0);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуФормы();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуФормы()
	
	// Отменяем возможную фоновую операцию
	Если ТипЗнч(ПараметрыОбработчикаОжидания) = Тип("Структура") И ПараметрыОбработчикаОжидания.Свойство("ИдентификаторЗадания") Тогда
		
		ОтменитьФоновоеЗадание(ПараметрыОбработчикаОжидания.ИдентификаторЗадания);
		
	КонецЕсли;
	
	// Закрываем без дополнительных вопросов
	ПодтверждениеЗакрытияФормы = Истина;
	Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Функция ФоноваяЗагрузкаЗавершена(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПользователиДляПереноса(Знач Источник, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из Источник.ПолучитьЭлементы() Цикл
		Если Строка.Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Текущая строка
		Группа = Результат[Строка.ГруппаПользователей];
		Если Группа = Неопределено Тогда
			Группа = Новый Соответствие;
			Результат[Строка.ГруппаПользователей] = Группа;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда
			Группа[Строка.Пользователь] = Истина;
		КонецЕсли;
		
		// Подчиненные строки
		ПользователиДляПереноса(Строка, Результат); 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьВсеПометки(Знач ЗначениеПометки)
	
	Для Каждого ДанныеСтроки Из ПользователиГрупп.ПолучитьЭлементы() Цикл
		ДанныеСтроки.Пометка = ЗначениеПометки;
		ПроставитьПометкиВниз(ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПометки(Знач ДанныеСтроки)
	
	// Пользователь в текущей группе
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
	
	// Пользователь в остальных группах
	ИзменениеПометкиПользователя(ПользователиГрупп.ПолучитьЭлементы(), ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПометкиПользователя(Знач КоллекцияСтрок, Знач ИсходныеДанные)
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Если Строка <> ИсходныеДанные И Строка.Пользователь = ИсходныеДанные.Пользователь Тогда
			Строка.Пометка = ИсходныеДанные.Пометка;
			ПроставитьПометкиВниз(Строка);
			ПроставитьПометкиВверх(Строка);
		КонецЕсли;
		
		ИзменениеПометкиПользователя(Строка.ПолучитьЭлементы(), ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
		Иначе
			РодительСтроки.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРазрешенияБезопасногоРежимаCOM(Знач ОповещениеОЗакрытии = Неопределено)
	
	РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
		СоздатьЗапросНаИспользованиеВнешнихРесурсовCOM(),
		ЭтотОбъект, ОповещениеОЗакрытии
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеCOMЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
		
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	КонецЕсли;
	
	СтруктураНастроек = ПараметрыПодключенияCOM();
	
	ТекстСообщения = ОшибкиПодключенияCOMНаСервере(СтруктураНастроек);
	Если ПустаяСтрока(ТекстСообщения) Тогда
		// Нет ошибок, сообщим об успехе
		ТекстСообщения = НСтр("ru = 'Проверка подключения успешно завершена.'");
	КонецЕсли;
	
	ОчиститьСообщения();
	ПоказатьПредупреждение(, ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодключенияCOM()
	
	Результат = Новый Структура;
	
	Результат.Вставить("COMВариантРаботыИнформационнойБазы", ТипБазы);
	Результат.Вставить("COMКаталогИнформационнойБазы",       КаталогФайловойБазы);
	
	Результат.Вставить("COMИмяСервера1СПредприятия",                     СерверБазы);
	Результат.Вставить("COMИмяИнформационнойБазыНаСервере1СПредприятия", ИмяБазы);
	Результат.Вставить("COMАутентификацияОперационнойСистемы",           АутентификацияОС);
	
	Результат.Вставить("COMИмяПользователя",    Пользователь);
	Результат.Вставить("COMПарольПользователя", Пароль);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОшибкиПодключенияCOMНаСервере(Знач СтруктураНастроек)
	
	Результат = ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(СтруктураНастроек);
	Если Результат.Соединение = Неопределено Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЗапросНаИспользованиеВнешнихРесурсовCOM()
	
	Разрешения = Новый Массив;
	
	ИмяCOMСоединителя = ОбщегоНазначения.ИмяCOMСоединителя();
	Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса(ИмяCOMСоединителя, 
			ОбщегоНазначения.ИдентификаторCOMСоединителя(ИмяCOMСоединителя)
		)
	);
	
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка._ДемоПереносСведенийОПользователяхВДругуюПрограмму");
	
	Результат = Новый Массив;
	Результат.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения));
	
	Возврат Результат;
КонецФункции

// Начало выполнения переноса после успешной проверки параметров безопасности
&НаКлиенте
Процедура ВыполнениеПереноса(Знач ОтветНаВопрос, Знач ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.Вставить("ИдентификаторЗадания");
	ПараметрыОбработчикаОжидания.Вставить("АдресХранилища");
	
	РезультатЗапуска = ЗапуститьВыгрузкуДанныхНаСервере(
		УникальныйИдентификатор,
		ПараметрыПодключенияCOM(), ДополнительныеПараметры.СоответствиеПользователей, Комментарий
	);
	
	ПараметрыОбработчикаОжидания.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыОбработчикаОжидания.АдресХранилища       = РезультатЗапуска.АдресХранилища;
	
	Если РезультатЗапуска.ЗаданиеВыполнено Тогда
		СообщитьОЗавершенииПереноса();
		Возврат;
	КонецЕсли;
	
	Состояние( НСтр("ru = 'Выполняется перенос сведений о пользователях.
		                  |Подождите, пожалуйста...'") );
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, РезультатЗапуска.ИдентификаторЗадания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПереноса()
	
	// Все сообщения фонового обработчика
	ВывестиСообщенияФоновогоЗадания(ПараметрыОбработчикаОжидания.ИдентификаторЗадания);
	
	// Итоговый результат
	АдресХранилища = ПараметрыОбработчикаОжидания.АдресХранилища;
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоказатьПредупреждение(, ПолучитьИзВременногоХранилища(АдресХранилища) );
	КонецЕсли;
	
	// Сброс состояния
	Состояние();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиСообщенияФоновогоЗадания(Знач Идентификатор)
	
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияФоновогоЗадания = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из СообщенияФоновогоЗадания Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДеревоГруппПользователей()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СоставГруппыПользователей.Пользователь.Наименование КАК Представление,
		|	СоставГруппыПользователей.Ссылка.Наименование       КАК ПредставлениеГруппы,
		|	СоставГруппыПользователей.Ссылка                    КАК ГруппаПользователей,
		|	СоставГруппыПользователей.Пользователь              КАК Пользователь,
		|	0                                                   КАК Пометка
		|ИЗ 
		|	Справочник.ГруппыПользователей.Состав КАК СоставГруппыПользователей
		|ГДЕ 
		|	НЕ СоставГруппыПользователей.Ссылка.ПометкаУдаления
		|	
		|ОБЪЕДИНИТЬ ВСЕ 
		|ВЫБРАТЬ
		|	Наименование,
		|	NULL,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка),
		|	Ссылка,
		|	0
		|ИЗ
		|	Справочник.Пользователи
		|ГДЕ
		|	НЕ Ссылка В (
		|		ВЫБРАТЬ
		|			Пользователь
		|		ИЗ
		|			Справочник.ГруппыПользователей.Состав
		|	)
		|
		|АВТОУПОРЯДОЧИВАНИЕ
		|
		|ИТОГИ 
		|	ПредставлениеГруппы КАК Представление
		|ПО 
		|	ГруппаПользователей ИЕРАРХИЯ
		|");
		
	ДеревоПользователей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Переносим строки непосредственно на уровень итогов, заодно расставляем индекс пиктограмм
	ДеревоПользователей.Колонки.Добавить("ИндексПиктограммы", Новый ОписаниеТипов("Число") );
	КоррекцияУровняСтрок(ДеревоПользователей.Строки, Справочники.ГруппыПользователей.ПустаяСсылка());
	
	ЗначениеВРеквизитФормы(ДеревоПользователей, "ПользователиГрупп");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КоррекцияУровняСтрок(Знач КоллекцияСтрокДерева, Знач ЗначениеРодителя)
	
	Позиция = КоллекцияСтрокДерева.Количество() - 1;
	Пока Позиция >= 0 Цикл
		СтрокаДерева = КоллекцияСтрокДерева[Позиция];
		Позиция = Позиция - 1;
		
		ДочерниеСтроки = СтрокаДерева.Строки;
		ТекущаяГруппа  = СтрокаДерева.ГруппаПользователей;
		
		КоррекцияУровняСтрок(ДочерниеСтроки, ТекущаяГруппа);
		
		ЭтоСтрокаГруппы = СтрокаДерева.Пользователь = NULL;
		Если ТекущаяГруппа = ЗначениеРодителя И ЭтоСтрокаГруппы Тогда
			Для Каждого Строка Из ДочерниеСтроки Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияСтрокДерева.Добавить(), Строка);
			КонецЦикла;
			КоллекцияСтрокДерева.Удалить(СтрокаДерева);
			
		Иначе
			Если ЭтоСтрокаГруппы Тогда
				СтрокаДерева.ИндексПиктограммы = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ИдентификаторЗадания = ПараметрыОбработчикаОжидания.ИдентификаторЗадания;
	
	Если ФормаДлительнойОперации <> Неопределено И ФормаДлительнойОперации.Открыта() Тогда
		
		Если ФоноваяЗагрузкаЗавершена(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			СообщитьОЗавершенииПереноса();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
		
	Иначе
		ОтменитьФоновоеЗадание(ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыгрузкуДанныхНаСервере(Знач ИдентификаторФормы, Знач ПараметрыПодключения, Знач СоответствиеПользователей, Знач Комментарий)
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ПараметрыПодключения",      ПараметрыПодключения);
	ПараметрыОперации.Вставить("СоответствиеПользователей", СоответствиеПользователей);
	ПараметрыОперации.Вставить("Комментарий",               Комментарий);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ИдентификаторФормы,
		"Обработки._ДемоПереносСведенийОПользователяхВДругуюПрограмму.ВыполнитьПереносСведенийОПользователях", 
		ПараметрыОперации, 
		НСтр("ru = 'Перенос сведений о пользователях в другую программу'")
	);
	
	ПараметрыОбработчикаОжидания.Вставить("АдресХранилища", Результат.АдресХранилища);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
