#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик фоновой выгрузки данных в другую программу
//
Процедура ВыполнитьПереносСведенийОПользователях(Знач Параметры, Знач АдресХранилища) Экспорт
	
	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	ТекстСообщения = Неопределено;
	
	ЗагрузитьПравилаОбмена(УниверсальнаяВыгрузкаДанных, ТекстСообщения);
	
	Если ТекстСообщения = Неопределено Тогда
		ВыполнитьПеренос(УниверсальнаяВыгрузкаДанных, Параметры, ТекстСообщения);
	КонецЕсли;
	
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Перенос сведений о пользователях выполнен успешно.'");	
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТекстСообщения, АдресХранилища);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьПравилаОбмена(Знач ОбработкаВыгрузкиДанных, ТекстСообщения)
	
	ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xml");
	
	МакетПравилОбмена = Обработки._ДемоПереносСведенийОПользователяхВДругуюПрограмму.ПолучитьМакет("ПравилаПереносаДанных");
	МакетПравилОбмена.Записать(ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена);
	
	ОбработкаВыгрузкиДанных.ЗагрузитьПравилаОбмена();
	
	Попытка
		УдалитьФайлы(ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена);
	Исключение
		// Обработка не требуется, файл будет удален позднее
	КонецПопытки;
	
	Если ОбработкаВыгрузкиДанных.ФлагОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при загрузке правил переноса данных.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПеренос(Знач ОбработкаВыгрузкиДанных, Знач Параметры, ТекстСообщения)
	
	// Параметры переноса
	ОбработкаВыгрузкиДанных.ВыгружатьТолькоРазрешенные                      = Истина;
	ОбработкаВыгрузкиДанных.ФлагРежимОтладки                                = Ложь;
	ОбработкаВыгрузкиДанных.ВыполнитьОбменДаннымиВОптимизированномФормате   = Истина;
	ОбработкаВыгрузкиДанных.НепосредственноеЧтениеВИБПриемнике              = Истина;
	ОбработкаВыгрузкиДанных.ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";
	
	// Параметры подключения
	ПараметрыПодключения = Параметры.ПараметрыПодключения;
	
	ОбработкаВыгрузкиДанных.ТипИнформационнойБазыДляПодключения                   = ПараметрыПодключения.COMВариантРаботыИнформационнойБазы = 0;
	ОбработкаВыгрузкиДанных.АутентификацияWindowsИнформационнойБазыДляПодключения = ПараметрыПодключения.COMАутентификацияОперационнойСистемы;
	
	ОбработкаВыгрузкиДанных.КаталогИнформационнойБазыДляПодключения      = ПараметрыПодключения.COMКаталогИнформационнойБазы;
	ОбработкаВыгрузкиДанных.ИмяСервераИнформационнойБазыДляПодключения   = ПараметрыПодключения.COMИмяСервера1СПредприятия;
	ОбработкаВыгрузкиДанных.ИмяИнформационнойБазыНаСервереДляПодключения = ПараметрыПодключения.COMИмяИнформационнойБазыНаСервере1СПредприятия;
	
	ОбработкаВыгрузкиДанных.ПользовательИнформационнойБазыДляПодключения = ПараметрыПодключения.COMИмяПользователя;
	ОбработкаВыгрузкиДанных.ПарольИнформационнойБазыДляПодключения       = ПараметрыПодключения.COMПарольПользователя;
	
	// Параметры для правил
	ПараметрыПравил = ОбработкаВыгрузкиДанных.Параметры;
	ПараметрыПравил.Вставить("СоответствиеПользователей", Параметры.СоответствиеПользователей);
	ПараметрыПравил.Вставить("Комментарий",               Параметры.Комментарий);
	
	ОбработкаВыгрузкиДанных.ВыполнитьВыгрузку();
	
	Если ОбработкаВыгрузкиДанных.ФлагОшибки Тогда
		ТекстСообщения = НСтр("ru = 'При переносе сведений о пользователях произошли ошибки.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
