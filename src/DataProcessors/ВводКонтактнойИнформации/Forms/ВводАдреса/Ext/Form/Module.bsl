// Форма параметризуется:
//
//      Заголовок     - Строка  - заголовок формы
//      ЗначенияПолей - Строка  - сериализованное значение контактной информации или пустая строка для 
//                                ввода нового
//      Представление - Строка  - представление адреса (используется только при работе со старыми данными)
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание того, что мы редактируем
//      Комментарий  - Строка   - необязательный комментарий, для подстановки в поле "Комментарий"
//
//      ВозвращатьСписокЗначений - Булево - необязательный флаг того, что возвращаемое значение поля 
//                                 КонтактнаяИнформация будет иметь тип СписокЗначений (совместимость)
//
//  Результат выбора:
//      Структура - поля:
//          * КонтактнаяИнформация   - Строка - XML контактной информации
//          * Представление          - Строка - Представление
//          * Комментарий            - Строка - Комментарий
//          * ВведеноВСвободнойФорме - Булево - флаг ввода
//
// -------------------------------------------------------------------------------------------------

#Область ОбработчикиСобытийФормы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Параметры.Свойство("ВозвращатьСписокЗначений", ВозвращатьСписокЗначений);
	
	// Внутренняя инициализация
	ЦветФонаУправляющегоПоля = ЦветаСтиля.ФонУправляющегоПоля;
	ЦветФонаФормы            = ЦветаСтиля.ЦветФонаФормы;
	ЦветКорректногоПоля      = Новый Цвет;   // (243, 255, 243);
	АвтоЦвет                 = Новый Цвет;
	
	СтранаРоссия = Справочники.СтраныМира.Россия;
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	ВидКонтактнойИнформации.Вставить("Ссылка", Параметры.ВидКонтактнойИнформации);
	
	// Заголовок
	Если ПустаяСтрока(Параметры.Заголовок) Тогда
		Если ТипЗнч(ВидКонтактнойИнформации)=Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Заголовок = Строка(ВидКонтактнойИнформации);
			// Иначе останется заголовок, заданный в форме
		КонецЕсли;
	Иначе
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	// Режимы
	МожноЗагружатьКлассификатор = КонтактнаяИнформацияСлужебный.ЕстьВозможностьИзмененияАдресногоКлассификатора();
	ЕстьКлассификатор           = Неопределено <> КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	СкрыватьНеактуальныеАдреса  = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	
	АдресТолькоРоссийский       = ВидКонтактнойИнформации.АдресТолькоРоссийский;
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	
	// Возможные варианты дома, строения, квартиры
	УстановитьСписокВыбораЭлемента(Элементы.ТипДома,      Элементы.Дом,       КонтактнаяИнформацияСлужебный.ВариантыДанныхДом());
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроения,  Элементы.Строение,  КонтактнаяИнформацияСлужебный.ВариантыДанныхСтроение());
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещения, Элементы.Помещение, КонтактнаяИнформацияСлужебный.ВариантыДанныхПомещение());
	
	// Пытаемся заполнить из параметров
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(Параметры.ЗначенияПолей) 
		И ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес
	Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(Параметры.ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление = Параметры.Представление;
			XDTOКонтактная.Состав.Страна = Строка(СтранаРоссия);
		КонецЕсли;
	Иначе
		XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(Параметры.ЗначенияПолей, Параметры.Представление, );
	КонецЕсли;
	
	Если Параметры.Комментарий<>Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(XDTOКонтактная, Параметры.Комментарий);
	КонецЕсли;
	
	ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
	Если ЗначениеЗаполнено(Страна) Тогда
		// Нашли в справочнике стран
		ИсходноеПредставлениеСтраны = "";
		
	ИначеЕсли ПустаяСтрока(КодСтраны) Тогда
		// Нашли в классификаторе, но не нашли в справочнике, возможно стоит завести?
		ИсходноеПредставлениеСтраны = СокрЛП(XDTOКонтактная.Состав.Страна);
		
	Иначе
		// Не нашли ни в классификаторе ни в справочнике
		ИсходноеПредставлениеСтраны = СокрЛП(XDTOКонтактная.Состав.Страна);
		
	КонецЕсли;
		
	ОтрисоватьДополнительныеЗданияИПомещения();
	
	// Возможно пустые значения, чтобы не смущали
	Если ПустаяСтрока(Дом) И ПустаяСтрока(ТипДома) Тогда
		ТипДома = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома);
	КонецЕсли;
	Если ПустаяСтрока(Строение) И ПустаяСтрока(ТипСтроения) Тогда
		ТипСтроения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения);
	КонецЕсли;
	Если ПустаяСтрока(Помещение) И ПустаяСтрока(ТипПомещения) Тогда
		ТипПомещения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения);
	КонецЕсли;
	
	// Проверяем на корректность
	Если АдресТолькоРоссийский Тогда
		Элементы.Страна.Доступность = Ложь;
		Элементы.Страна.ЦветФона = АвтоЦвет;
		Если Страна <> СтранаРоссия Тогда
			Если Не ПустаяСтрока(Параметры.ЗначенияПолей) Тогда
				// Считаем адрес российским
				ТестПредставленияАдреса = СокрЛП(
					СокрЛП(Страна) + " " + СокрЛП(ПредставлениеИностранногоАдреса)
				);
				Если Не ПустаяСтрока(ТестПредставленияАдреса) Тогда
					ПредставлениеАдреса = ТестПредставленияАдреса;
					РазрешитьВводАдресаВСвободнойФорме = Истина;
					ПредставлениеАдресаИзменено        = Истина; 
				КонецЕсли;
			КонецЕсли;
			Страна = СтранаРоссия;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// По умолчанию все русские
	Если ЗначениеЗаполнено(Страна) Тогда
		КодСтраны = Страна.Код;
	Иначе
		Если ПустаяСтрока(ИсходноеПредставлениеСтраны) Тогда
			Страна    = СтранаРоссия;
			КодСтраны = СтранаРоссия.Код;
		Иначе 
			// Не определили страну, но точно не Россия
			Если ПустаяСтрока(ТекстПредупрежденияПриОткрытии) Тогда
				ПолеПредупрежденияПриОткрытии = "Страна";
			КонецЕсли;
			ТекстПредупрежденияПриОткрытии = ТекстПредупрежденияПриОткрытии
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Страна ""%1"" не найдена в справочнике стран мира.'"), ИсходноеПредставлениеСтраны
				);
		КонецЕсли;
	КонецЕсли;
	
	// Инициализируем элементы
	Если Страна = СтранаРоссия Тогда
		Элементы.ТипАдреса.ТекущаяСтраница = Элементы.РоссийскийАдрес;
		ТекущийЭлемент = Элементы.НаселенныйПункт;
	Иначе
		Элементы.ТипАдреса.ТекущаяСтраница = Элементы.ИностранныйАдрес;
		ТекущийЭлемент = Элементы.ПредставлениеИностранногоАдреса;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		МожноЗагружатьКлассификатор = Ложь;
	КонецЕсли;
	Элементы.ЗагрузитьКлассификатор.Видимость            = МожноЗагружатьКлассификатор;
	Элементы.ЗагрузитьКлассификаторВсеДействия.Видимость = МожноЗагружатьКлассификатор;
	
	Если Не ЕстьКлассификатор Тогда
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость            = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексуВсеДействия.Видимость = Ложь;
	КонецЕсли;
	
	// По умолчанию выводим представление
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
	
	// Группа команд "все действия" зависит от интерфейса
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		Элементы.ФормаВсеДействия.Видимость = Ложь;
	Иначе
		Элементы.ВвестиАдресВСвободнойФорме.Видимость  = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость = Ложь;
		Элементы.ФормаОчиститьАдрес.Видимость          = Ложь;
		Элементы.ЗагрузитьКлассификатор.Видимость      = Ложь;
		Элементы.ИзменитьФорму.Видимость               = Ложь;
	КонецЕсли;
	
	УстановитьКлючИспользованияФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПиктограммуКомментария();
	
	Элементы.ДобавитьОбъект.Доступность = МожноДобавлятьДополнительныеОбъекты();
	
	ОбработкаИзмененияСтраныКлиент();
	СостояниеВводаПредставленияАдреса(РазрешитьВводАдресаВСвободнойФорме, Ложь);
	ВизуализироватьКорректностьВыбора();
	
	Если Не ПустаяСтрока(ТекстПредупрежденияПриОткрытии) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПредупредитьПослеОткрытияФормы", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	ОбработкаИзмененияСтраныКлиент();
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
#Если ВебКлиент Тогда
	// Обход особенности платформы
	Элемент.ОбновитьТекстРедактирования();
#КонецЕсли

	// Выводим всегда представление
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.АдресСтраницаПредставление;
КонецПроцедуры

&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора
		Если ПустаяСтрока(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
		КонецЕсли;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтранаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	// Обход особенности платформы
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Страна);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	
	Контекст = КонтекстФормыКлиент();
	
	ТекущийИндекс = СокрЛП(Индекс);
	Если ЕстьКлассификатор И СтрДлина(ТекущийИндекс) = 6 Тогда
		ПараметрыФормы = Новый Структура("Индекс, СкрыватьНеактуальныеАдреса", ТекущийИндекс, СкрыватьНеактуальныеАдреса);
		ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ПоискАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс);
	КонецЕсли;
	
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьАдресПоДаннымИндекса(Контекст, ВыбранноеЗначение);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
	
	ТекущийЭлемент = Элементы.Дом;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресПоДаннымИндекса(Контекст, Знач ДанныеИндекса)
	
	ОчиститьАдресСервер(Контекст);
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	
	// Предполагаем, что адрес все еще российский
	XDTOАдрес = XDTOКонтактнаяИнфо.Состав.Состав;
	
	КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(XDTOАдрес, ДанныеИндекса.Индекс);
	КонтактнаяИнформацияСлужебный.УстановитьНаселенныйПунктАдресаПоКоду(XDTOАдрес, ДанныеИндекса.Код);
	КонтактнаяИнформацияСлужебный.УстановитьУлицуАдресаПоКоду(XDTOАдрес, ДанныеИндекса.Код);
	
	ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, XDTOКонтактнаяИнфо);
	
	ЗаполнитьПредставлениеАдреса(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	УстановитьПиктограммуКомментария();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДомаПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура СтроениеПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем адрес
	Если Элемент.ТекстРедактирования<>НаселенныйПункт Тогда
		Модифицированность = Истина;
		НаселенныйПункт    = Элемент.ТекстРедактирования;
		
		КодКлассификатораНаселенногоПункта = 0;
		НаселенныйПунктНайденТочно = Ложь;
		УлицаНайденаТочно          = Ложь;
		ДомНайденТочно             = Ложь;
		
		Контекст = КонтекстФормыКлиент();
		ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, Истина);
		КонтекстФормыКлиент(Контекст);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса",
		Новый Структура("НаселенныйПунктДетально, СкрыватьНеактуальныеАдреса", 
			НаселенныйПунктДетально, СкрыватьНеактуальныеАдреса
		), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем МожноЗагружатьРегион;
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ФормироватьДетально = Истина;
	Если ТипЗначения=Тип("Структура") Тогда
		// Результат автоподбора или выбора кнопкой, берем все оттуда
		КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
		НаселенныйПункт                    = ВыбранноеЗначение.Представление;
		НаселенныйПунктНайденТочно         = КодКлассификатораНаселенногоПункта>0;
		
		Если ВыбранноеЗначение.Свойство("НаселенныйПунктДетально") Тогда
			// Выбор из формы детального ввода
			НаселенныйПунктДетально = ВыбранноеЗначение.НаселенныйПунктДетально;
			ФормироватьДетально = Ложь;
		КонецЕсли;
		
		РегионНеЗагружен = ВыбранноеЗначение.Свойство("МожноЗагружатьРегион") И ВыбранноеЗначение.МожноЗагружатьРегион;
		Если МожноЗагружатьКлассификатор И РегионНеЗагружен Тогда
			// Предлагаем загрузить классификатор
			УправлениеКонтактнойИнформациейКлиент.ПредложениеЗагрузкиКлассификатора(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные для ""%1"" не загружены.'"), ВыбранноеЗначение.Представление), 
				ВыбранноеЗначение.Представление
			);
		КонецЕсли;
		
	Иначе
		// Иной источник, будет попытка разобрать
		КодКлассификатораНаселенногоПункта = 0;
	 	НаселенныйПункт                    = Строка(ВыбранноеЗначение);
		
		НаселенныйПунктНайденТочно  = Ложь;
		УлицаНайденаТочно           = Ложь;
		ДомНайденТочно              = Ложь;
	КонецЕсли;
	
	// Если город был выбран точно, то по коду будет восстановлен детальный населенный пункт, иначе сохранится введенная 
	// детальная информация
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, ФормироватьДетально);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора, стандартную обработку не надо трогать
		Возврат;
	КонецЕсли;
	
	Элементы.НаселенныйПункт.ЦветФона = АвтоЦвет;
	Если СтрДлина(Текст) < 3 Тогда 
		// Нет вариантов, список пуст, стандартную обработку не надо трогать
		ВизуализироватьКорректностьВыбора();
		Возврат;
	КонецЕсли;
	
	АнализКлассификатора = РезультатыАвтоПодбораНаселенногоПункта(Текст, СкрыватьНеактуальныеАдреса, Истина);
	ДанныеВыбора = АнализКлассификатора.ДанныеВыбора;
	
	// Стандартную обработку отключаем, только если есть наши варианты
	СтандартнаяОбработка = ДанныеВыбора.Количество() = 0;
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками
	СтандартнаяОбработка = Ложь;
	
	Модифицированность = Истина;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	
	// Населенный пункт становится недостоверным
	КодКлассификатораНаселенногоПункта = 0;
	НаселенныйПунктНайденТочно         = Ложь;
	НаселенныйПункт                    = Текст;
	
	// Улица становится недостоверной
	КодКлассификатораУлицы = 0;
	УлицаНайденаТочно      = Ложь;
	
	// Дом становится недостоверным
	ДомНайденТочно = Ложь;
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияНаселенногоПунктаСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем
	Если Элемент.ТекстРедактирования<>Улица Тогда
		Улица = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	Если КодКлассификатораНаселенногоПункта>0 Тогда
		ПараметрыФормы = Новый Структура("СкрыватьНеактуальныеАдреса, КодКлассификатораНаселенногоПункта, Улица", 
			СкрыватьНеактуальныеАдреса, КодКлассификатораНаселенногоПункта, Улица);
	Иначе
		// Родитель улицы неопределен, открываем форму в которой ничего нет
		ПараметрыФормы = Новый Структура("СкрыватьНеактуальныеАдреса, КодКлассификатораНаселенногоПункта, Улица, Заголовок", 
			СкрыватьНеактуальныеАдреса, -1, Улица, НаселенныйПункт + " " + НСтр("ru = '(не найден)'"));
	КонецЕсли;
		
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбораУлицы(Элемент, КодКлассификатораНаселенногоПункта, Улица, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	
	ТипВыбора = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбора=Тип("Структура") Тогда
		// Результат автоподбора или выбора кнопкой, берем все оттуда
		КодКлассификатораУлицы = ВыбранноеЗначение.Код;
		Улица                  = ВыбранноеЗначение.Представление;
		УлицаНайденаТочно      = Истина;
	Иначе
		// Иной источник, будет попытка разобрать
		КодКлассификатораУлицы = 0;
	 	Улица                  = Строка(ВыбранноеЗначение);
		
		УлицаНайденаТочно = Ложь;
		ДомНайденТочно    = Ложь;
	КонецЕсли;
	
	Контекст = КонтекстФормыКлиент();
	ОбработкаИзмененияУлицыСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
КонецПроцедуры

&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора, стандартную обработку не надо трогать
		Возврат;
	КонецЕсли;
	
	Элементы.Улица.ЦветФона = АвтоЦвет;
	Если СтрДлина(Текст) < 3 Или КодКлассификатораНаселенногоПункта <= 0 Тогда 
		// Нет вариантов, список пуст, стандартную обработку не надо трогать
		ВизуализироватьКорректностьВыбора();
		Возврат;
	КонецЕсли;
	
	АнализКлассификатора = РезультатыАвтоПодбораУлицы(КодКлассификатораНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, Истина);
	ДанныеВыбора = АнализКлассификатора.ДанныеВыбора;
	
	// Стандартную обработку отключаем, только если есть наши варианты
	СтандартнаяОбработка = ДанныеВыбора.Количество() = 0;
КонецПроцедуры

&НаКлиенте
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// Выход из поля с текстом, измененным руками
	Модифицированность = Истина;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Текст);
	Улица = Текст;
	
	// Улица становится непроверенной
	КодКлассификатораУлицы = 0;
	УлицаНайденаТочно = Ложь;
	
	// Дом становится непроверенным
	ДомНайденТочно = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаПриИзменении(Элемент)
	ПредставлениеАдресаИзменено = Истина;
	ПредставлениеАдресаПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПодтвердитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдреса(Команда)
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ПоказатьПредупреждение(, НСтр("ru='Адрес не может быть проверен, так как он введен в свободной форме.'"));
		Возврат;
	КонецЕсли;

	ПредупреждатьОбОтсутствииОшибок = Истина;
	
	Контекст = КонтекстФормыКлиент();
	СписокОшибок = СписокОшибокЗаполнения(Контекст, ПредупреждатьОбОтсутствииОшибок);
	СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствииОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	
	ОчиститьАдресКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПочтовомуИндексу(Команда)
	
	Если ЕстьКлассификатор И Не ПустаяСтрока(Индекс) Тогда
		ПараметрыФормы = Новый Структура("Индекс, СкрыватьНеактуальныеАдреса", СокрЛП(Индекс), СкрыватьНеактуальныеАдреса);
		ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ПоискАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	УправлениеКонтактнойИнформациейКлиент.ЗагрузитьАдресныйКлассификатор();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъект(Команда)
	Варианты = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеЗдания, Элементы.ТипСтроения, 1);
	Для Каждого ЭлементОбъект Из НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеПомещения, Элементы.ТипПомещения, 2) Цикл
		ЗаполнитьЗначенияСвойств(Варианты.Добавить(), ЭлементОбъект);
	КонецЦикла;
	
	КоличествоВариантов = Варианты.Количество();
	Если КоличествоВариантов>0 Тогда
		ДополнительныеПараметры = Новый Структура("КоличествоВариантов", КоличествоВариантов);
		Оповещение = Новый ОписаниеОповещения("ДобавитьОбъектЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(Оповещение, Варианты, Элементы.ДобавитьОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФорме(Команда)
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ТекстВопроса = НСтр("ru='Изменения, введенные вручную, будут потеряны.
		                        |Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru='Ввести адрес в свободной форме?
		                        |Адреса, введенные в свободной форме, могут не пройти проверку по адресному классификатору.'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиАдресВСвободнойФормеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru='Подтверждение'"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	
	Если ПустаяСтрока(Комментарий) Тогда
		Элементы.АдресСтраницаКомментарий.Картинка = Новый Картинка;
	Иначе
		Элементы.АдресСтраницаКомментарий.Картинка = БиблиотекаКартинок.Комментарий;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// При немодифицированности работает как "отмена"
	
	Если Модифицированность Тогда
		// Изменено значение адреса 
		
		Контекст = КонтекстФормыКлиент();
		Результат = РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений);
		
		// Флаги вида были прочитаны заново
		ВидКонтактнойИнформации = Контекст.ВидКонтактнойИнформации;
		
		Если ВидКонтактнойИнформации.ПроверятьКорректность И (Не РазрешитьВводАдресаВСвободнойФорме) И Результат.ОшибкиЗаполнения.Количество()>0 Тогда
			СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);
			Если ВидКонтактнойИнформации.ЗапрещатьВводНекорректного Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	ИначеЕсли Комментарий <> КопияКомментария Тогда
		// Изменен только комментарий, пробуем вернуть обновленное
		Результат = РезультатВыбораТолькоКомментария(Параметры.ЗначенияПолей, Параметры.Представление, Комментарий);
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		СброситьМодифицированностьПриВыборе();
		СохранитьСостояниеФормы();
		Закрыть(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеФормы()
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъектЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент=Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение=1 Тогда
		Строка = ДополнительныеЗдания.Добавить();
		
		Строка.Тип = ВыбранныйЭлемент.Представление;
		Строка.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
		ИмяТекущего = ОтрисоватьДополнительныеЗдания();
	Иначе
		Строка = ДополнительныеПомещения.Добавить();
		
		Строка.Тип = ВыбранныйЭлемент.Представление;
		Строка.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Строка.Тип);
		ИмяТекущего = ОтрисоватьДополнительныеПомещения();
	КонецЕсли;
	
	// Запрещаем добавлять больше чем есть вариантов
	Элементы.ДобавитьОбъект.Доступность = ДополнительныеПараметры.КоличествоВариантов>1;
	
	Если ИмяТекущего<>Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФормеЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазрешитьВводАдресаВСвободнойФорме = Не РазрешитьВводАдресаВСвободнойФорме;
	СостояниеВводаПредставленияАдреса(РазрешитьВводАдресаВСвободнойФорме);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СброситьМодифицированностьПриВыборе()
	Модифицированность = Ложь;
	КопияКомментария   = Комментарий;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредупредитьПослеОткрытияФормы()
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежденияПриОткрытии,, ПолеПредупрежденияПриОткрытии);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений = Ложь)
	// Обновляем некоторые флаги
	ЗначениеФлагов = УправлениеКонтактнойИнформацией.СтруктураВидаКонтактнойИнформации(Контекст.ВидКонтактнойИнформации.Ссылка);
	
	Контекст.ВидКонтактнойИнформации.АдресТолькоРоссийский      = ЗначениеФлагов.АдресТолькоРоссийский;
	Контекст.ВидКонтактнойИнформации.ЗапрещатьВводНекорректного = ЗначениеФлагов.ЗапрещатьВводНекорректного;
	Контекст.ВидКонтактнойИнформации.ПроверятьКорректность      = ЗначениеФлагов.ПроверятьКорректность;

	Возврат РезультатВыбора(Контекст, ВозвращатьСписокЗначений);
КонецФункции

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст, ВозвращатьСписокЗначений = Ложь)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	Результат      = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");
	
	Если ВозвращатьСписокЗначений Тогда
		ДанныеВыбора = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(XDTOИнформация);
		ДанныеВыбора = ДанныеВыбора.ЗначенияПолей;
		
	ИначеЕсли Контекст.Страна = Контекст.СтранаРоссия И ПустаяСтрока(XDTOИнформация.Представление) Тогда
		ДанныеВыбора = "";
		
	Иначе
		ДанныеВыбора = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(XDTOИнформация);
		
	КонецЕсли;
	
	Результат.ДанныеВыбора = Новый Структура("КонтактнаяИнформация, Представление, Комментарий, ВведеноВСвободнойФорме",
		ДанныеВыбора,
		XDTOИнформация.Представление,
		XDTOИнформация.Комментарий,
		КонтактнаяИнформацияСлужебный.АдресВведенВСвободнойФорме(XDTOИнформация));
	
	Результат.ОшибкиЗаполнения = КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(
		XDTOИнформация.Состав,
		Контекст.ВидКонтактнойИнформации);
	
	// Подавляем перенос строк в возвращаемом отдельно представлении.
	Результат.ДанныеВыбора.Представление = СокрЛП(СтрЗаменить(Результат.ДанныеВыбора.Представление, Символы.ПС, " "));
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОшибокЗаполнения(Контекст, ПредупреждатьОбОтсутствии)
	XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	
	// Получаем список значений: XPath - текст ошибки
	Результат = КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(
		XDTOИнформация.Состав, Контекст.ВидКонтактнойИнформации
	);
	
	Если Результат.Количество() = 0 // Нет ошибок
		И ПредупреждатьОбОтсутствии // Но надо предупредить об их отсутствии
		// Дополнительно проверяем на пустоту
		И (Не КонтактнаяИнформацияСлужебный.XDTOКонтактнаяИнформацияЗаполнена(XDTOИнформация))
	Тогда
		Результат.Добавить("/", НСтр("ru = 'Адрес пуст.'"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция РезультатВыбораТолькоКомментария(КонтактнаяИнфо, Представление, Комментарий)
	
	Если ПустаяСтрока(КонтактнаяИнфо) Тогда
		НоваяКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса("");
		// Модифицируем значение "НоваяКонтактная"
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(НоваяКонтактная, Комментарий);
		НоваяКонтактная = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(НоваяКонтактная);
		АдресВведенВСвободнойФорме = Ложь;
		
	ИначеЕсли КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнфо) Тогда
		// Копия
		НоваяКонтактная = КонтактнаяИнфо;
		// Модифицируем значение "НоваяКонтактная"
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(НоваяКонтактная, Комментарий);
		АдресВведенВСвободнойФорме = КонтактнаяИнформацияСлужебный.АдресВведенВСвободнойФорме(КонтактнаяИнфо);
		
	Иначе
		НоваяКонтактная = КонтактнаяИнфо;
		АдресВведенВСвободнойФорме = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения", Новый Структура, Новый СписокЗначений);
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", НоваяКонтактная);
	Результат.ДанныеВыбора.Вставить("Представление", Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме", АдресВведенВСвободнойФорме);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияНаселенногоПунктаСервер(Контекст, ПереформироватьДетально=Истина)
	
	Если Контекст.КодКлассификатораНаселенногоПункта<=0 Тогда
		// Данные вводились вручную, пробуем разбор введенной строки
		АнализКлассификатора = НаселенныеПунктыПоПредставлению(
			Контекст.НаселенныйПункт, Контекст.СкрыватьНеактуальныеАдреса);
		Контекст.НаселенныйПунктНайденТочно = АнализКлассификатора.ДанныеВыбора.Количество()=1;
		Если Контекст.НаселенныйПунктНайденТочно Тогда
			ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
			Контекст.НаселенныйПункт                    = ВыбранноеЗначение.Представление;
		Иначе
			Контекст.УлицаНайденаТочно = Ложь;
			Контекст.ДомНайденТочно    = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Населенный пункт, разбитый по частям
	Если ПереформироватьДетально Тогда
		СформироватьДетальныйНаселенныйПункт(Контекст);
	КонецЕсли;
	
	// Перепроверяем улицу, индекс и представление обновятся там
	ОбработкаИзмененияУлицыСервер(Контекст);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияУлицыСервер(Контекст)
	
	Если Контекст.КодКлассификатораУлицы<=0 Тогда
		// Данные вводились вручную, пробуем разбор введенной строки
		АнализКлассификатора = УлицыПоПредставлению(
			Контекст.КодКлассификатораНаселенногоПункта, Контекст.Улица, Контекст.СкрыватьНеактуальныеАдреса);
		Контекст.УлицаНайденаТочно = АнализКлассификатора.ДанныеВыбора.Количество()=1;
		Если Контекст.УлицаНайденаТочно Тогда
			ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.КодКлассификатораУлицы = ВыбранноеЗначение.Код;
			Контекст.Улица                  = ВыбранноеЗначение.Представление;
			Контекст.УлицаНайденаТочно      = Истина;
		КонецЕсли;
	Иначе
		// Соответствие улицы населенному пункту
		Контекст.УлицаНайденаТочно = ЯвляетсяПотомком(Контекст.КодКлассификатораУлицы, Контекст.КодКлассификатораНаселенногоПункта);
	КонецЕсли;
	
	// Перепроверяем дом, индекс и представление обновятся там
	ОбработкаИзмененияДомаСервер(Контекст);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаИзмененияДомаСервер(Контекст)
	Контекст.ДомНайденТочно = Истина;
	
	ОбновитьИндексИПредставление(Контекст);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСтраныКлиент()
	ЭтоРоссийскийАдрес = Страна = СтранаРоссия;
	
	Элементы.Индекс.Видимость = ЭтоРоссийскийАдрес;
	Элементы.ТипАдреса.ТекущаяСтраница = ?(ЭтоРоссийскийАдрес, Элементы.РоссийскийАдрес, Элементы.ИностранныйАдрес);
	
	// Проверять, вводить в свободной форме и искать по индексу можем только российские адреса
	Элементы.ПроверитьЗаполнениеАдреса.Доступность   = ЭтоРоссийскийАдрес;
	
	Элементы.ВвестиАдресВСвободнойФорме.Доступность             = ЭтоРоссийскийАдрес;
	Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Доступность  = ЭтоРоссийскийАдрес;
	
	Элементы.ЗаполнитьПоПочтовомуИндексу.Доступность            = ЭтоРоссийскийАдрес;
	Элементы.ЗаполнитьПоПочтовомуИндексуВсеДействия.Доступность = ЭтоРоссийскийАдрес;
	
	// Загружать можем только российские адреса
	Если МожноЗагружатьКлассификатор Тогда
		КнопкаПанели = Элементы.Найти("ФормаЗагрузитьКлассификатор");
		Если КнопкаПанели<>Неопределено Тогда
			Элементы.ФормаЗагрузитьКлассификатор.Доступность = ЭтоРоссийскийАдрес;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораЭлемента(ЭлементВид, ЭлементЗначение, Данные)
	ЭлементЗначение.КнопкаВыпадающегоСписка = Данные.МожноПодбиратьЗначения;
	
	СписокТипов = Данные.ВариантыТипа;
	ЭлементВид.КнопкаВыпадающегоСписка = СписокТипов.Количество() > 0;
	Если ЭлементВид.КнопкаВыпадающегоСписка Тогда
		ЭлементВид.СписокВыбора.ЗагрузитьЗначения(СписокТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВизуализироватьКорректностьВыбора()
	
	Элементы.НаселенныйПункт.ЦветФона = ?(НаселенныйПунктНайденТочно, ЦветКорректногоПоля, АвтоЦвет);
	Элементы.Улица.ЦветФона           = ?(УлицаНайденаТочно, ЦветКорректногоПоля, АвтоЦвет);
	
	НужныйЦвет = ?(ДомНайденТочно, ЦветКорректногоПоля, АвтоЦвет);
	
	// Основные
	Элементы.ТипДома.ЦветФона = НужныйЦвет;
	Элементы.Дом.ЦветФона     = НужныйЦвет;
	
	Элементы.ТипСтроения.ЦветФона  = НужныйЦвет;
	Элементы.Строение.ЦветФона     = НужныйЦвет;
	
	Элементы.ТипПомещения.ЦветФона = НужныйЦвет;
	Элементы.Помещение.ЦветФона   = НужныйЦвет;
	
	// Дополнительные
	Для НомерСтроки=0 По ДополнительныеЗдания.Количество()-1 Цикл
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		Элементы["ТипСтроения" + Идентификатор].ЦветФона = НужныйЦвет;
		Элементы["Строение" + Идентификатор].ЦветФона    = НужныйЦвет;
	КонецЦикла;
	
	Для НомерСтроки=0 По ДополнительныеПомещения.Количество()-1 Цикл
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		Элементы["ТипПомещения" + Идентификатор].ЦветФона = НужныйЦвет;
		Элементы["Помещение" + Идентификатор].ЦветФона    = НужныйЦвет;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексИПредставление(Контекст, XDTOКонтактная=Неопределено)
	Инфо = ?(XDTOКонтактная=Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	УстановитьЗначениеИндекса(Контекст, Инфо);
	ЗаполнитьПредставлениеАдреса(Контекст, Инфо);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеИндекса(Контекст, XDTOКонтактная = Неопределено)
	Инфо = ?(XDTOКонтактная = Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	
	Адрес = Инфо.Состав;
	ИндексПоКлассификатору = КонтактнаяИнформацияСлужебный.ОпределитьПочтовыйИндексАдреса(Адрес);
	Если Не Пустаястрока(ИндексПоКлассификатору) Тогда
		Контекст.Индекс = ИндексПоКлассификатору;
		КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(Адрес, ИндексПоКлассификатору);
		XDTOКонтактная.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактная=Неопределено)
	
	// Код страны ставим всегда
	Если ТипЗнч(Контекст.Страна)=Тип("СправочникСсылка.СтраныМира") Тогда
		Контекст.КодСтраны = Контекст.Страна.Код
	Иначе
		Контекст.КодСтраны = "";
	КонецЕсли;
	
	Если Контекст.РазрешитьВводАдресаВСвободнойФорме И Контекст.ПредставлениеАдресаИзменено Тогда
		Возврат;
	КонецЕсли;
		
	Инфо = ?(XDTOКонтактная=Неопределено, КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст), XDTOКонтактная);
	Контекст.ПредставлениеАдреса = Инфо.Представление;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначениеРеквизитовПоКонтактнойИнформации(Контекст, РедактируемаяИнформация)
	
	ДанныеАдреса = РедактируемаяИнформация.Состав;
	
	// Общие реквизиты
	Контекст.ПредставлениеАдреса = РедактируемаяИнформация.Представление;
	Контекст.Комментарий         = РедактируемаяИнформация.Комментарий;
	
	// Копия комментария для анализа измененности
	Контекст.КопияКомментария = Контекст.Комментарий;
	
	// Страна по наименованию
	НаименованиеСтраны = СокрЛП(ДанныеАдреса.Страна);
	Если ПустаяСтрока(НаименованиеСтраны) Тогда
		Контекст.Страна = Справочники.СтраныМира.ПустаяСсылка();
	Иначе
		СсылкаНаРоссию = Справочники.СтраныМира.Россия;
		Если ВРЕГ(НаименованиеСтраны)=ВРЕГ(СокрЛП(СсылкаНаРоссию.Наименование)) Тогда
			Контекст.Страна    = СсылкаНаРоссию;
			Контекст.КодСтраны = СсылкаНаРоссию.Код;
		Иначе
			ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, НаименованиеСтраны);
			Если ДанныеСтраны=Неопределено Тогда
				// Не нашли ни в справочнике, ни в классификаторе
				Контекст.Страна    = Неопределено;
				Контекст.КодСтраны = Неопределено;
			Иначе
				Контекст.Страна    = ДанныеСтраны.Ссылка;
				Контекст.КодСтраны = ДанныеСтраны.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВычисленноеПредставление = КонтактнаяИнформацияСлужебный.СформироватьПредставлениеКонтактнойИнформации(
		РедактируемаяИнформация, Контекст.ВидКонтактнойИнформации);
		
	Если КонтактнаяИнформацияСлужебный.ЭтоРоссийскийАдрес(ДанныеАдреса) Тогда
		Контекст.РазрешитьВводАдресаВСвободнойФорме = Не ПустаяСтрока(ДанныеАдреса.Состав.Адрес_по_документу);
		
		// Дополнительно проверяем случай, когда представление по документу равно вычисленному
		Если Контекст.РазрешитьВводАдресаВСвободнойФорме Тогда
			Если ПредставленияАдресаОдинаковы(ВычисленноеПредставление, ДанныеАдреса.Состав.Адрес_по_документу, Истина) 
				И ПредставленияАдресаОдинаковы(РедактируемаяИнформация.Представление, ДанныеАдреса.Состав.Адрес_по_документу, Истина) 
			Тогда
				Контекст.РазрешитьВводАдресаВСвободнойФорме = Ложь;
				ДанныеАдреса.Состав.Адрес_по_документу      = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.РазрешитьВводАдресаВСвободнойФорме Тогда
			Контекст.ПредставлениеАдреса = ДанныеАдреса.Состав.Адрес_по_документу;
		КонецЕсли;
	Иначе
		Контекст.ПредставлениеИностранногоАдреса = Строка(ДанныеАдреса.Состав);
	КонецЕсли;
	
	// Индекс просто ставим
	Контекст.Индекс = Формат(КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
	
	// Синтетический "Населенный пункт" получаем как представление
	Контекст.НаселенныйПункт = КонтактнаяИнформацияСлужебный.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	Контекст.Улица = КонтактнаяИнформацияСлужебный.ПредставлениеУлицы(ДанныеАдреса);
	
	АнализКлассификатора = КонтактнаяИнформацияСлужебный.НаселенныеПунктыПоПредставлению(Контекст.НаселенныйПункт, , , Контекст.Улица);
	НайденоНаселенных = АнализКлассификатора.ДанныеВыбора.Количество();
	Если НайденоНаселенных = 0 Тогда
		// Не нашли, наименование населенного пункта не трогаем
		Контекст.КодКлассификатораНаселенногоПункта = 0;
		Контекст.НаселенныйПунктНайденТочно         = Ложь;
		
	Иначе
		// Нашли точно или несколько, берем первого
		ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
		Контекст.КодКлассификатораНаселенногоПункта = ВыбранноеЗначение.Код;
		Контекст.НаселенныйПунктНайденТочно         = Истина;
		Контекст.НаселенныйПункт                    = ВыбранноеЗначение.Представление;
		
	КонецЕсли;
	
	СформироватьДетальныйНаселенныйПункт(Контекст, ДанныеАдреса);
	
	// Синтетическую "Улицу" получаем как представление
		
	АнализКлассификатора = КонтактнаяИнформацияСлужебный.УлицыПоПредставлению(Контекст.КодКлассификатораНаселенногоПункта, Контекст.Улица);
	НайденоУлиц = АнализКлассификатора.ДанныеВыбора.Количество();
	Если НайденоУлиц = 1 Тогда
		// Найдено точно
		ВыбранноеЗначение = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
		Контекст.КодКлассификатораУлицы = ВыбранноеЗначение.Код;
		Контекст.УлицаНайденаТочно      = Истина;
		Контекст.Улица                  = ВыбранноеЗначение.Представление;
	Иначе
		// Не найдено или найдено несколько, наименование улицы не трогаем
		Контекст.КодКлассификатораУлицы = 0;
		Контекст.УлицаНайденаТочно      = Ложь;
	КонецЕсли;
	
	// Дом, строение, помещение
	ЗданияИПомещения = КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(ДанныеАдреса);
	
	// Первые два здания выделяем отдельно, остальное в списке
	ТаблицаДанных = ЗданияИПомещения.Здания;
	
	// Вид = 1 - признак дома, владения. Вид = 2, доп строение
	СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		Контекст.ТипДома = СтрокаДома.Тип;
		Контекст.Дом     = СтрокаДома.Значение;
		Контекст.ДомНайденТочно = Истина;
		ТаблицаДанных.Удалить(СтрокаДома);
	Иначе
		Контекст.ДомНайденТочно = Ложь;
	КонецЕсли;
	
	СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		Контекст.ТипСтроения = СтрокаДома.Тип;
		Контекст.Строение    = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
	НомерСтроки  = ТаблицаДанных.Количество();
	Пока НомерСтроки>0 Цикл 
		НомерСтроки = НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеЗдания.Вставить(0), ТаблицаДанных[НомерСтроки]);
	КонецЦикла;
	
	// Первое помещение указываем отдельно, остальные в списке
	ТаблицаДанных = ЗданияИПомещения.Помещения;
	НомерСтроки   = ТаблицаДанных.Количество();
	Если НомерСтроки>0 Тогда
		Контекст.ТипПомещения = ТаблицаДанных[0].Тип;
		Контекст.Помещение    = ТаблицаДанных[0].Значение;
	КонецЕсли;
	Пока НомерСтроки>1 Цикл 
		НомерСтроки = НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Контекст.ДополнительныеПомещения.Вставить(0), ТаблицаДанных[НомерСтроки]);
	КонецЦикла;
	
	// Если переданное представление отличается от вычисленного, то адрес изменен
	Если Не Контекст.РазрешитьВводАдресаВСвободнойФорме И Не ПредставленияАдресаОдинаковы(Контекст.ПредставлениеАдреса, ВычисленноеПредставление) Тогда
		Контекст.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст)
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	Результат.Комментарий = Контекст.Комментарий;
	
	Результат.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") );
	Адрес = Результат.Состав;
	
	Адрес.Страна = Строка(Контекст.Страна);
	Если ВРег(Контекст.Страна)<>ВРег(Контекст.СтранаРоссия.Наименование) Тогда
		Адрес.Состав = Контекст.ПредставлениеИностранногоАдреса;
		Результат.Представление = КонтактнаяИнформацияСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
		Возврат Результат;
	КонецЕсли;
	
	Адрес.Состав = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") );
	АдресРФ = Адрес.Состав;
	
	// Населенный пункт
	Если Контекст.КодКлассификатораНаселенногоПункта>0 Тогда
		КонтактнаяИнформацияСлужебный.УстановитьНаселенныйПунктАдресаПоКоду(
			АдресРФ, Контекст.КодКлассификатораНаселенногоПункта);
		// Добавляем возможно непустые данные
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			ТекущееЗначение = КонтактнаяИнформацияСлужебный.ЗначениеСвойстваПоXPath(АдресРФ, ЧастьПункта.ПутьXPath);
			Если ПустаяСтрока(ТекущееЗначение) И (Не ПустаяСтрока(ЧастьПункта.Значение)) Тогда
				КонтактнаяИнформацияСлужебный.УстановитьСвойствоПоXPath(АдресРФ, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НетДетальныхДанных = Истина;
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			ЧастьПункта = КлючЗначение.Значение;
			Если Не ПустаяСтрока(ЧастьПункта.Значение) Тогда
				НетДетальныхДанных = Ложь;
			КонецЕсли;
			КонтактнаяИнформацияСлужебный.УстановитьСвойствоПоXPath(АдресРФ, ЧастьПункта.ПутьXPath, ЧастьПункта.Значение);
		КонецЦикла;
		Если НетДетальныхДанных Тогда
			АдресРФ.НаселПункт = Контекст.НаселенныйПункт;
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.КодКлассификатораУлицы>0 Тогда
		КонтактнаяИнформацияСлужебный.УстановитьУлицуАдресаПоКоду(АдресРФ, Контекст.КодКлассификатораУлицы);
	Иначе
		АдресРФ.Улица = Контекст.Улица;
	КонецЕсли;
	
	// Здания и помещения
	ТипТаблицаЗначений = Тип("ТаблицаЗначений");
	Если ТипЗнч(Контекст.ДополнительныеЗдания)=ТипТаблицаЗначений Тогда
		ТаблицаЗданий = Контекст.ДополнительныеЗдания.Скопировать();
	Иначе
		ТаблицаЗданий = ДанныеФормыВЗначение(Контекст.ДополнительныеЗдания, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Дом) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипДома;
		СтрокаЗдания.Значение = Контекст.Дом;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Строение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипСтроения;
		СтрокаЗдания.Значение = Контекст.Строение;
	КонецЕсли;
	
	Если ТипЗнч(Контекст.ДополнительныеПомещения)=ТипТаблицаЗначений Тогда
		ТаблицаПомещений = Контекст.ДополнительныеПомещения.Скопировать();
	Иначе
		ТаблицаПомещений = ДанныеФормыВЗначение(Контекст.ДополнительныеПомещения, ТипТаблицаЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Контекст.Помещение) Тогда
		СтрокаЗдания = ТаблицаЗданий.Вставить(0);
		СтрокаЗдания.Тип      = Контекст.ТипПомещения;
		СтрокаЗдания.Значение = Контекст.Помещение;
	КонецЕсли;
	
	КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(АдресРФ, 
		Новый Структура("Здания, Помещения", ТаблицаЗданий, ТаблицаПомещений));
	
	// Индекс
	КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(АдресРФ, Контекст.Индекс);
	
	// Представление и свободный ввод адреса
	РасчетноеПредставление = КонтактнаяИнформацияСлужебный.ПредставлениеАдреса(Адрес, Контекст.ВидКонтактнойИнформации);
	ВведенноеПредставление = СокрЛП(Контекст.ПредставлениеАдреса);
	Если Контекст.РазрешитьВводАдресаВСвободнойФорме И Контекст.ПредставлениеАдресаИзменено Тогда
		Если ПредставленияАдресаОдинаковы(ВведенноеПредставление, РасчетноеПредставление) Тогда
			Результат.Представление = РасчетноеПредставление;
			АдресРФ.Сбросить("Адрес_по_документу");
		Иначе
			Результат.Представление    = ВведенноеПредставление;
			АдресРФ.Адрес_по_документу = ВведенноеПредставление;
		КонецЕсли;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
		Результат.Представление = РасчетноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Перезаполняет структуру "НаселенныйПунктДетально" по текущим данным адреса или по данным реквизитов формы
&НаСервереБезКонтекста
Процедура СформироватьДетальныйНаселенныйПункт(Контекст, XDTOДанныеАдреса=Неопределено)
	
	Если XDTOДанныеАдреса=Неопределено И Контекст.КодКлассификатораНаселенногоПункта>0 Тогда
		// Перезаполняем
		Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт(
			Контекст.КодКлассификатораНаселенногоПункта);
		Возврат;
	ИначеЕсли ТипЗнч(XDTOДанныеАдреса)=Тип("Строка") Тогда
		// Попытка разбора
		АнализКлассификатора = НаселенныеПунктыПоПредставлению(XDTOДанныеАдреса, Контекст.СкрыватьНеактуальныеАдреса);
		Если АнализКлассификатора.ДанныеВыбора.Количество()=1 Тогда
			Вариант = АнализКлассификатора.ДанныеВыбора[0].Значение.Значение;
			Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт(Вариант.Код);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт();
	
	Если XDTOДанныеАдреса=Неопределено Тогда
		// Из реквизитов формы все идет в предопределенный детальный пункт
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			Если Значение.Предопределенный Тогда
				Значение.Значение = Контекст.НаселенныйПункт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Из переданного XDTO
	АдресРФ = КонтактнаяИнформацияСлужебный.РоссийскийАдрес(XDTOДанныеАдреса);
	Если АдресРФ<>Неопределено Тогда
		Для Каждого КлючЗначение Из Контекст.НаселенныйПунктДетально Цикл
			Значение = КлючЗначение.Значение;
			ЗначениеЗначения = КонтактнаяИнформацияСлужебный.ЗначениеСвойстваПоXPath(АдресРФ, Значение.ПутьXPath);
			
			Части = КонтактнаяИнформацияКлиентСервер.НаименованиеСокращение(ЗначениеЗначения);
			Значение.Наименование = Части.Наименование;
			Значение.Сокращение   = Части.Сокращение;
			Значение.Значение     = ЗначениеЗначения;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппуЭлементов(Группа)
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьГруппуЭлементов(Элемент);
		КонецЕсли;
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Элементы.Удалить(Группа);
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеЗданияИПомещения() 
	Возврат Новый Структура("ИмяЗдания, ИмяПомещения",
		ОтрисоватьДополнительныеЗдания(),
		ОтрисоватьДополнительныеПомещения());
КонецФункции

&НаСервере
Функция ОтрисоватьДополнительныеЗдания() 
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаСтроение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипСтроения" + Идентификатор);
				Удалять.Добавить("Строение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьСтроение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоЗданий = ДополнительныеЗдания.Количество()-1;
	КоличествоТипов  = Элементы.ТипСтроения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоЗданий Цикл
		Строка = ДополнительныеЗдания[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
		
		Если НомерСтроки=КоличествоЗданий Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипСтроенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипСтроения"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаЗданий.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(СтрокаЗданий.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтроениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Строение"));
	СтрокаЗданий = ДополнительныеЗдания.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ОбновитьИндексИПредставление(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОтрисоватьДополнительныеПомещения()
	
	Удалять = Новый Массив;
	Пока Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Количество()>0 Цикл
		Группа = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Группа)=Тип("ГруппаФормы") Тогда
			Идентификатор = Сред(Группа.Имя, 1 + СтрДлина("ГруппаПомещение"));
			Если Не ПустаяСтрока(Идентификатор) Тогда
				Удалять.Добавить("ТипПомещения" + Идентификатор);
				Удалять.Добавить("Помещение"    + Идентификатор);
				КомандаУдалить = Команды.Найти("УдалитьПомещение" + Идентификатор);
				Если КомандаУдалить<>Неопределено Тогда
					Команды.Удалить(КомандаУдалить);
				КонецЕсли;
			КонецЕсли;
			УдалитьГруппуЭлементов(Группа);
		Иначе
			Элементы.Удалить(Группа);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(,Удалять);
	
	КоличествоПомещений = ДополнительныеПомещения.Количество()-1;
	КоличествоТипов     = Элементы.ТипПомещения.СписокВыбора.Количество()-2;
	
	Результат = Неопределено;
	Для НомерСтроки=0 По КоличествоПомещений Цикл
		Строка = ДополнительныеПомещения[НомерСтроки];
		Идентификатор = Формат(НомерСтроки, "ЧН=; ЧГ=");
		
		НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещениеНачальное, , "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
		
		Если НомерСтроки=КоличествоПомещений Тогда
			Результат = НовыйЭлемент.Имя;
		КонецЕсли;
		
		Добавлять = Новый Массив;
		Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя, Новый ОписаниеТипов("Строка")));
		Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
		
		ИзменитьРеквизиты(Добавлять);
		ЭтотОбъект[НовыйТип.Имя]     = Строка.Тип;
		ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Значение;
		
		НовыйТип.ПутьКДанным     = НовыйТип.Имя;
		НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипПомещенияПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("ТипПомещения"));
	СтрокаПомещений = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаПомещений.Тип = ЭтотОбъект[Элемент.Имя];
	СтрокаПомещений.ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(СтрокаПомещений.Тип);
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПомещениеПриИзменении(Элемент)
	НомерСтроки = Сред(Элемент.Имя, 1 + СтрДлина("Помещение"));
	СтрокаЗданий = ДополнительныеПомещения.Получить(НомерСтроки);
	СтрокаЗданий.Значение = ЭтотОбъект[Элемент.Имя];
	
	Контекст = КонтекстФормыКлиент();
	ЗаполнитьПредставлениеАдреса(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте 
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии)
	
	ОчиститьСообщения();
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 И ПредупреждатьОбОтсутствии Тогда
		// Нет ошибок
		ПоказатьПредупреждение(, НСтр("ru='Адрес введен корректно.'"));
		Возврат;
	ИначеЕсли КоличествоОшибок = 1 Тогда
		МестоОшибки = СписокОшибок[0].Значение;
		Если ПустаяСтрока(МестоОшибки) Или МестоОшибки = "/" Тогда
			// Одна ошибка на весь адрес, не привязанная к полю
			ПоказатьПредупреждение(, СписокОшибок[0].Представление);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Сообщаем список с привязкой к полям
	Для Каждого Элемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Элемент.Представление,,,ПутьКДаннымФормыПоПутиXPath(Элемент.Значение)
		);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ПутьКДаннымФормыПоПутиXPath(ПутьXPath) 
	
	Если ПутьXPath = "СубъектРФ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Округ" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathРайона() Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Город" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "ВнутригРайон" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "НаселПункт" Тогда
		Возврат "НаселенныйПункт";
		
	ИначеЕсли ПутьXPath = "Улица" Тогда
		Возврат "Улица";
		
	ИначеЕсли ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса() Тогда
		Возврат "Индекс";
		
	КонецЕсли;
	
	// Дополнительно добавленные строения и помещения
	Фильтр = Новый Структура("ПутьXPath", ПутьXPath);
	
	Строки = ДополнительныеЗдания.НайтиСтроки(Фильтр);
	Если Строки.Количество() > 0 Тогда
		// Первое непустое
		Для Каждого СтрокаЗдания Из Строки Цикл
			ИмяРеквизита = "Строение" + Формат(ДополнительныеЗдания.Индекс(СтрокаЗдания), "ЧН=; ЧГ=");
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
				Возврат ИмяРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Строки = ДополнительныеПомещения.НайтиСтроки(Фильтр); 
	Если Строки.Количество() > 0 Тогда
		// Первое непустое
		Для Каждого СтрокаПомещения Из Строки Цикл
			ИмяРеквизита = "Помещение" + Формат(ДополнительныеПомещения.Индекс(СтрокаПомещения), "ЧН=; ЧГ=");
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
				Возврат ИмяРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Варианты дома
	Для Каждого ЭлементСписка Из Элементы.ТипДома.СписокВыбора Цикл
		Если ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Дом";
		КонецЕсли;
	КонецЦикла;
	
	// Варианты корпуса
	Для Каждого ЭлементСписка Из Элементы.ТипСтроения.СписокВыбора Цикл
		Если ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Строение";
		КонецЕсли;
	КонецЦикла;
	
	// Варианты помещения
	Для Каждого ЭлементСписка Из Элементы.ТипПомещения.СписокВыбора Цикл
		Если ПутьXPath = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(ЭлементСписка.Значение) Тогда
			Возврат "Помещение";
		КонецЕсли;
	КонецЦикла;
		
	// Не нашли
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	
	Контекст = КонтекстФормыКлиент();
	ОчиститьАдресСервер(Контекст);
	КонтекстФормыКлиент(Контекст);
	
	ВизуализироватьКорректностьВыбора();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьАдресСервер(Контекст)
	
	Если Контекст.Страна<>Контекст.СтранаРоссия Тогда
		Контекст.ПредставлениеИностранногоАдреса = "";
		Возврат;
	КонецЕсли;
	
	Контекст.Комментарий = "";
	
	Контекст.Индекс = Неопределено;
	
	Контекст.КодКлассификатораНаселенногоПункта = 0;
	Контекст.НаселенныйПунктНайденТочно         = Ложь;
	Контекст.НаселенныйПункт                    = "";
	Контекст.НаселенныйПунктДетально = КонтактнаяИнформацияСлужебный.СписокРеквизитовНаселенныйПункт();
	
	Контекст.КодКлассификатораУлицы = 0;
	Контекст.УлицаНайденаТочно      = Ложь;
	Контекст.Улица = "";
	
	Контекст.ТипДома      = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома.СписокВыбора);
	Контекст.ТипСтроения  = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения.СписокВыбора);
	Контекст.ТипПомещения = КонтактнаяИнформацияКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения.СписокВыбора);
	
	Контекст.Дом       = "";
	Контекст.Строение  = "";
	Контекст.Помещение = "";
	
	Контекст.ДомНайденТочно = Ложь;
	
	Контекст.ДополнительныеЗдания.Очистить();
	Контекст.ДополнительныеПомещения.Очистить();
	
	XDTOКонтактнаяИнфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Контекст);
	СформироватьДетальныйНаселенныйПункт(Контекст, XDTOКонтактнаяИнфо.Состав);
	ЗаполнитьПредставлениеАдреса(Контекст, XDTOКонтактнаяИнфо);
	
	// Очищаем непосредственно на форме, в контексте уже очищено
	ДополнительныеЗдания.Очистить();
	ДополнительныеПомещения.Очистить();
	ОтрисоватьДополнительныеЗданияИПомещения();
КонецПроцедуры

&НаКлиенте
Функция НеиспользованныеЭлементыДополнительнойТаблицы(ТаблицаДанных, ЭлементИсточник, ЗначениеМаркера)
	Использованные = Новый Соответствие;
	Использованные.Вставить(ЭтотОбъект[ЭлементИсточник.Имя], Истина);
	Для Каждого Строка Из ТаблицаДанных Цикл
		Использованные.Вставить(Строка.Тип, Истина);
	КонецЦикла;
	
	Результат = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ЭлементИсточник.СписокВыбора Цикл
		Если Использованные[ЭлементСписка.Значение]=Неопределено Тогда
			Результат.Добавить(ЗначениеМаркера, ЭлементСписка.Значение, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция МожноДобавлятьДополнительныеОбъекты()
	ВариантыСтроения  = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеЗдания, Элементы.ТипСтроения, 1);
	ВариантыПомещения = НеиспользованныеЭлементыДополнительнойТаблицы(ДополнительныеПомещения, Элементы.ТипПомещения, 2);
	Возврат ВариантыСтроения.Количество() + ВариантыПомещения.Количество() > 0
КонецФункции

&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	КлючСохраненияПоложенияОкна = Строка(Страна);
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеЗдания Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "/" + Формат(Количество, "ЧН=; ЧГ=");
	
	Количество = 0;
	Для Каждого Строка Из ДополнительныеПомещения Цикл
		Если Не ПустаяСтрока(Строка.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	КлючСохраненияПоложенияОкна = КлючСохраненияПоложенияОкна + "/" + Формат(Количество, "ЧН=; ЧГ=");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция РезультатыАвтоПодбораНаселенногоПункта(Текст, СкрыватьНеактуальныеАдреса=Ложь, ПредупреждатьОНеактуальных=Истина)
	Возврат КонтактнаяИнформацияСлужебный.РезультатыАвтоПодбораНаселенногоПункта(
		Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных);
КонецФункции

&НаСервереБезКонтекста
Функция НаселенныеПунктыПоПредставлению(Текст, СкрыватьНеактуальныеАдреса=Ложь, ВыбиратьСтрок=50)
	Возврат КонтактнаяИнформацияСлужебный.НаселенныеПунктыПоПредставлению(
		Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок);
КонецФункции

&НаСервереБезКонтекста
Функция РезультатыАвтоПодбораУлицы(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса=Ложь, ПредупреждатьОНеактуальных=Истина)
	Возврат КонтактнаяИнформацияСлужебный.РезультатыАвтоПодбораУлицы(
		КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных);
КонецФункции

&НаСервереБезКонтекста
Функция УлицыПоПредставлению(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса=Ложь, ВыбиратьСтрок=50)
	Возврат КонтактнаяИнформацияСлужебный.УлицыПоПредставлению(
		КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок);
КонецФункции

&НаСервереБезКонтекста
Функция ЯвляетсяПотомком(КодКлассификатораУлицы, КодКлассификатораНаселенногоПункта)
	Возврат КонтактнаяИнформацияСлужебный.ЯвляетсяПотомком(КодКлассификатораУлицы, КодКлассификатораНаселенногоПункта);
КонецФункции

// Преобразовываем Реквизиты формы <-> Структура
&НаКлиенте
Функция КонтекстФормыКлиент(НовыеДанные=Неопределено)
	СписокРеквизитов = "
		|ВидКонтактнойИнформации,
		|Страна, КодСтраны, СтранаРоссия, СкрыватьНеактуальныеАдреса,
		|Индекс, ПредставлениеАдреса, ПредставлениеИностранногоАдреса, Комментарий, КопияКомментария,
		|НаселенныйПункт, КодКлассификатораНаселенногоПункта, НаселенныйПунктДетально, НаселенныйПунктНайденТочно,
		|Улица, КодКлассификатораУлицы, УлицаНайденаТочно,
		|ТипДома, Дом, ДомНайденТочно, ТипСтроения, Строение, ТипПомещения, Помещение,
		|РазрешитьВводАдресаВСвободнойФорме, ПредставлениеАдресаИзменено,
		|Модифицированность 
		|";
		
	СписокКоллекций = "ДополнительныеЗдания, ДополнительныеПомещения";
	
	Если НовыеДанные=Неопределено Тогда
		// Читаем
		Результат = Новый Структура(СписокРеквизитов + "," + СписокКоллекций);
		ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект, СписокРеквизитов + "," + СписокКоллекций);
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеДанные, СписокРеквизитов, СписокКоллекций);
	ЗаполнитьЗначенияКоллекций(ЭтотОбъект, НовыеДанные, СписокКоллекций);
	
	Возврат НовыеДанные;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗначенияКоллекций(Приемник, Источник, СписокСвойств)
	Для Каждого КлючЗначение Из Новый Структура(СписокСвойств) Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		СвойствоПриемник = Приемник[ИмяСвойства];
		СвойствоПриемник.Очистить();
		Для Каждого Значение Из Источник[ИмяСвойства] Цикл
			ЗаполнитьЗначенияСвойств(СвойствоПриемник.Добавить(), Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Разрешение элементов для ввода в свободном формате
//
// Параметры:
//    - Режим                    - Булево - Истина - можно редактировать представление адреса, Ложь - нельзя
//    - ФормироватьПредставление - Булево - необязательный флаг. По умолчанию установлен.
//
&НаКлиенте
Процедура СостояниеВводаПредставленияАдреса(Режим, ФормироватьПредставление=Истина)
	Элемент = Элементы.ПредставлениеАдреса;
	
	Элемент.РедактированиеТекста = Режим;
	Если Режим Тогда
		Элемент.РедактированиеТекста = Истина;
		Элемент.ЦветФона = АвтоЦвет;
	Иначе
		Элемент.РедактированиеТекста = Ложь;
		Элемент.ЦветФона = ЦветФонаФормы;
		
		Если ФормироватьПредставление Тогда
			Контекст = КонтекстФормыКлиент();
			ЗаполнитьПредставлениеАдреса(Контекст);
			КонтекстФормыКлиент(Контекст);
		КонецЕсли;
	КонецЕсли;
	
	// Остальные поля ввода
	СостояниеГруппыВвода(Элементы.СтранаАдреса, Не Режим);
	СостояниеГруппыВвода(Элементы.ТипАдреса, Не Режим);
	
	// Пометка режима
	Элементы.ВвестиАдресВСвободнойФорме.Пометка            = Режим;
	Элементы.ВвестиАдресВСвободнойФормеВсеДействия.Пометка = Режим;
	
	Элементы.ПредставлениеАдресаКонтекстноеМенюВвестиАдресВСвободнойФорме.Пометка = Режим;
	
	// Проверять адрес, введенный вручную нельзя
	Если Страна = СтранаРоссия Тогда
		Элементы.ПроверитьЗаполнениеАдреса.Доступность = Не Режим;
	КонецЕсли;
	
	// Страна - по прежнему управляющее поле
	Если Элементы.Страна.Доступность Тогда
		Элементы.Страна.ЦветФона = ЦветФонаУправляющегоПоля;
	КонецЕсли;
	
	// Переключаем заголовок представления и текущий элемент ввода для индикации режима
	Если Режим Тогда
		Элементы.ПредставлениеАдреса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ПредставлениеАдреса.Заголовок          = НСтр("ru='Адрес в свободной форме'");
		
		Элементы.СтранаАдреса.Отображение        = ОтображениеОбычнойГруппы.Нет;
		
		ТекущийЭлемент = Элементы.ПредставлениеАдреса;
	Иначе 
		Элементы.ПредставлениеАдреса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ПредставлениеАдреса.Заголовок          = "";
		
		Элементы.СтранаАдреса.Отображение        = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ТекущийЭлемент = Элементы.НаселенныйПункт;
	КонецЕсли;
	
КонецПроцедуры

// Установка доступности элементов в группе
//
// Параметры:
//    - Группа - ГруппаФормы - Контейнер для элементов.
//    - Режим  - Булево      - Флаг разрешения элементов. Истина - разрешены, Ложь - нет
//
&НаКлиенте
Процедура СостояниеГруппыВвода(Группа, Режим)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда
			Если Элемент <> Элементы.ИностранныйАдрес Тогда
				СостояниеГруппыВвода(Элемент, Режим);
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") Тогда
			Если Элемент = Элементы.ДобавитьОбъект Тогда
				Элемент.Доступность = Режим И МожноДобавлятьДополнительныеОбъекты();
			Иначе
				Элемент.Доступность = Режим;
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если Элемент <> Элементы.ПредставлениеАдреса Тогда
				Элемент.ТолькоПросмотр = Не Режим;
				Элемент.ЦветФона = ?(Режим, АвтоЦвет, ЦветФонаФормы);
			КонецЕсли;
			
		Иначе 
			Элемент.Доступность = Режим;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Представление разрешено менять только при вводе в режиме ввода в свободной форме
// Поэтому необходимо привести остальные поля к измененному представлению
// Страну не трогаем, режим свободного ввода возможен только в России
//
&НаСервере
Процедура ПредставлениеАдресаПриИзмененииСервер()
	
	// Пытаемся разобрать заново
	XDTOКонтактная = КонтактнаяИнформацияСлужебный.ПарсингКонтактнойИнформации(ПредставлениеАдреса, ВидКонтактнойИнформации);
	
	// Представление
	КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(XDTOКонтактная, ПредставлениеАдреса);
	
	// Комментарий
	КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(XDTOКонтактная, Комментарий);
	
	// И проставляем в реквизиты, кроме страны и представления
	ТекущееПредставление = ПредставлениеАдреса;
	ТекущаяСтрана        = Страна;
	
	ОчиститьАдресСервер(ЭтотОбъект);
	
	// Возможно будет отключен свободного ввода
	ЗначениеРеквизитовПоКонтактнойИнформации(ЭтотОбъект, XDTOКонтактная);
	
	ПредставлениеАдреса = ТекущееПредставление;
	Страна              = ТекущаяСтрана;
	
	ОтрисоватьДополнительныеЗданияИПомещения();
	
	// Включаем режим свободного ввода принудительно
	РазрешитьВводАдресаВСвободнойФорме = Истина;
	Модифицированность = Истина;
КонецПроцедуры

// Сравниваем два представления на эквивалентность
&НаСервереБезКонтекста
Функция ПредставленияАдресаОдинаковы(Знач Представление1, Знач Представление2, Знач ИгнорироватьЗнакНомера=Ложь)
	Возврат ХешПредставления(Представление1, ИгнорироватьЗнакНомера)=ХешПредставления(Представление2, ИгнорироватьЗнакНомера);
КонецФункции

&НаСервереБезКонтекста
Функция ХешПредставления(Знач Представление, Знач ИгнорироватьЗнакНомера=Ложь)
	Результат = СтрЗаменить(Представление, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, " ", "");
	Если ИгнорироватьЗнакНомера Тогда
		Результат = СтрЗаменить(Результат, "№", "");
	КонецЕсли;
	Возврат ВРег(Результат);
КонецФункции

#КонецОбласти
