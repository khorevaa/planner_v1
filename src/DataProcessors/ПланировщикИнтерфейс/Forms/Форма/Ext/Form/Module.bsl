
#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияФормы()
	
	// Обработка режима подбора времени
	Если ЭтотОбъект.Параметры.РежимПодбора Тогда
		ТекДатаСеанса	= ТекущаяДатаСеанса();
		
		Событие = Новый Структура;
		Событие.Вставить("Идентификатор"	, "newEvent");
		Событие.Вставить("Наименование"		, "Новое событие");
		Событие.Вставить("ВесьДень"			, Ложь);
		Событие.Вставить("Начало"			, НачалоЧаса(ТекДатаСеанса));
		Событие.Вставить("Конец"			, НачалоЧаса(ТекДатаСеанса) + 1800);
		Событие.Вставить("Редактирование"	, Истина);
		Событие.Вставить("ЦветФонаHEX"		, "#e6e6fa");
		Событие.Вставить("ЦветТекстаHEX"	, "#1b1b1b");
		Событие.Вставить("Ссылка"			, Неопределено);
		Событие.Вставить("Картинка"			, "");

		ЭтотОбъект.НовоеСобытие = Новый ФиксированнаяСтруктура(Событие);
	КонецЕсли;
	
	// Базовые настройки
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийПользователь) Тогда
		Объект.ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если Объект.ВидКалендаря = 0 Тогда
		Объект.ВидКалендаря = 2;
	КонецЕсли;
	Если Объект.ДатаКалендаря = Дата(1, 1, 1) Тогда
		Объект.ДатаКалендаря = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Заполнение списка календарей
	Если Объект.Календари.Количество() = 0 И Объект.ОбщиеКалендари.Количество() = 0 Тогда
		ЗаполнитьСписокКалендарейНаСервере();
	КонецЕсли;

	// Границы начала и окончания рабочего времени
	НачРабочегоВремениЧас	= 0;
	КонРабочегоВремениЧас	= 24;
	ПланировщикИнтерфейсПереопределяемый.УстановитьРабочееВремя(ЭтотОбъект, НачРабочегоВремениЧас, КонРабочегоВремениЧас);
	
	Объект.ИмяРасширенияИнтерфейса	= ПланировщикИнтерфейсПереопределяемый.ИмяРасширенияИнтерфейса();
	Объект.НачалоРабочегоВремени	= НачРабочегоВремениЧас * 3600;
	Объект.ОкончаниеРабочегоВремени	= КонРабочегоВремениЧас * 3600 - ?(КонРабочегоВремениЧас = 24, 1, 0);
	ЭтотОбъект.РабочееВремя			= РабочееВремяУстановлено(ЭтотОбъект);
	ЭтотОбъект.НовоеСобытие			= Новый ФиксированнаяСтруктура;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРеквизита(Форма, ИмяРеквизитаФормы = "")
	#Если Клиент Тогда
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	#Иначе
		ДатаСеанса = ТекущаяДатаСеанса();
	#КонецЕсли
	
	Если ИмяРеквизитаФормы = "СтраницыВидимостьДанных" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ТекСтраница = ?(Форма.Объект.ВидКалендаря = 4, Форма.Элементы.СтраницаПовесткаДня, Форма.Элементы.СтраницаДокументHTML);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"СтраницыВидимостьДанных", "ТекущаяСтраница", ТекСтраница);
	КонецЕсли;

	Если ИмяРеквизитаФормы = "Сегодня" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Сегодня", "Доступность", НЕ (НачалоДня(Форма.Объект.ДатаКалендаря) = НачалоДня(ДатаСеанса)));
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "День" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"День", "Доступность", НЕ (Форма.Объект.ВидКалендаря = 1));
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "Неделя" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Неделя", "Доступность", НЕ (Форма.Объект.ВидКалендаря = 2));
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "Месяц" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Месяц", "Доступность", НЕ (Форма.Объект.ВидКалендаря = 3));
	КонецЕсли;
	
	Если ИмяРеквизитаФормы = "ПовесткаДня" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ПовесткаДня", "Доступность", НЕ (Форма.Объект.ВидКалендаря = 4));
	КонецЕсли;	
		
	Если ИмяРеквизитаФормы = "ГруппаЛеваяЦентральнаяЧасть" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ГруппаЛеваяЦентральнаяЧасть", "Видимость", Форма.Элементы.ЛеваяЧасть.Пометка И НЕ Форма.Параметры.РежимПодбора);
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "ЛеваяЧасть" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ЛеваяЧасть", "Видимость", НЕ Форма.Параметры.РежимПодбора);
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "РабочееВремя" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"РабочееВремя", "Доступность", (Форма.Объект.ВидКалендаря < 3) И РабочееВремяУстановлено(Форма));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"РабочееВремя", "Пометка", Форма.РабочееВремя);
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "Создать" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Создать", "Видимость", НЕ Форма.Параметры.РежимПодбора);
	КонецЕсли;
		
	Если ИмяРеквизитаФормы = "Записать" ИЛИ ПустаяСтрока(ИмяРеквизитаФормы) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"Записать", "Видимость", Форма.Параметры.РежимПодбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма, ИмяРеквизитаФормы = "")
	Если Найти(ИмяРеквизитаФормы, ",") > 0 Тогда
		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизитаФормы, ",");
		Для Каждого ИмяРеквизита Из МассивИмен Цикл
			УстановитьДоступностьРеквизита(Форма, СокрЛП(ИмяРеквизита));
		КонецЦикла;
	Иначе 
		УстановитьДоступностьРеквизита(Форма, ИмяРеквизитаФормы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Дата календаря

&НаКлиенте
Процедура ДатаКалендаряПриИзменении(Элемент)
	НачДняДатаКалендаря = НачалоДня(Объект.ДатаКалендаря);
	Если НачДняДатаКалендаря >= Объект.НачалоПериода И НачДняДатаКалендаря <= Объект.ОкончаниеПериода Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступность(ЭтотОбъект, "Сегодня");
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
КонецПроцедуры

// Календари

&НаКлиенте
Процедура КалендариВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Календари.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.Календарь);
КонецПроцедуры

&НаКлиенте
Процедура КалендариИспользованиеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеКалендариИспользованиеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

// Страница HTML

&НаКлиенте
Процедура СтраницаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтраницаHTMLПланировщикаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументHTMLПланировщик

&НаКлиенте
Процедура ПланировщикВыбор(ДатаНачала, ДатаОкончания, ВесьДень)
	ПланировщикИнтерфейсКлиентПереопределяемый.ПланировщикВыбор(ЭтотОбъект, ДатаНачала, ДатаОкончания, ВесьДень);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикСобытиеВыбор(Идентификатор)
	Структура = ПолучитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор);
	Если Структура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланировщикИнтерфейсКлиентПереопределяемый.ПланировщикСобытиеВыбор(ЭтотОбъект, Структура);
	
	УстановитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор, Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикСобытиеПриОкончанииПеретаскивания(Идентификатор, КоличествоДней, КоличествоМинут, ВесьДень)
	Структура = ПолучитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор);
	Если Структура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланировщикИнтерфейсКлиентПереопределяемый.ПланировщикСобытиеПриОкончанииПеретаскивания(ЭтотОбъект, Структура, КоличествоДней, КоличествоМинут, ВесьДень);
	
	УстановитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор, Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикСобытиеПриОкончанииИзменениеРазмера(Идентификатор, КоличествоДней, КоличествоМинут)
	Структура = ПолучитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор);
	Если Структура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланировщикИнтерфейсКлиентПереопределяемый.ПланировщикСобытиеПриОкончанииИзменениеРазмера(ЭтотОбъект, Структура, КоличествоДней, КоличествоМинут);
	
	УстановитьРасшифровкуПоИдентификатору(ЭтотОбъект, Идентификатор, Структура);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикСобытиеПриКонтекстномМеню(ИмяКоманды, Идентификатор) Экспорт
	//Если ИмяКоманды = "Информация" Тогда
	//	ПланировщикСобытиеВыбор(Идентификатор);
	//ИначеЕсли ИмяКоманды = "Удалить" Тогда
	//	УдалитьСобытие(Идентификатор);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПланировщикПриИзмененииВидаКалендаря(ТекущийВид, ТекущаяДата)
	
	// При использовании плагина DHTMLX необходимо отслеживать программное изменение вида календаря
	Если ТекущийВид = "day" И Объект.ВидКалендаря <> 1 Тогда
		Объект.ВидКалендаря		= 1;
		Объект.ДатаКалендаря	= Дата(ТекущаяДата);
		
		УстановитьДоступность(ЭтотОбъект, "Сегодня, День, Месяц");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПовесткаДня

&НаКлиенте
Процедура ТаблицаПовесткаДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПовесткаДня.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Структура = ПолучитьРасшифровкуПоИдентификатору(ЭтотОбъект, ТекущиеДанные.Идентификатор);
	Если Структура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланировщикИнтерфейсКлиентПереопределяемый.ПланировщикСобытиеВыбор(ЭтотОбъект, Структура);
	
	УстановитьРасшифровкуПоИдентификатору(ЭтотОбъект, ТекущиеДанные.Идентификатор, Структура);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Заполнение данных формы
	ИнициализацияФормы();
	
	// Вывод данных
	УстановкаПериодаКалендаря(ЭтотОбъект);
	ДобавитьУсловноеОформлениеТекущеДатыНаСервере();
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Первичное заполнение данных
	ЗаполнитьТаблицуСобытийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступность(ЭтотОбъект);
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	
	// Установка js и css файлов
	ПроверитьНаличиеСкриптовПланировщика();
	
	// Установка текущей страницы
	ЗаполнитьТекущуюСтраницуПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсКлиентПереопределяемый.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсКлиентПереопределяемый.ПриЗакрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	// Переопределяемый модуль
	ПланировщикИнтерфейсКлиентПереопределяемый.ОбработкаЗаписиНового(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЛеваяЧасть(Команда)
	Элементы.ЛеваяЧасть.Пометка = НЕ Элементы.ЛеваяЧасть.Пометка;
	
	УстановитьДоступность(ЭтотОбъект, "ГруппаЛеваяЦентральнаяЧасть");
КонецПроцедуры

// Управление календарем

&НаКлиенте
Процедура Сегодня(Команда) Экспорт
	Объект.ДатаКалендаря = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "Сегодня");
КонецПроцедуры

&НаКлиенте
Процедура СледующийПериод(Команда) Экспорт
	Если Объект.ВидКалендаря = 1 Тогда
		Объект.ДатаКалендаря = КонецДня(Объект.ДатаКалендаря) + 1;
	ИначеЕсли Объект.ВидКалендаря = 2 Тогда
		Объект.ДатаКалендаря = КонецНедели(Объект.ДатаКалендаря) + 1;
	ИначеЕсли Объект.ВидКалендаря = 3 Тогда
		Объект.ДатаКалендаря = КонецМесяца(Объект.ДатаКалендаря) + 1;
	ИначеЕсли Объект.ВидКалендаря = 4 Тогда
		Объект.ДатаКалендаря = ?(Объект.ПериодПовесткиДня = 0, КонецНедели(Объект.ДатаКалендаря), КонецМесяца(Объект.ДатаКалендаря)) + 1;
	КонецЕсли;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "Сегодня");
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийПериод(Команда) Экспорт
	Если Объект.ВидКалендаря = 1 Тогда
		Объект.ДатаКалендаря = НачалоДня(Объект.ДатаКалендаря) - 1;
	ИначеЕсли Объект.ВидКалендаря = 2 Тогда
		Объект.ДатаКалендаря = НачалоНедели(Объект.ДатаКалендаря) - 1;
	ИначеЕсли Объект.ВидКалендаря = 3 Тогда
		Объект.ДатаКалендаря = НачалоМесяца(Объект.ДатаКалендаря) - 1;
	ИначеЕсли Объект.ВидКалендаря = 4 Тогда
		Объект.ДатаКалендаря = ?(Объект.ПериодПовесткиДня = 0, НачалоНедели(Объект.ДатаКалендаря), НачалоМесяца(Объект.ДатаКалендаря)) - 1;
	КонецЕсли;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "Сегодня");
КонецПроцедуры

&НаКлиенте
Процедура ВидДень(Команда) Экспорт
	Объект.ДатаКалендаря	= ОбщегоНазначенияКлиент.ДатаСеанса();
	Объект.ВидКалендаря		= 1;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "СтраницыВидимостьДанных, РабочееВремя, День, Неделя, Месяц, ПовесткаДня");
КонецПроцедуры

&НаКлиенте
Процедура ВидНеделя(Команда) Экспорт
	Если (Объект.ВидКалендаря = 4 И Объект.ПериодПовесткиДня = 1)
		ИЛИ Объект.ВидКалендаря = 3 Тогда
		Объект.ДатаКалендаря = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	Объект.ВидКалендаря = 2;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "СтраницыВидимостьДанных, РабочееВремя, День, Неделя, Месяц, ПовесткаДня");
КонецПроцедуры

&НаКлиенте
Процедура ВидМесяц(Команда) Экспорт
	Объект.ВидКалендаря = 3;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "СтраницыВидимостьДанных, РабочееВремя, День, Неделя, Месяц, ПовесткаДня");
КонецПроцедуры

&НаКлиенте
Процедура ПовесткаДня(Команда) Экспорт
	Объект.ПериодПовесткиДня	= ?(Объект.ВидКалендаря <= 2, 0, 1);
	Объект.ВидКалендаря			= 4;
	
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "СтраницыВидимостьДанных, РабочееВремя, День, Неделя, Месяц, ПовесткаДня");
КонецПроцедуры

&НаКлиенте
Процедура ПериодПовесткиДняПриИзменении(Элемент)
	УстановкаПериодаКалендаря(ЭтотОбъект);
	
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) Экспорт
	ЗаполнитьТаблицуСобытийНаСервере();
	ЗаполнитьТекущуюСтраницуПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура РабочееВремя(Команда) Экспорт
	РабочееВремя = НЕ РабочееВремя;
	
	ЗаполнитьТекущуюСтраницуПланировщика();
	
	УстановитьДоступность(ЭтотОбъект, "РабочееВремя");
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	ОткрытьФорму("Справочник.СобытияПланировщика.ФормаОбъекта", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьЗавершение", ЭтотОбъект);
	ПоказатьВыборКалендаря(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Отбор(Команда)
	Объект.Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Исполнитель"		, Объект.ТекущийПользователь);
	Объект.Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода"	, Объект.НачалоПериода);
	Объект.Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода"		, Объект.ОкончаниеПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Компоновщик", Объект.Компоновщик);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПланировщикИнтерфейс.Форма.НастройкаОтбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте 
Процедура ОтборЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ТипЗнч(Результат) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Компоновщик = Результат;
	
	Обновить(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура ЗаписатьЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	Если НЕ ТипЗнч(РезультатВыбора) = Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатВыбора.Значение) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан календарь для записи события...'"), 45);
		Возврат;
	КонецЕсли;
	
	ЭлементСсылка = СоздатьСобытиеНаСервере(РезультатВыбора.Значение);
	
	// Обнулим текущие показатели
	НовоеСобытие = Неопределено;
	Параметры.РежимПодбора = Ложь;
	
	// Оповестим всех об изменении
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("НачалоСобытия"	, Объект.НачалоПериода);
	ПараметрыОповещения.Вставить("ОкончаниеСобытия"	, Объект.ОкончаниеПериода);
	ПараметрыОповещения.Вставить("Исполнитель"		, Объект.ТекущийПользователь);
	ПараметрыОповещения.Вставить("Участники"		, Новый Массив);
	Оповестить("ПослеЗаписиСобытияПланировщика", ПараметрыОповещения, ЭлементСсылка);
	
	УстановитьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура СозданиеИзменениеСобытияЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьНаличиеСкриптовПланировщика()
	КаталогФайлов = КаталогВременныхФайлов() + "1c_planner\";
	СоздатьКаталог(КаталогФайлов);
	
	АдресХранилищаСкрипт = ПолучитьДанныеИзМакетаНаСервере("dhtmlxscheduler_js");  
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСкрипт) Тогда
		ТекстовыйДокумент = ПолучитьИзВременногоХранилища(АдресХранилищаСкрипт);
		ТекстовыйДокумент.Записать(КаталогФайлов + "dhtmlxscheduler.js");
		
		УдалитьИзВременногоХранилища(АдресХранилищаСкрипт);
	КонецЕсли;
	
	АдресХранилищаСтили = ПолучитьДанныеИзМакетаНаСервере("dhtmlxscheduler_css");  
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСтили) Тогда
		ТекстовыйДокумент = ПолучитьИзВременногоХранилища(АдресХранилищаСтили);
		ТекстовыйДокумент.Записать(КаталогФайлов + "dhtmlxscheduler.css");
		
		УдалитьИзВременногоХранилища(АдресХранилищаСтили);
	КонецЕсли;
	
	АдресХранилищаКартинки = ПолучитьДанныеИзМакетаНаСервере("imgs_dhx_terrace_zip");  
	Если ЭтоАдресВременногоХранилища(АдресХранилищаКартинки) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаКартинки);
		ДвоичныеДанные.Записать(КаталогФайлов + "imgs_dhx_terrace.zip");
		
		УдалитьИзВременногоХранилища(АдресХранилищаКартинки);
		
		ЧтениеZIP = Новый ЧтениеZipФайла(КаталогФайлов + "imgs_dhx_terrace.zip");
		ЧтениеZIP.ИзвлечьВсе(КаталогФайлов);
		ЧтениеZIP.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Обработка событий поля HTML

&НаКлиенте 
Процедура СтраницаHTMLПланировщикаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументHTML = Элемент.Документ;
	
	Настройки = ПолучитьПараметрыСобытияИзДокумента(ДокументHTML);
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия			= Настройки.Имя;
	ПараметрыСобытия	= Настройки.Параметры;
	КолПараметров		= Настройки.Количество;
	
	Если ИмяСобытия = "ПланировщикВыбор" И КолПараметров = 3 Тогда
		ПланировщикВыбор(ПараметрыСобытия[0], ПараметрыСобытия[1], ПараметрыСобытия[2]); 
	ИначеЕсли ИмяСобытия = "ПланировщикСобытиеВыбор" И КолПараметров = 1 Тогда
		ПланировщикСобытиеВыбор(ПараметрыСобытия[0]);
	ИначеЕсли ИмяСобытия = "ПланировщикСобытиеПриОкончанииПеретаскивания" И КолПараметров = 4 Тогда
		ПланировщикСобытиеПриОкончанииПеретаскивания(ПараметрыСобытия[0], ПараметрыСобытия[1], ПараметрыСобытия[2], ПараметрыСобытия[3]);
	ИначеЕсли ИмяСобытия = "ПланировщикСобытиеПриОкончанииИзменениеРазмера" И КолПараметров = 3 Тогда
		ПланировщикСобытиеПриОкончанииИзменениеРазмера(ПараметрыСобытия[0], ПараметрыСобытия[1], ПараметрыСобытия[2]);
	ИначеЕсли ИмяСобытия = "ПланировщикСобытиеПриКонтекстномМеню" И КолПараметров = 2 Тогда
		ПланировщикСобытиеПриКонтекстномМеню(ПараметрыСобытия[0], ПараметрыСобытия[1]);
	ИначеЕсли ИмяСобытия = "ПланировщикПриИзмененииВидаКалендаря" И КолПараметров = 2 Тогда
		ПланировщикПриИзмененииВидаКалендаря(ПараметрыСобытия[0], ПараметрыСобытия[1]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПараметрыСобытияИзДокумента(ДокументHTML)
	ЭлементДанных = ДокументHTML.getElementById("eventData");
	
	Попытка
		ИмяСобытия		= ЭлементДанных.getAttribute("data-eventName");
		СтрПараметры	= ЭлементДанных.getAttribute("data-eventParam");
		Количество		= ЭлементДанных.getAttribute("data-eventCount");
	Исключение
		ИмяСобытия		= "";
		СтрПараметры	= "";
		Количество		= 0;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ИмяСобытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Имена событий формы
	ИменаСобытий = Новый Соответствие;
	ИменаСобытий.Вставить("select"				, "ПланировщикВыбор");
	ИменаСобытий.Вставить("eventClick"			, "ПланировщикСобытиеВыбор");
	ИменаСобытий.Вставить("eventDrop"			, "ПланировщикСобытиеПриОкончанииПеретаскивания");
	ИменаСобытий.Вставить("eventResize"			, "ПланировщикСобытиеПриОкончанииИзменениеРазмера");
	ИменаСобытий.Вставить("eventOnContextMenu"	, "ПланировщикСобытиеПриКонтекстномМеню");
	ИменаСобытий.Вставить("onViewChange"		, "ПланировщикПриИзмененииВидаКалендаря");
	
	// Признак СтандартнаяОбработка
	ПроверкаОбработки = Новый Массив;
	ПроверкаОбработки.Добавить("eventResize");
	
	// Из COMОбъекта переводим в массив
	ПараметрыПодстановки	= Новый Массив;
	МассивПодстрок			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрПараметры, "&");
	Для Каждого Подстрока Из МассивПодстрок Цикл
		ПараметрыПодстановки.Добавить(СокрЛП(Подстрока));
	КонецЦикла;
	
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("Имя"			, ИменаСобытий.Получить(ИмяСобытия));
	СтруктураСобытия.Вставить("Параметры"	, ПараметрыПодстановки);
	СтруктураСобытия.Вставить("Количество"	, Число(Количество));
	
	Возврат СтруктураСобытия;
КонецФункции

// Представление данных

&НаКлиенте 
Процедура ЗаполнитьТекущуюСтраницуПланировщика()
	Если Объект.ВидКалендаря = 4 Тогда
		ЗаполнитьСтраницуПовесткиДняПланировщика();
	Иначе 
		ЗаполнитьСтраницуHTMLПланировщика();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтраницуHTMLПланировщика()
	// Подготовим календари
	ПараметрыКалендаря = Новый Структура("НачалоРабочегоДня, КонецРабочегоДня, ВидКалендаря, ТекущийПериод, ИмяРасширенияИнтерфейса"
											, ?(РабочееВремя, Окр(Объект.НачалоРабочегоВремени / 3600, 0, РежимОкругления.Окр15как10), 0)
											, ?(РабочееВремя, Окр(Объект.ОкончаниеРабочегоВремени / 3600, 0, РежимОкругления.Окр15как20), 24)
											, Объект.ВидКалендаря
											, Объект.ДатаКалендаря
											, Объект.ИмяРасширенияИнтерфейса);
	
	ТекстСтраницы	= ПланировщикИнтерфейсКлиентСервер.ПолучитьТекстСтраницыПланировщика(ПараметрыКалендаря, Объект.ТаблицаСобытий, Параметры.РежимПодбора);
	//СтраницаHTML	= ТекстСтраницы;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("v8cal_1.html");
	МассивИмен.Добавить("v8cal_2.html");
	
	ИндексЭлемента = МассивИмен.Найти(ИмяФайла);
	Если ИндексЭлемента <> Неопределено Тогда
		МассивИмен.Удалить(ИндексЭлемента);
	КонецЕсли;
	
	ИмяФайла = МассивИмен[0];
	ВременныйФайл = КаталогВременныхФайлов() + "1c_planner\" + ИмяФайла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(ТекстСтраницы);
	ТекстовыйДокумент.Записать(ВременныйФайл);
	ТекстовыйДокумент = Неопределено;
	
	СтраницаHTML = ВременныйФайл;
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСтраницуПовесткиДняПланировщика()
	
	ЭтотОбъект.ПовесткаДня.Очистить();
	
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаСобытий Цикл
		НоваяСтрока = ЭтотОбъект.ПовесткаДня.Добавить();
		НоваяСтрока.Идентификатор		= СтрокаТаблицы.Идентификатор;
		НоваяСтрока.Событие				= СтрокаТаблицы.Ссылка;
		НоваяСтрока.НачалоСобытия		= СтрокаТаблицы.Начало;
		НоваяСтрока.ОкончаниеСобытия	= СтрокаТаблицы.Конец;
		НоваяСтрока.ВесьДень			= СтрокаТаблицы.ВесьДень;
		НоваяСтрока.Наименование		= СтрокаТаблицы.Наименование;
		НоваяСтрока.Календарь			= СтрокаТаблицы.Календарь;
		НоваяСтрока.ЕстьНапоминания		= ?(СтрокаТаблицы.ЕстьНапоминания, 0, 1);
		НоваяСтрока.ЕстьУчастники		= ?(СтрокаТаблицы.ЕстьУчастники, 0, 1);
		НоваяСтрока.ЦветФонаHEX			= СтрокаТаблицы.ЦветФонаHEX;
		
		СтрДеньНедели		= ПланировщикКлиентСервер.ПредставлениеДняНедели(ДеньНедели(СтрокаТаблицы.Начало));
		СтрНачалоПериода	= ТРег(СтрДеньНедели) + ", " + Формат(СтрокаТаблицы.Начало, "ДФ='dd MMMM'");
		СтрВремяСобытия		= ?(СтрокаТаблицы.ВесьДень,
			НСтр("ru='весь день'"),
			Формат(СтрокаТаблицы.Начало, "ДФ=HH:mm") + " - " + Формат(СтрокаТаблицы.Конец, "ДФ=HH:mm"));
		
		Если НачалоДня(СтрокаТаблицы.Начало) <> НачалоДня(СтрокаТаблицы.Конец) Тогда
			СтрФормат = ?(НачалоГода(СтрокаТаблицы.Начало) = НачалоГода(СтрокаТаблицы.Конец), "ДФ=dd.MM", "ДФ=dd.MM.yy");
			СтрВремяСобытия = СтрВремяСобытия + " (" + Формат(СтрокаТаблицы.Конец, СтрФормат) + ")";
		КонецЕсли;
		
		НоваяСтрока.ПериодПредставление	= СтрНачалоПериода;
		НоваяСтрока.ВремяПредставление	= СтрВремяСобытия;
	КонецЦикла;
	
	ЭтотОбъект.ПовесткаДня.Сортировать("НачалоСобытия, ОкончаниеСобытия");
	
	ЗаполнитьУсловноеОформлениеФормыЦветаСобытийНаСервере();
	
КонецПроцедуры

// Заполнение списка событий

&НаСервере 
Процедура ЗаполнитьТаблицуСобытийНаСервере()
	ТекущаяДата = ДатаСеанса();

	Объект.ТаблицаСобытий.Очистить();
	РасшифровкаСобытий.Очистить();
	
	// Сбор данных
	ДанныеСобытий = ПланировщикИнтерфейсПереопределяемый.ПолучитьСобытия(ЭтотОбъект);
	
	// Обход таблицы событий и заполнение реквизитов формы
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из ДанныеСобытий Цикл
		Если СтрокаТаблицы.КонецКалендаря < ТекущаяДата Тогда // делаем полупрозрачность
			Цвет_К = СтрокаТаблицы.Цвет_К * (1 - 0.6) + 255 * 0.6; 
			Цвет_З = СтрокаТаблицы.Цвет_З * (1 - 0.6) + 255 * 0.6; 
			Цвет_С = СтрокаТаблицы.Цвет_С * (1 - 0.6) + 255 * 0.6;
			
			ЦветФонаHEX		= ПланировщикКлиентСервер.ЦветВHex(Цвет_К, Цвет_З, Цвет_С);
			ЦветТекстаHEX	= "#1b1b1b";
		Иначе 
			ЦветФонаHEX		= СтрокаТаблицы.ЦветHEX;
			ЦветТекстаHEX	= СтрокаТаблицы.ЦветТекстаHEX;
		КонецЕсли;
		
		СтрокаСобытия = Объект.ТаблицаСобытий.Добавить();
		СтрокаСобытия.Идентификатор		= "event" + Формат(Индекс, "ЧН=0; ЧГ=");
		СтрокаСобытия.Наименование		= СокрЛП(СтрокаТаблицы.Наименование);
		СтрокаСобытия.ВесьДень			= СтрокаТаблицы.ВесьДень;
		СтрокаСобытия.Начало			= СтрокаТаблицы.НачалоКалендаря;
		СтрокаСобытия.Конец				= СтрокаТаблицы.КонецКалендаря;
		СтрокаСобытия.Редактирование	= НЕ Параметры.РежимПодбора И СтрокаТаблицы.Исполнитель = Объект.ТекущийПользователь;
		СтрокаСобытия.ЦветФонаHEX		= ЦветФонаHEX;
		СтрокаСобытия.ЦветТекстаHEX		= ЦветТекстаHEX;
		СтрокаСобытия.Ссылка			= СтрокаТаблицы.Ссылка;
		СтрокаСобытия.ЕстьНапоминания	= СтрокаТаблицы.ЕстьНапоминания;
		СтрокаСобытия.ЕстьУчастники		= СтрокаТаблицы.ЕстьУчастники;
		СтрокаСобытия.ЦветФона			= СтрокаТаблицы.ЦветФона;
		СтрокаСобытия.Календарь			= СтрокаТаблицы.Календарь;
		
		СтрокаРасшифровки = РасшифровкаСобытий.Добавить();
		СтрокаРасшифровки.Идентификатор	= СтрокаСобытия.Идентификатор;
		СтрокаРасшифровки.Ссылка		= СтрокаСобытия.Ссылка;
		СтрокаРасшифровки.Начало		= НачалоДня(СтрокаТаблицы.НачалоКалендаря) + (СтрокаТаблицы.НачалоСобытия - НачалоДня(СтрокаТаблицы.НачалоСобытия));
		СтрокаРасшифровки.Конец			= НачалоДня(СтрокаТаблицы.НачалоКалендаря) + (СтрокаТаблицы.ОкончаниеСобытия - НачалоДня(СтрокаТаблицы.НачалоСобытия));
		СтрокаРасшифровки.НомерПовтора	= СтрокаТаблицы.НомерПовтора;
		СтрокаРасшифровки.Повторять		= СтрокаТаблицы.Повторять;
		СтрокаРасшифровки.ВесьДень		= СтрокаТаблицы.ВесьДень;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Параметры.РежимПодбора Тогда
		Событие = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НовоеСобытие);
		
		СтрокаСобытия = Объект.ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСобытия, Событие);
		
		СтрокаРасшифровки = РасшифровкаСобытий.Добавить();
		СтрокаРасшифровки.Идентификатор	= Событие.Идентификатор;
		СтрокаРасшифровки.Ссылка		= Справочники.СобытияПланировщика.ПустаяСсылка();
		СтрокаРасшифровки.Начало		= Событие.Начало;
		СтрокаРасшифровки.Конец			= Событие.Конец;
		СтрокаРасшифровки.НомерПовтора	= 1;
		СтрокаРасшифровки.Повторять		= Ложь;
		СтрокаРасшифровки.ВесьДень		= Событие.ВесьДень;
	КонецЕсли;
	
	ПланировщикИнтерфейсПереопределяемый.ПриОбновленииДанныхПланировщика(ЭтотОбъект);
КонецПроцедуры

// Заполнение списка календарей

&НаКлиенте 
Процедура ЗаполнитьСписокКалендарей() Экспорт
	ЗаполнитьСписокКалендарейНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКалендарейНаСервере(ВключаяОбщественные = Истина)
	Возврат ПланировщикИнтерфейсПереопределяемый.ПолучитьКалендариПользователя(Объект.ТекущийПользователь, ВключаяОбщественные);
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКалендарейНаСервере()
	ИспользуемыеКалендари = Новый Массив;
	
	МассивСтрок = Объект.Календари.НайтиСтроки(Новый Структура("Использование", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		ИспользуемыеКалендари.Добавить(СтрокаТаблицы.Календарь);
	КонецЦикла;
	МассивСтрок = Объект.ОбщиеКалендари.НайтиСтроки(Новый Структура("Использование", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		ИспользуемыеКалендари.Добавить(СтрокаТаблицы.Календарь);
	КонецЦикла;
	
	Объект.Календари.Очистить();
	Объект.ОбщиеКалендари.Очистить();
	
	МассивКалендарей = ПолучитьСписокКалендарейНаСервере(Истина);
	Для Каждого СтруктураКалендаря Из МассивКалендарей Цикл
		Использование = ?(МассивСтрок.Количество() = 0, (СтруктураКалендаря.Вид = 1), (МассивСтрок.Найти(СтруктураКалендаря.Календарь) <> Неопределено));
		
		Если СтруктураКалендаря.Вид = 1 Тогда
			СтрокаТаблицы = Объект.Календари.Добавить();
			СтрокаТаблицы.Использование	= Использование;
			СтрокаТаблицы.Календарь		= СтруктураКалендаря.Календарь;
			СтрокаТаблицы.Представление	= СтруктураКалендаря.КалендарьПредставление;
		ИначеЕсли СтруктураКалендаря.Вид = 2 Тогда
			СтрокаТаблицы = Объект.ОбщиеКалендари.Добавить();
			СтрокаТаблицы.Использование	= Использование;
			СтрокаТаблицы.Календарь		= СтруктураКалендаря.Календарь;
			СтрокаТаблицы.Пользователь	= СтруктураКалендаря.Пользователь;
			СтрокаТаблицы.Представление	= СтруктураКалендаря.КалендарьПредставление + " (" + СтруктураКалендаря.ПользовательПредставление + ")";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Общие методы

&НаСервереБезКонтекста 
Функция ПолучитьДанныеИзМакетаНаСервере(ИмяМакета)
	ДанныеМакета = Обработки.ПланировщикИнтерфейс.ПолучитьМакет(ИмяМакета);
	Возврат ПоместитьВоВременноеХранилище(ДанныеМакета);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РабочееВремяУстановлено(Форма)
	Возврат (Форма.Объект.НачалоРабочегоВремени <> 0) И (Форма.Объект.ОкончаниеРабочегоВремени <> 86399);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановкаПериодаКалендаря(Форма)
	ТекущийПериод = ДатаСеанса();
	
	Объект = Форма.Объект;
	
	Если Объект.ВидКалендаря = 1 Тогда
		Объект.НачалоПериода	= НачалоДня(Объект.ДатаКалендаря);
		Объект.ОкончаниеПериода	= КонецДня(Объект.ДатаКалендаря);
		
		ТекстЗаголовка = Формат(Объект.ДатаКалендаря, "ДФ=dd/MM/yy");
	ИначеЕсли Объект.ВидКалендаря = 2 Тогда
		Объект.НачалоПериода	= НачалоНедели(Объект.ДатаКалендаря);
		Объект.ОкончаниеПериода	= КонецНедели(Объект.ДатаКалендаря);
		
		ТекстЗаголовка = ПредставлениеПериода(Объект.НачалоПериода, Объект.ОкончаниеПериода, "ФП = Истина");
	ИначеЕсли Объект.ВидКалендаря = 3 Тогда
		Объект.НачалоПериода	= НачалоМесяца(Объект.ДатаКалендаря);
		Объект.ОкончаниеПериода	= КонецМесяца(Объект.ДатаКалендаря);
		
		ТекстЗаголовка = ПредставлениеПериода(Объект.НачалоПериода, Объект.ОкончаниеПериода, "ФП = Истина");
	ИначеЕсли Объект.ВидКалендаря = 4 Тогда
		Объект.НачалоПериода	= ?(Объект.ПериодПовесткиДня = 0, НачалоНедели(Объект.ДатаКалендаря), НачалоМесяца(Объект.ДатаКалендаря));
		Объект.ОкончаниеПериода	= ?(Объект.ПериодПовесткиДня = 0, КонецНедели(Объект.ДатаКалендаря), КонецМесяца(Объект.ДатаКалендаря));
		
		ТекстЗаголовка = ПредставлениеПериода(Объект.НачалоПериода, Объект.ОкончаниеПериода, "ФП = Истина");
	КонецЕсли;
	
	Если Объект.ВидКалендаря > 1 
		И ТекущийПериод >= Объект.НачалоПериода
		И ТекущийПериод <= Объект.ОкончаниеПериода Тогда
		
		Объект.ДатаКалендаря = ТекущийПериод;
		
	КонецЕсли;
	
	Форма.АвтоЗаголовок	= Ложь;
	Форма.Заголовок		= "Планировщик. " + ТекстЗаголовка;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаСеанса()
	#Если Клиент Тогда
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	#ИначеЕсли Сервер Тогда
		ДатаСеанса = ТекущаяДатаСеанса();
	#Иначе
		ДатаСеанса = ТекущаяДата();
	#КонецЕсли
	
	Возврат ДатаСеанса;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасшифровкуПоИдентификатору(Форма, Идентификатор)
	МассивСтрок = Форма.РасшифровкаСобытий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Новый Структура("Идентификатор, Ссылка, Начало, Конец, НомерПовтора, Повторять, ВесьДень");
	ЗаполнитьЗначенияСвойств(Структура, МассивСтрок[0]);
	
	Возврат Структура;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРасшифровкуПоИдентификатору(Форма, Идентификатор, Структура)
	МассивСтрок = Форма.РасшифровкаСобытий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(МассивСтрок[0], Структура, , "Идентификатор");
	
	Если Идентификатор = "newEvent" Тогда
		Событие = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Форма.НовоеСобытие);
		Событие.Вставить("Начало"	, Структура.Начало);
		Событие.Вставить("Конец"	, Структура.Конец);
		Событие.Вставить("ВесьДень"	, Структура.ВесьДень);
		Форма.НовоеСобытие = Новый ФиксированнаяСтруктура(Событие);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ДобавитьУсловноеОформлениеТекущеДатыНаСервере()
	ЭлементыОформления = ЭтотОбъект.УсловноеОформление.Элементы;
	
	ЭлементУсловногоОформления = ЭлементыОформления.Добавить();
	ЭлементУсловногоОформления.Использование	= Истина;
	ЭлементУсловногоОформления.Представление	= "Сегодня";
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("BackColor");
	ЭлементЦветаОформления.Использование	= Истина;
	ЭлементЦветаОформления.Значение			= ПланировщикКлиентСервер.HexВЦвет("#FFF3A1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУсловногоОформления.Отбор, "ПовесткаДня.НачалоСобытия", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(ТекущаяДатаСеанса()), "", Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУсловногоОформления.Отбор, "ПовесткаДня.НачалоСобытия", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(ТекущаяДатаСеанса()), "", Истина);
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Использование	= Истина;
	ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("ТаблицаПовесткаДняПериодПредставление");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеФормыЦветаСобытийНаСервере()
	
	ЭлементыОформления = ЭтотОбъект.УсловноеОформление.Элементы;
	
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из ЭлементыОформления Цикл
		Если Найти(ЭлементУсловногоОформления.Представление, "ЦветСобытияПовесткаДня_") > 0 Тогда
			МассивУдалить.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементУдалить Из МассивУдалить Цикл
		ИндексЭлемента = ЭлементыОформления.Индекс(ЭлементУдалить);
		ЭлементыОформления.Удалить(ЭлементУдалить);
	КонецЦикла;
	
	МассивЦветовHEX = Объект.ТаблицаСобытий.Выгрузить().ВыгрузитьКолонку("ЦветФонаHEX");
	
	Индекс	= 0;
	ОбработанныеСтроки = Новый Массив;
	Для Каждого ЦветФонаHEX Из МассивЦветовHEX Цикл
		Если ОбработанныеСтроки.Найти(ЦветФонаHEX) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ЦветФонаHEX", ЦветФонаHEX);
		Если ЭтотОбъект.ПовесткаДня.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
		ЭлементУсловногоОформления = ЭлементыОформления.Добавить();
		ЭлементУсловногоОформления.Использование	= Истина;
		ЭлементУсловногоОформления.Представление	= "ЦветСобытияПовесткаДня_" + Формат(Индекс, "ЧГ=");
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("BackColor");
		ЭлементЦветаОформления.Использование	= Истина;
		ЭлементЦветаОформления.Значение			= ПланировщикКлиентСервер.HexВЦвет(ЦветФонаHEX);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор, "ПовесткаДня.ЦветФонаHEX", ЦветФонаHEX, ВидСравненияКомпоновкиДанных.Равно, "", Истина);
		
		ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементОформляемогоПоля.Использование	= Истина;
		ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("ТаблицаПовесткаДняЦветПредставление");
	КонецЦикла;
	
КонецПроцедуры

// Заполнение календаря

&НаКлиенте
Функция ПоказатьВыборКалендаря(ОписаниеОповещения)
	МассивДанныхКалендарей = ПолучитьСписокКалендарейНаСервере(Ложь);
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого СтруктураКалендаря Из МассивДанныхКалендарей Цикл
		СписокВыбора.Добавить(СтруктураКалендаря.Календарь, СтруктураКалендаря.КалендарьПредставление);
	КонецЦикла;
	
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите календарь...'"));
КонецФункции

// Данные по событиям

&НаСервере
Функция ПолучитьМассивСобытийНаСервере()
	ТекущаяДата = ДатаСеанса();
	
	МассивКалендарей = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Календари Цикл
		Если СтрокаТаблицы.Использование Тогда
			МассивКалендарей.Добавить(СтрокаТаблицы.Календарь);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ОбщиеКалендари Цикл
		Если СтрокаТаблицы.Использование Тогда
			МассивКалендарей.Добавить(СтрокаТаблицы.Календарь);
		КонецЕсли;
	КонецЦикла;
	
	РасшифровкаСобытий.Очистить();
	
	ТаблицаСобытий = ПланировщикИнтерфейсПереопределяемый.ПолучитьСобытия(Объект.ТекущийПользователь,
		МассивКалендарей,
		Объект.НачалоПериода,
		Объект.ОкончаниеПериода,
		Объект.Компоновщик);
	
	Индекс = 0;
	
	События = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
		Если СтрокаТаблицы.КонецКалендаря < ТекущаяДата Тогда // делаем полупрозрачность
			Цвет_К = СтрокаТаблицы.Цвет_К * (1 - 0.6) + 255 * 0.6; 
			Цвет_З = СтрокаТаблицы.Цвет_З * (1 - 0.6) + 255 * 0.6; 
			Цвет_С = СтрокаТаблицы.Цвет_С * (1 - 0.6) + 255 * 0.6;
			
			ЦветHEX = ПланировщикКлиентСервер.ЦветВHex(Цвет_К, Цвет_З, Цвет_С);
		Иначе 
			ЦветHEX = СтрокаТаблицы.ЦветHEX;
		КонецЕсли;
		
		Событие = Новый Структура;
		Событие.Вставить("Идентификатор"	, "event" + Формат(Индекс, "ЧН=0; ЧГ="));
		Событие.Вставить("Наименование"		, СокрЛП(СтрокаТаблицы.Наименование));
		Событие.Вставить("ВесьДень"			, СтрокаТаблицы.ВесьДень);
		Событие.Вставить("Начало"			, СтрокаТаблицы.НачалоКалендаря);
		Событие.Вставить("Конец"			, СтрокаТаблицы.КонецКалендаря);
		Событие.Вставить("ЦветHEX"			, ЦветHEX);
		Событие.Вставить("Редактирование"	, НЕ Параметры.РежимПодбора);
		
		СтрокаРасшифровки = РасшифровкаСобытий.Добавить();
		СтрокаРасшифровки.Идентификатор	= "event" + Формат(Индекс, "ЧН=0; ЧГ=");
		СтрокаРасшифровки.Ссылка		= СтрокаТаблицы.Ссылка;
		СтрокаРасшифровки.Начало		= НачалоДня(СтрокаТаблицы.НачалоКалендаря) + (СтрокаТаблицы.НачалоСобытия - НачалоДня(СтрокаТаблицы.НачалоСобытия));
		СтрокаРасшифровки.Конец			= НачалоДня(СтрокаТаблицы.НачалоКалендаря) + (СтрокаТаблицы.ОкончаниеСобытия - НачалоДня(СтрокаТаблицы.НачалоСобытия));
		СтрокаРасшифровки.НомерПовтора	= СтрокаТаблицы.НомерПовтора;
		СтрокаРасшифровки.Повторять		= СтрокаТаблицы.Повторять;
		СтрокаРасшифровки.ВесьДень		= Событие.ВесьДень;
		
		События.Добавить(Событие);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Параметры.РежимПодбора Тогда
		Событие = Новый Структура;
		Для Каждого КлючИЗначение Из НовоеСобытие Цикл
			Событие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		СтрокаРасшифровки = РасшифровкаСобытий.Добавить();
		СтрокаРасшифровки.Индекс		= Число(Событие.Идентификатор);
		СтрокаРасшифровки.Ссылка		= Справочники.СобытияПланировщика.ПустаяСсылка();
		СтрокаРасшифровки.Начало		= Событие.Начало;
		СтрокаРасшифровки.Конец			= Событие.Конец;
		СтрокаРасшифровки.НомерПовтора	= 1;
		СтрокаРасшифровки.Повторять		= Ложь;
		СтрокаРасшифровки.ВесьДень		= Событие.ВесьДень;
		
		События.Добавить(Событие);
	КонецЕсли;
	
	Возврат События;
КонецФункции

// Действия с событиями

&НаСервере
Функция СоздатьСобытиеНаСервере(КалендарьСсылка)
	ОбъектОснование = ЭтотОбъект.НовоеСобытие.Ссылка;
	ДопСвойства		= Новый Структура("Календарь, НачалоСобытия, ОкончаниеСобытия, ВесьДень",
		КалендарьСсылка, НовоеСобытие.Начало, НовоеСобытие.Конец, НовоеСобытие.ВесьДень);
	
	Возврат ПланировщикИнтерфейсПереопределяемый.СоздатьСобытиеНаОсновании(ОбъектОснование, ДопСвойства);
КонецФункции

&НаКлиенте
Процедура УдалитьСобытие(Идентификатор)
	//Структура = ПолучитьРасшифровкуПоИдентификатору(Идентификатор);
	//Если Структура = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Ответ = Вопрос("Вы уверены что хотите полностью удалить событие <" + Строка(Структура.Ссылка) + ">.
	//|Данное действие выполняется безвозвратно.", РежимДиалогаВопрос.ДаНет);
	//
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ПланировщикВызовСервера.УдалитьСобытие(Структура.Ссылка);
	//
	//Обновить(Неопределено);
КонецПроцедуры

#КонецОбласти
