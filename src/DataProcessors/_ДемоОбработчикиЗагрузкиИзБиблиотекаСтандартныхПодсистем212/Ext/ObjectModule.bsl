#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики загрузки конвертации БСП 2.1.2 --> БСП 2.2.2 {c2de3602-78fd-11e3-900e-005056c00000}                                                                                                   
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО__ДемоЗаказПокупателя_ПриЗагрузкеОбъекта(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	// Сохраняем данные для обработки после загрузки
	ТаблицаПартнерыИКонтактныеЛица = Объект.ПартнерыИКонтактныеЛица.Выгрузить();
	Если ТаблицаПартнерыИКонтактныеЛица.Колонки.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено Тогда
		// Наличие свойства - флаг для необходимости преобразования
		
		ТаблицаПартнерыИКонтактныеЛица.Индексы.Добавить("Партнер, КонтактноеЛицо");
		Объект.ДополнительныеСвойства.Вставить("ТаблицаПартнерыИКонтактныеЛица", ТаблицаПартнерыИКонтактныеЛица);
	КонецЕсли;

КонецПроцедуры

Процедура ПКО__ДемоЗаказПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	// 1. Синхронизация закрытия заказа
	ИдентификаторСостоянияЗаказа = ПараметрыОбъекта.Получить("ИдентификаторСостоянияЗаказа");
	
	Если Метаданные.Документы._ДемоЗаказПокупателя.Реквизиты.Найти("СтатусЗаказа") = Неопределено Тогда
		Объект.ЗаказЗакрыт = ИдентификаторСостоянияЗаказа = "Закрыт";
	Иначе
		Объект.СтатусЗаказа = Перечисления["_ДемоСтатусыЗаказовПокупателей"][ИдентификаторСостоянияЗаказа];
	КонецЕсли;
		
	// 2. Синхронизация контактной информации с табличной частью
	ИсходныеПартнерыИКонтактныеЛица = Неопределено;
	Если Объект.ДополнительныеСвойства.Свойство("ТаблицаПартнерыИКонтактныеЛица", ИсходныеПартнерыИКонтактныеЛица) Тогда
		ОбработаннаяКонтактнаяИнформация = Новый Соответствие;
		ОтборПартнерыИКонтактныеЛица = Новый Структура("Партнер, КонтактноеЛицо");
		
		// Перебираем новых партнеров и контактных лиц, ищем соответствие в старой контактной информации
		Для Каждого СтрокаНовыхДанныхПартнеров Из Объект.ПартнерыИКонтактныеЛица Цикл
			
			// Ищем идентификатор для контактной информации в сохраненной таблице
			ЗаполнитьЗначенияСвойств(ОтборПартнерыИКонтактныеЛица, СтрокаНовыхДанныхПартнеров);
			НайденныеПартнерыИКонтактныеЛица = ИсходныеПартнерыИКонтактныеЛица.НайтиСтроки(ОтборПартнерыИКонтактныеЛица);
			Если НайденныеПартнерыИКонтактныеЛица.Количество()>0 Тогда
				
				// Восстанавливаем ссылку на контактную информацию
				СтрокаНовыхДанныхПартнеров.ИдентификаторСтрокиТабличнойЧасти = НайденныеПартнерыИКонтактныеЛица[0].ИдентификаторСтрокиТабличнойЧасти;
				
				// Помечаем идентификатор как обработанный
				ОбработаннаяКонтактнаяИнформация.Вставить(СтрокаНовыхДанныхПартнеров.ИдентификаторСтрокиТабличнойЧасти, 1);
				
				// И очищаем для последующих поисков
				Для Каждого СтрокаСтарыхДанныхПартнеров Из НайденныеПартнерыИКонтактныеЛица Цикл
					ИсходныеПартнерыИКонтактныеЛица.Удалить(СтрокаСтарыхДанныхПартнеров);
				КонецЦикла;
			Иначе
				// Очищаем ссылку на контактную информацию
				СтрокаНовыхДанныхПартнеров.ИдентификаторСтрокиТабличнойЧасти = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаляем неиспользуемое
		ПозицияНовойКонтактнойИнформации = Объект.КонтактнаяИнформация.Количество();
		Пока ПозицияНовойКонтактнойИнформации>0 Цикл
			ПозицияНовойКонтактнойИнформации = ПозицияНовойКонтактнойИнформации - 1;
			ИдентификаторНовойКонтактнойИнформации = Объект.КонтактнаяИнформация[ПозицияНовойКонтактнойИнформации].ИдентификаторСтрокиТабличнойЧасти;
			Если ОбработаннаяКонтактнаяИнформация[ИдентификаторНовойКонтактнойИнформации]=Неопределено Тогда
				Объект.КонтактнаяИнформация.Удалить(ПозицияНовойКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Данный раздел изменять запрещено.

// Служебная. Инициализирует переменные, необходимые для отладки
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецЕсли
