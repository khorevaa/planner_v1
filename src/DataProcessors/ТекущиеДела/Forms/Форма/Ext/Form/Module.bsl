&НаСервере
Перем ВыводимыеДелаИРазделы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	
	ЗапуститьФоновоеЗаданиеНаСервере();
	
	ЗагрузитьНастройкиАвтообновления();
	
	Элементы.ФормаНастроить.Доступность = Ложь;
	Элементы.ФормаОбновить.Доступность  = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТекущиеДела_ВключеноАвтообновление" Тогда
		ЗагрузитьНастройкиАвтообновления();
		ПериодОбновления = НастройкиАвтообновления.ПериодАвтообновления * 60;
		ПодключитьОбработчикОжидания("ОбновитьТекущиеДелаАвтоматически", ПериодОбновления);
	ИначеЕсли ИмяСобытия = "ТекущиеДела_ВыключеноАвтообновление" Тогда
		ОтключитьОбработчикОжидания("ОбновитьТекущиеДелаАвтоматически");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ДействияПриЗакрытииПанелиТекущихДел();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУправленияФормы

&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаГиперссылку(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Идентификатор", Элемент.Имя);
	ПараметрыДела = ПараметрыДел.НайтиСтроки(ПараметрыОтбора)[0];
	
	ОткрытьФорму(ПараметрыДела.Форма, ПараметрыДела.ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНажатияНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Идентификатор", НавигационнаяСсылка);
	ПараметрыДела = ПараметрыДел.НайтиСтроки(ПараметрыОтбора)[0];
	
	ОткрытьФорму(ПараметрыДела.Форма, ПараметрыДела.ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаКартинку(Элемент)
	
#Если ВебКлиент Тогда
	ПереключитьКартинкуВВебКлиенте(Элемент.Имя);
	Возврат;
#КонецЕсли
	
	ИмяГруппыРаздела = СтрЗаменить(Элемент.Имя, "Картинка", "Группа");
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз Тогда
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		Элементы[ИмяГруппыРаздела].Видимость = Ложь;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз;
		Элементы[ИмяГруппыРаздела].Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настроить(Команда)
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПрименитьНастройкиПанелиДел", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущиеДела", ТекущиеДелаВХранилище);
	ОткрытьФорму("Обработка.ТекущиеДела.Форма.НастройкаПанели", ПараметрыФормы,,,,,ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗапуститьОбновлениеСпискаТекущихДел();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования списка дел пользователя

&НаКлиенте
Процедура ОбновитьТекущиеДелаАвтоматически()
	ЗапуститьОбновлениеСпискаТекущихДел(Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТекущихДел(ТекущиеДела)
	
	ТекущиеДела.Сортировать("ЭтоРаздел Убыв, ПредставлениеРаздела Возр, Важное Убыв");
	
	СохраненныеНастройкиОтображения = ТекущиеДелаСлужебный.СохраненныеНастройкиОтображения();
	Если СохраненныеНастройкиОтображения = Неопределено Тогда
		ЗаданнаяВидимостьРазделов = Новый Соответствие;
		ЗаданнаяВидимостьДел      = Новый Соответствие;
	Иначе
		ЗаданнаяВидимостьРазделов = СохраненныеНастройкиОтображения.ВидимостьРазделов;
		ЗаданнаяВидимостьДел      = СохраненныеНастройкиОтображения.ВидимостьДел;
	КонецЕсли;
	
	ТекущийРаздел = "";
	Для Каждого Дело Из ТекущиеДела Цикл
		
		Если Дело.ЭтоРаздел Тогда
			// Сбрасываем видимость раздела. Ее установку выполняем из самого дела.
			ИмяРаздела = "ОбщаяГруппа" + Дело.ИдентификаторВладельца;
			Если ИмяРаздела <> ТекущийРаздел Тогда
				ЭлементРодитель = Элементы.Найти(ИмяРаздела);
				Если ЭлементРодитель = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЭлементРодитель.Видимость = Ложь;
			КонецЕсли;
			// Обновление дела.
			ОбновитьДело(Дело, ЭлементРодитель, ЗаданнаяВидимостьРазделов, ЗаданнаяВидимостьДел);
			ТекущийРаздел = ИмяРаздела;
		Иначе
			// Дочерние дела создаем заново.
			СоздатьДочернееДело(Дело);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДело(Дело, РодительДела, ЗаданнаяВидимостьРазделов, ЗаданнаяВидимостьДел)
	
	ВключенаВидимостьРаздела = ЗаданнаяВидимостьРазделов[Дело.ИдентификаторВладельца];
	Если ВключенаВидимостьРаздела = Неопределено Тогда
		ВключенаВидимостьРаздела = Истина;
	КонецЕсли;
	ВключенаВидимостьДела = ЗаданнаяВидимостьДел[Дело.Идентификатор];
	Если ВключенаВидимостьДела = Неопределено Тогда
		ВключенаВидимостьДела = Истина;
	КонецЕсли;
	
	Элемент = Элементы.Найти(Дело.Идентификатор);
	Если Элемент = Неопределено Тогда
		// Дела нету в списке, вероятно оно появилось после включения функциональной опции,
		// в таком случае добавим его.
		СоздатьДело(Дело, РодительДела, ВключенаВидимостьДела);
		ЗаполнитьПараметрыДела(Дело);
		Возврат;
	КонецЕсли;
	
	ЗаголовокДела = Дело.Представление + ?(Дело.Количество <> 0," (" + Дело.Количество + ")", "");
	Элемент.Заголовок = ЗаголовокДела;
	Если Дело.Важное Тогда
		Элемент.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	КонецЕсли;
	Элемент.Видимость = Дело.ЕстьДела И ВключенаВидимостьДела;
	// Сброс дочерних дел, если они есть. Их обновление будет дальше.
	Элемент.РасширеннаяПодсказка.Заголовок = "";
	
	// Установка подсказки, если задана
	Если ЗначениеЗаполнено(Дело.Подсказка) Тогда
		Отступ = Символы.НПП+Символы.НПП+Символы.НПП;
		Подсказка = Новый ФорматированнаяСтрока(Отступ + Дело.Подсказка);
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.РасширеннаяПодсказка.Шрифт     = Новый Шрифт(, 8);
		Элемент.РасширеннаяПодсказка.РастягиватьПоГоризонтали = Истина;
		Элемент.РасширеннаяПодсказка.Заголовок = Подсказка;
	КонецЕсли;
	
	// Установка видимости раздела.
	Если Элемент.Видимость И ВключенаВидимостьРаздела Тогда
		ЗаголовокРаздела = СтрЗаменить(РодительДела.Имя, "ОбщаяГруппа", "ЗаголовокРаздела");
		РодительДела.Видимость = Истина;
		ВыводимыеДелаИРазделы.Вставить(ЗаголовокРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокТекущихДел(ТекущиеДела)
	
	СохраненныеНастройкиОтображения = ТекущиеДелаСлужебный.СохраненныеНастройкиОтображения();
	Если СохраненныеНастройкиОтображения = Неопределено Тогда
		ЗаданнаяВидимостьРазделов = Новый Соответствие;
		ЗаданнаяВидимостьДел      = Новый Соответствие;
	Иначе
		СохраненныеНастройкиОтображения.Свойство("ВидимостьРазделов", ЗаданнаяВидимостьРазделов);
		СохраненныеНастройкиОтображения.Свойство("ВидимостьДел", ЗаданнаяВидимостьДел);
	КонецЕсли;
	
	СвернутыеРазделы = СвернутыеРазделы();
	
	ТекущиеДела.Сортировать("ЭтоРаздел Убыв, ПредставлениеРаздела Возр, Важное Убыв");
	
	// Если пользователь не настраивал положение разделов в списке дел, то
	// они сортируются согласно порядку, определенному в процедуре ПриОпределенииПорядкаРазделовКомандногоИнтерфейса.
	Если СохраненныеНастройкиОтображения = Неопределено Тогда
		УстановитьНачальныйПорядокРазделов(ТекущиеДела);
	КонецЕсли;
	
	ТекущаяГруппа = "";
	ТекущаяОбщаяГруппа = "";
	Для Каждого Дело Из ТекущиеДела Цикл
		
		Если Дело.ЭтоРаздел Тогда
			
			// Создание общей группы раздела.
			ИмяОбщейГруппы = "ОбщаяГруппа" + Дело.ИдентификаторВладельца;
			Если ТекущаяОбщаяГруппа <> ИмяОбщейГруппы Тогда
				ТекущаяОбщаяГруппа = ИмяОбщейГруппы;
				
				РазделСвернут = СвернутыеРазделы[Дело.ИдентификаторВладельца];
				Если РазделСвернут = Неопределено Тогда
					СвернутыеРазделы.Вставить(Дело.ИдентификаторВладельца, Ложь);
				КонецЕсли;
				
				ВключенаВидимостьРаздела = ЗаданнаяВидимостьРазделов[Дело.ИдентификаторВладельца];
				Если ВключенаВидимостьРаздела = Неопределено Тогда
					ВключенаВидимостьРаздела = Истина;
				КонецЕсли;
				
				ОбщаяГруппа = Группа(ИмяОбщейГруппы,, "ОбщаяГруппа");
				ОбщаяГруппа.Видимость = Ложь;
				// Создание группы заголовка раздела.
				ИмяГруппыЗаголовка = "ЗаголовокРаздела" + Дело.ИдентификаторВладельца;
				ГруппаЗаголовка    = Группа(ИмяГруппыЗаголовка, ОбщаяГруппа, "ЗаголовокРаздела");
				// Создание заголовка раздела.
				СоздатьЗаголовок(Дело, ГруппаЗаголовка, РазделСвернут);
			КонецЕсли;
			
			// Создание группы дел.
			ИмяГруппы = "Группа" + Дело.ИдентификаторВладельца;
			Если ТекущаяГруппа <> ИмяГруппы Тогда
				ТекущаяГруппа = ИмяГруппы;
				Группа        = Группа(ИмяГруппы, ОбщаяГруппа);
				Если РазделСвернут = Истина Тогда
					Группа.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ВключенаВидимостьДела = ЗаданнаяВидимостьДел[Дело.Идентификатор];
			Если ВключенаВидимостьДела = Неопределено Тогда
				ВключенаВидимостьДела = Истина;
			КонецЕсли;
			
			Если ВключенаВидимостьРаздела И ВключенаВидимостьДела И Дело.ЕстьДела Тогда
				ВыводимыеДелаИРазделы.Вставить(ИмяГруппыЗаголовка);
				ОбщаяГруппа.Видимость = Истина;
			КонецЕсли;
			
			СоздатьДело(Дело, Группа, ВключенаВидимостьДела);
			
		Иначе
			СоздатьДочернееДело(Дело);
		КонецЕсли;
		
		ЗаполнитьПараметрыДела(Дело);
		
	КонецЦикла;
	
	СохранитьСвернутыеРазделы(СвернутыеРазделы);
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьСписокТекущихДел()
	
	СохраненныеНастройкиОтображения = ТекущиеДелаСлужебный.СохраненныеНастройкиОтображения();
	Если СохраненныеНастройкиОтображения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраненноеДеревоДел = СохраненныеНастройкиОтображения.ДеревоДел;
	ЭтоПервыйРаздел = Истина;
	Для Каждого СтрокаРаздел Из СохраненноеДеревоДел.Строки Цикл
		Если Не ЭтоПервыйРаздел Тогда
			ПереместитьРаздел(СтрокаРаздел);
		КонецЕсли;
		ЭтоПервыйРаздел = Ложь;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фоновое обновление

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеНаСервере(ВыполнениеПрервано = Ложь)
	
	Если МонопольныйРежим() Тогда
		ВыполнениеПрервано = Истина;
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
	ТекущиеДелаВХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(ТекущиеДелаВХранилище);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ТекущиеДелаСлужебный.СписокТекущихДелПользователя");
	ПараметрыЗадания.Добавить(ПараметрыПроцедуры);
	
	НаименованиеЗадания = НСтр("ru = 'Обновление списка текущих дел'");
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекущиеДела()
	
	ТекущиеДела = ПолучитьИзВременногоХранилища(ТекущиеДелаВХранилище);
	ВыводимыеДелаИРазделы = Новый Структура;
	Если ТолькоОбновлениеДел Тогда
		ОбновитьСписокТекущихДел(ТекущиеДела);
	Иначе
		СформироватьСписокТекущихДел(ТекущиеДела);
	КонецЕсли;
	
	Если ВыводимыеДелаИРазделы.Количество() = 0 Тогда
		Элементы.СтраницаДела.Видимость = Ложь;
		Элементы.СтраницаТекущихДелНет.Видимость = Истина;
	Иначе
		Элементы.СтраницаДела.Видимость = Истина;
		Элементы.СтраницаТекущихДелНет.Видимость = Ложь;
		// Если выводятся дела только из одного раздела - скрываем его заголовок.
		Если ВыводимыеДелаИРазделы.Количество() = 1 Тогда
			ОтображатьРаздел = Ложь;
		Иначе
			ОтображатьРаздел = Истина;
		КонецЕсли;
		Для Каждого ЭлементЗаголовокРаздела Из ВыводимыеДелаИРазделы Цикл
			ЗаголовокРаздела = ЭлементЗаголовокРаздела.Ключ;
			Элементы[ЗаголовокРаздела].Видимость = ОтображатьРаздел;
		КонецЦикла;
	КонецЕсли;
	
	УпорядочитьСписокТекущихДел();
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	ЗаданиеВыполненоУспешно = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	Если ЗаданиеВыполненоУспешно = Истина Тогда
		ЗагрузитьТекущиеДела();
	КонецЕсли;
	Возврат ЗаданиеВыполненоУспешно;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоУспешно = Ложь;
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗаданиеВыполненоУспешно = Истина;
			Элементы.СтраницаДела.Видимость = Истина;
			Элементы.СтраницаДлительнаяОперация.Видимость = Ложь;
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		КонецЕсли;
	Исключение
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		Элементы.СтраницаДела.Видимость = Истина;
		Элементы.СтраницаДлительнаяОперация.Видимость = Ложь;
	КонецПопытки;
	
	Если ЗаданиеВыполненоУспешно Тогда
		Элементы.ФормаНастроить.Доступность = Истина;
		Элементы.ФормаОбновить.Доступность  = Истина;
		Если НастройкиАвтообновления.Свойство("АвтообновлениеВключено")
			И НастройкиАвтообновления.АвтообновлениеВключено Тогда
			ПериодОбновления = НастройкиАвтообновления.ПериодАвтообновления * 60;
			ПодключитьОбработчикОжидания("ОбновитьТекущиеДелаАвтоматически", ПериодОбновления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаКлиенте
Процедура ЗапуститьОбновлениеСпискаТекущихДел(АвтоматическоеОбновление = Ложь)
	
	// Если обновление инициировано вручную - отключаем обработчик автоматического обновления дел.
	// Он будет подключен заново после завершения "ручного" обновления.
	Если Не АвтоматическоеОбновление Тогда
		ОтключитьОбработчикОжидания("ОбновитьТекущиеДелаАвтоматически");
	КонецЕсли;
	
	ВыполнениеПрервано = Ложь;
	ТолькоОбновлениеДел = Истина;
	ЗапуститьФоновоеЗаданиеНаСервере(ВыполнениеПрервано);
	Если ВыполнениеПрервано Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаДела.Видимость = Ложь;
	Элементы.СтраницаДлительнаяОперация.Видимость = Истина;
	Элементы.СтраницаТекущихДелНет.Видимость = Ложь;
	Элементы.ФормаНастроить.Доступность = Ложь;
	Элементы.ФормаОбновить.Доступность  = Ложь;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 2);
	
КонецПроцедуры

&НаСервере
Функция Группа(ИмяГруппы, Родитель = Неопределено, ТипГруппы = "")
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.СтраницаДела;
	КонецЕсли;
	
	Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Если ТипГруппы = "ЗаголовокРаздела" Тогда
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Иначе
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Группа.ОтображатьЗаголовок = Ложь;
	
	Возврат Группа;
	
КонецФункции

&НаСервере
Процедура СоздатьДело(Дело, Группа, ВключенаВидимостьДела)
	
	ЗаголовокДела = Дело.Представление + ?(Дело.Количество <> 0," (" + Дело.Количество + ")", "");
	
	Элемент = Элементы.Добавить(Дело.Идентификатор, Тип("ДекорацияФормы"), Группа);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.Заголовок = ЗаголовокДела;
	Элемент.Видимость = (ВключенаВидимостьДела И Дело.ЕстьДела);
	Элемент.Гиперссылка = ЗначениеЗаполнено(Дело.Форма);
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеНаГиперссылку");
	
	Если Дело.Важное Тогда
		Элемент.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дело.Подсказка) Тогда
		Отступ = Символы.НПП+Символы.НПП+Символы.НПП;
		Подсказка = Новый ФорматированнаяСтрока(Отступ + Дело.Подсказка);
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.РасширеннаяПодсказка.Шрифт     = Новый Шрифт(, 8);
		Элемент.РасширеннаяПодсказка.РастягиватьПоГоризонтали = Истина;
		Элемент.РасширеннаяПодсказка.ЦветТекста= ЦветаСтиля.ЗаголовокДелаЦвет;
		Элемент.РасширеннаяПодсказка.Заголовок = Подсказка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаголовок(Дело, Группа, РазделСвернут)
	
	// Создание картинки сворачивания/разворачивания раздела.
	Элемент = Элементы.Добавить("Картинка" + Дело.ИдентификаторВладельца, Тип("ДекорацияФормы"), Группа);
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	
	Если РазделСвернут = Истина Тогда
		Элемент.Картинка    = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элемент.Картинка    = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
	Элемент.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Элемент.Ширина      = 2;
	Элемент.Высота      = 1;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеНаКартинку");
	Элемент.Подсказка = НСтр("ru = 'Развернуть/свернуть раздел'");
	
	// Создание заголовка раздела.
	Элемент = Элементы.Добавить("Заголовок" + Дело.ИдентификаторВладельца, Тип("ДекорацияФормы"), Группа);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.Заголовок  = Дело.ПредставлениеРаздела;
	Если ИнтерфейсТакси Тогда
		Элемент.Шрифт = Новый Шрифт("ШрифтДиалоговИМеню", 12);
	Иначе
		Элемент.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДочернееДело(Дело)
	
	Если Не Дело.ЕстьДела Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДелоВладелец = Элементы.Найти(Дело.ИдентификаторВладельца);
	Если ЭлементДелоВладелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементДелоВладелец.ОтображениеПодсказки           = ОтображениеПодсказки.ОтображатьСнизу;
	ЭлементДелоВладелец.РасширеннаяПодсказка.Шрифт     = Новый Шрифт(, 8);
	ЭлементДелоВладелец.РасширеннаяПодсказка.РастягиватьПоГоризонтали = Истина;
	
	ЗаголовокПодчиненногоДела = ЗаголовокПодчиненногоДела(ЭлементДелоВладелец.РасширеннаяПодсказка.Заголовок, Дело);
	
	ЭлементДелоВладелец.РасширеннаяПодсказка.Заголовок = ЗаголовокПодчиненногоДела;
	ЭлементДелоВладелец.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНажатияНавигационнойСсылки");
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокПодчиненногоДела(ТекущийЗаголовок, Дело)
	
	ТекущийЗаголовокПустой = Не ЗначениеЗаполнено(ТекущийЗаголовок);
	ЗаголовокДела = Дело.Представление + ?(Дело.Количество <> 0," (" + Дело.Количество + ")", "");
	СтрокаЗаголовкаДела    = ЗаголовокДела;
	Если Дело.Важное Тогда
		ЦветДела        = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе
		ЦветДела        = ЦветаСтиля.ЗаголовокДелаЦвет;
	КонецЕсли;
	
	ФорматированнаяСтрокаПеренос = Новый ФорматированнаяСтрока(Символы.ПС);
	ФорматированнаяСтрокаОтступ  = Новый ФорматированнаяСтрока(Символы.НПП+Символы.НПП+Символы.НПП);
	
	Если Дело.Важное Тогда
		Если ЗначениеЗаполнено(Дело.Форма) Тогда
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,
			                                           ЦветДела,,
			                                           Дело.Идентификатор);
		Иначе
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,
			                                           ЦветДела);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Дело.Форма) Тогда
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,,,
			                                           Дело.Идентификатор);
		Иначе
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(СтрокаЗаголовкаДела,,ЦветДела);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЗаголовокПустой Тогда
		Возврат Новый ФорматированнаяСтрока(ФорматированнаяСтрокаОтступ, ФорматированнаяСтрокаЗаголовкаДела);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекущийЗаголовок, ФорматированнаяСтрокаПеренос, ФорматированнаяСтрокаОтступ, ФорматированнаяСтрокаЗаголовкаДела);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыДела(Дело)
	
	СтрокаДело = ПараметрыДел.Добавить();
	СтрокаДело.Идентификатор = Дело.Идентификатор;
	СтрокаДело.Форма = Дело.Форма;
	СтрокаДело.ПараметрыФормы = Дело.ПараметрыФормы;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиАвтообновления()
	
	НастройкиАвтообновления = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "НастройкиАвтообновления");
	
	Если НастройкиАвтообновления = Неопределено Тогда
		НастройкиАвтообновления = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПанелиДел(ПрименитьНастройки, ДополнительныеПараметры) Экспорт
	Если ПрименитьНастройки = Истина Тогда
		ЗапуститьОбновлениеСпискаТекущихДел();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереместитьРаздел(СтрокаРаздел)
	
	ИмяЭлемента = "ОбщаяГруппа" + СтрокаРаздел.Идентификатор;
	ПеремещаемыйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если ПеремещаемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Переместить(ПеремещаемыйЭлемент, ПеремещаемыйЭлемент.Родитель);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСвернутыеРазделы(СвернутыеРазделы)
	
	НастройкиОтображения = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "НастройкиОтображения");
	
	Если ТипЗнч(НастройкиОтображения) <> Тип("Структура") Тогда
		НастройкиОтображения = Новый Структура;
	КонецЕсли;
	
	НастройкиОтображения.Вставить("СвернутыеРазделы", СвернутыеРазделы);
	ХранилищеОбщихНастроек.Сохранить("ТекущиеДела", "НастройкиОтображения", НастройкиОтображения);
	
КонецПроцедуры

&НаСервере
Функция СвернутыеРазделы()
	
	НастройкиОтображения = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "НастройкиОтображения");
	Если НастройкиОтображения <> Неопределено И НастройкиОтображения.Свойство("СвернутыеРазделы") Тогда
		СвернутыеРазделы = НастройкиОтображения.СвернутыеРазделы;
	Иначе
		СвернутыеРазделы = Новый Соответствие;
	КонецЕсли;
	
	Возврат СвернутыеРазделы;
	
КонецФункции

&НаСервере
Процедура ДействияПриЗакрытииПанелиТекущихДел()
	
	ЗаполнитьСвернутыеГруппыПередЗакрытием();
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвернутыеГруппыПередЗакрытием()
	
	НастройкиОтображения = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "НастройкиОтображения");
	Если НастройкиОтображения = Неопределено Или Не НастройкиОтображения.Свойство("СвернутыеРазделы") Тогда
		Возврат;
	КонецЕсли;
	
	СвернутыеРазделы = Новый Соответствие;
	Для Каждого СтрокаСоответствия Из НастройкиОтображения.СвернутыеРазделы Цикл
		
		ЭлементФормы = Элементы.Найти("Картинка" + СтрокаСоответствия.Ключ);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементФормы.Картинка = БиблиотекаКартинок.СтрелкаВправо Тогда
			СвернутыеРазделы.Вставить(СтрокаСоответствия.Ключ, Истина);
		Иначе
			СвернутыеРазделы.Вставить(СтрокаСоответствия.Ключ, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СвернутыеРазделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСвернутыеРазделы(СвернутыеРазделы);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьКартинкуВВебКлиенте(ИмяЭлемента)
	
	ИмяГруппыРаздела = СтрЗаменить(ИмяЭлемента, "Картинка", "Группа");
	Элемент = Элементы[ИмяЭлемента];
	
	Если Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз Тогда
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		Элементы[ИмяГруппыРаздела].Видимость = Ложь;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз;
		Элементы[ИмяГруппыРаздела].Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныйПорядокРазделов(ТекущиеДела)
	
	ПорядокРазделовКомандногоИнтерфейса = Новый Массив;
	ТекущиеДелаПереопределяемый.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(ПорядокРазделовКомандногоИнтерфейса);
	
	Индекс = 0;
	Для Каждого РазделКомандногоИнтерфейса Из ПорядокРазделовКомандногоИнтерфейса Цикл
		РазделКомандногоИнтерфейса = СтрЗаменить(РазделКомандногоИнтерфейса.ПолноеИмя(), ".", "");
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ИдентификаторВладельца", РазделКомандногоИнтерфейса);
		
		НайденныеСтроки = ТекущиеДела.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ИндексСтрокиВТаблице = ТекущиеДела.Индекс(НайденнаяСтрока);
			Если ИндексСтрокиВТаблице = Индекс Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ТекущиеДела.Сдвинуть(ИндексСтрокиВТаблице, (Индекс - ИндексСтрокиВТаблице));
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
