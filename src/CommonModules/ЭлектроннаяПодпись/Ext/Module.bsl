////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет записи из табличной части ЭП
//
// Параметры
//   ОбъектСсылка - ЛюбаяСсылка - Объект, для которого следует удалить записи.
//   ТаблицаВыделенныеСтроки - ТаблицаЗначений - Набор строк объекта, для которых следует удалить подписи.
//       * НомерСтроки - Число - Номер строки таблицы.
//   РеквизитПодписанИзменен - Булево - (возвращаемое значение) примет значение Истина если удалена последняя подпись.
//   КоличествоПодписей - Число - Количество подписей в объекте после удаления.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//
Процедура УдалитьПодписи(ОбъектСсылка, ТаблицаВыделенныеСтроки, РеквизитПодписанИзменен,
	КоличествоПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	РеквизитПодписанИзменен = Ложь;
	
	// Сортировка по убыванию номера строки - вначале будут последние строки
	ТаблицаВыделенныеСтроки.Сортировать("НомерСтроки Убыв");
	
	ПодписанныйОбъект = ОбъектСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ОбъектСсылка, , УникальныйИдентификатор);
	
	Для Каждого ДанныеПодписи Из ТаблицаВыделенныеСтроки Цикл
		УдалитьПодпись(ПодписанныйОбъект, ДанныеПодписи);
	КонецЦикла;
	
	КоличествоПодписей = ПодписанныйОбъект.ЭлектронныеПодписи.Количество();
	ПодписанныйОбъект.ПодписанЭП = (КоличествоПодписей <> 0);
	РеквизитПодписанИзменен = НЕ ПодписанныйОбъект.ПодписанЭП;
	
	ПодписанныйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	УстановитьПривилегированныйРежим(Истина);
	ПодписанныйОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ОбъектСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Проверяет действительность подписи и корректность сертификата,
//   генерируя исключительную ситуацию в случае неудачи.
//
// Параметры:
//   МенеджерКриптографии  - МенеджерКриптографии - Менеджер криптографии.
//   ДвоичныеДанныеФайла   - ДвоичныеДанные - Файл для проверки.
//   ДвоичныеДанныеПодписи - ДвоичныеДанные - Подпись.
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	
	МассивРежимовПроверки = Новый Массив;
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок)

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	ИмяМодуля = "ЭлектроннаяПодпись";
	
	ИмяСобытия = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
	ИмяСобытия = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
	ИмяСобытия = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ЭлектроннаяПодпись.ЗаполнитьНазначенияСертификатовЭП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.8";
	Обработчик.Процедура = "ЭлектроннаяПодпись.УдалитьСтарыеИЗаполнитьНазначенияСертификатовЭП";
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
//   автоматически найти по типу, но ссылки на которые требуется сохранять
//   в базе данных (например: подсистемы, роли).
//
// См. также:
//   ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	СтароеИмя = "Роль.ИспользованиеЭЦП";
	НовоеИмя  = "Роль.ИспользованиеЭП";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7", СтароеИмя, НовоеИмя, Библиотека);
	
	СтароеИмя = "Подсистема.СтандартныеПодсистемы.Подсистема.ЭлектроннаяЦифроваяПодпись";
	НовоеИмя  = "Подсистема.СтандартныеПодсистемы.Подсистема.ЭлектроннаяПодпись";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7", СтароеИмя, НовоеИмя, Библиотека);
	
КонецПроцедуры

// Определяет параметры работы клиента.
//
// Параметры:
//   Параметры - Структура - Все параметры работы клиента.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НастройкиПодсистемы = Новый Структура;
		НастройкиПодсистемы.Вставить("ПерсональныеНастройки", ПерсональныеНастройки());
		НастройкиПодсистемы.Вставить("ОбщиеНастройки", ОбщиеНастройки());
		НастройкиПодсистемы = Новый ФиксированнаяСтруктура(НастройкиПодсистемы);
		Параметры.Вставить("ЭлектроннаяПодпись", НастройкиПодсистемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заносит информацию о подписи объекта
//
// Параметры
//   ПодписываемыйОбъектСсылка - Произвольный - Объект, в табличную часть которого будет занесена информация о ЭП.
//       - ЛюбаяСсылка - Будет получен объект, блокировка, запись в ИБ.
//       - ЛюбойОбъект - За блокировку и запись отвечает вызывающий код.
//   НоваяПодписьДвоичныеДанные - ДвоичныеДанные - Двоичные данные подписи.
//   Отпечаток - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего.
//   ДатаПодписи - Дата - Дата подписи.
//   Комментарий - Строка - Комментарий подписи.
//   ИмяФайлаПодписи - Строка - Имя файла подписи (заполняется только если подпись добавлена из файла).
//   КомуВыданСертификат - Строка - Представление поля КомуВыдан сертификата.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//
Процедура ЗанестиИнформациюОПодписи(
			ПодписываемыйОбъектСсылка,
			НоваяПодписьДвоичныеДанные,
			Отпечаток,
			ДатаПодписи,
			Комментарий,
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			ДвоичныеДанныеСертификата,
			УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ПодписываемыйОбъект.Заблокировать();
	Иначе
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка;
	КонецЕсли;
	
	Если ДатаПодписи = Дата('00010101') Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеПодписи.Добавить();
	
	НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
	НоваяЗапись.ДатаПодписи         = ДатаПодписи;
	НоваяЗапись.ИмяФайлаПодписи     = ИмяФайлаПодписи;
	НоваяЗапись.Комментарий         = Комментарий;
	НоваяЗапись.Отпечаток           = Отпечаток;
	НоваяЗапись.Подпись             = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
	НоваяЗапись.УстановившийПодпись = Пользователи.ТекущийПользователь();
	НоваяЗапись.Сертификат          = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	
	ПодписываемыйОбъект.ПодписанЭП = Истина;
	ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		ПодписываемыйОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество подписей у данного объекта.
//
// Параметры
//   ОбъектСсылка - ЛюбаяСсылка - Ссылка на объект, в табличной части которого содержатся подписи.
//
// Возвращаемое значение:
//   Число - количество подписей
//
Функция КоличествоПодписей(ОбъектСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
				   |ИЗ
				   |	";
				   
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСсылка);
	Запрос.Текст = Запрос.Текст + ".ЭлектронныеПодписи КАК ЭлектронныеПодписи
				   |ГДЕ
				   |	ЭлектронныеПодписи.Ссылка = &ОбъектСсылка";
				   
	Запрос.Параметры.Вставить("ОбъектСсылка", ОбъектСсылка);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	ЧислоЗаписей = 0;
	Если ВыборкаЗапроса.Следующий() Тогда
		ЧислоЗаписей = ВыборкаЗапроса.ЧислоЗаписей;
	КонецЕсли;
	
	Возврат ЧислоЗаписей;
	
КонецФункции	

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   Структура - Персональные настройки для работы с электронной подписью.
//       * ДействияПриСохраненииСЭП - Строка - Что делать при сохранении файлов с электронной подписью:
//           ** "Спрашивать" - Показывать диалог выбора подписей для сохранения.
//           ** "СохранятьВсеПодписи" - Всегда все подписи.
//       * ПутьМодуляКриптографии - Строка - Путь модуля.
//       * РасширениеДляФайловПодписи - Строка - Расширение для файлов ЭП.
//       * РасширениеДляЗашифрованныхФайлов - Строка - Расширение для зашифрованных файлов.
//       * ОтпечатокЛичногоСертификатаДляШифрования - Строка - Отпечаток личного сертификата.
//
// См. также:
//   ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки() - программный интерфейс для получения.
//   ОбщаяФорма.ПерсональныеНастройкиЭП - место ввода данных параметров и их пользовательские представления.
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", "Спрашивать");
	ПерсональныеНастройки.Вставить("ПутьМодуляКриптографии", "");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = КлючХраненияНастроек();
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
КонецФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Параметры:
//   СтруктураОснование - Структура - Необязательный. Структура, в которую будут добавлены ключи общих настроек.
//
// Возвращаемое значение: 
//   Структура - Общие настройки подсистемы для работы с электронной подписью.
//       * ПровайдерЭП - Строка - Имя провайдера ЭП.
//       * ТипПровайдераЭП - Число - Тип провайдера.
//       * ВыполнятьПроверкуЭПНаСервере - Булево - Если Истина то ЭП проверяется на сервере.
//       * АлгоритмПодписи - Строка - Имя алгоритма подписи.
//       * АлгоритмХеширования - Строка - Имя алгоритма хеширования.
//       * АлгоритмШифрования - Строка - Имя алгоритма шифрования.
//
// См. также:
//   ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки() - единая точка входа.
//   ОбщаяФорма.НастройкиКриптографии - место определения данных параметров и их текстовые описания.
//
Функция ОбщиеНастройки(СтруктураОснование = Неопределено) Экспорт
	Если ТипЗнч(СтруктураОснование) = Тип("Структура") Тогда
		ОбщиеНастройки = СтруктураОснование;
	Иначе
		ОбщиеНастройки = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеНастройки.Вставить("ПровайдерЭП",                   Константы.ПровайдерЭП.Получить());
	ОбщиеНастройки.Вставить("ТипПровайдераЭП",               Константы.ТипПровайдераЭП.Получить());
	ОбщиеНастройки.Вставить("ВыполнятьПроверкуЭПНаСервере",  Константы.ВыполнятьПроверкуЭПНаСервере.Получить());
	
	ОбщиеНастройки.Вставить("АлгоритмПодписи",     Константы.АлгоритмПодписи.Получить());
	ОбщиеНастройки.Вставить("АлгоритмХеширования", Константы.АлгоритмХеширования.Получить());
	ОбщиеНастройки.Вставить("АлгоритмШифрования",  Константы.АлгоритмШифрования.Получить());
	
	ОбщиеНастройки.Вставить("ИспользоватьЭлектронныеПодписи", Константы.ИспользоватьЭлектронныеПодписи.Получить());
	
	ОбщиеНастройки.Вставить("ПутьМодуляКриптографииСервера", "");
	Если ОбщиеНастройки.ВыполнятьПроверкуЭПНаСервере Тогда
		ОбщиеНастройки.ПутьМодуляКриптографииСервера = ЭлектроннаяПодписьПовтИсп.ПутьМодуляКриптографии();
	КонецЕсли;
	
	Возврат ОбщиеНастройки;
	
КонецФункции

// Преобразует назначения сертификатов в дружественный вид.
//
// Параметры
//   Назначение - Строка - Имя назначения сертификата.
//       Например: "TLS Web Client Authentication (1.3.6.1.5.5.7.3.2)".
//   НовоеНазначение - Строка - Возвращаемое значение. Представление назначения сертификата.
//       Например: "Проверка подлинности клиента".
//   ДобавлятьКодНазначения - Булево - Надо ли добавлять код к представлению.
//       Если Истина то НовоеНазначение может быть таким: "Проверка подлинности клиента (1.3.6.1.5.5.7.3.2)".
//
Процедура ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НовоеНазначение = "";
	
	Для Индекс = 1 По СтрЧислоСтрок(Назначение) Цикл
		
		Строка = СтрПолучитьСтроку(Назначение, Индекс);
		Представление = Назначение;
		Код = "";
		
		Позиция = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(Строка, "(");
		Если Позиция <> 0 Тогда
			
			Представление = Лев(Строка, Позиция - 1);
			Код = Сред(Строка, Позиция + 1, СтрДлина(Строка) - Позиция - 1);
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Код);
			Если СпрСсылка <> Неопределено И НЕ СпрСсылка.Пустая() Тогда
				Представление = СпрСсылка.Наименование;
			КонецЕсли;
			
			Если ДобавлятьКодНазначения Тогда
				Представление = Представление  + " (" + Код + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		НовоеНазначение = НовоеНазначение + Представление;
		НовоеНазначение = НовоеНазначение + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

// Подписи объекта.
//
// Параметры
//   СсылкаНаОбъект - СправочникСсылка - Объект, в табличной части которого содержатся подписи.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Массив - Подписи объекта.
//      * Структура - Подпись объекта.
//          ** АдресПодписи - Строка - Адрес подписи во временном хранилище.
//          ** КомуВыданСертификат - Строка - Кому выдан сертификат (имя, отдел и др. информация).
//          ** ИмяФайлаПодписи - Строка - Имя файла подписи (служебное поле).
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	Результат = Новый Массив;
	
	//ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ЭлектронныеПодписи.Подпись             КАК Подпись,
	|	ЭлектронныеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
	|ИЗ
	|	[ПолноеИмяОбъектаСЭП].ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭП]", ПолноеИмяОбъектаСЭП);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		Подпись = Новый Структура;
		Подпись.Вставить("АдресПодписи", АдресПодписи);
		Подпись.Вставить("КомуВыданСертификат", ВыборкаЗапроса.КомуВыданСертификат);
		Подпись.Вставить("ИмяФайлаПодписи", ВыборкаЗапроса.ИмяФайлаПодписи);
		
		Результат.Добавить(Подпись);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Извлекает сертификаты из данных подписи.
//
// Параметры:
//   Подпись - ДвоичныеДанные - Файл подписи.
//
// Возвращаемое значение:
//   Неопределено - Если при разборе возникла ошибка.
//   Структура - Данные подписи
//       * Отпечаток                 - Строка
//       * КомуВыданСертификат       - Строка
//       * ДвоичныеДанныеСертификата - ДвоичныеДанные
//       * Подпись                   - ХранилищеЗначения
//       * Сертификат                - ХранилищеЗначения
//
Функция ПрочитатьДанныеПодписи(Подпись) Экспорт
	
	Результат = Неопределено;
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Если Сертификаты.Количество() > 0 Тогда
		Сертификат = Сертификаты[0];
		
		Результат = Новый Структура;
		Результат.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
		Результат.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект));
		Результат.Вставить("ДвоичныеДанныеСертификата", Сертификат.Выгрузить());
		Результат.Вставить("Подпись", Новый ХранилищеЗначения(Подпись));
		Результат.Вставить("Сертификат", Новый ХранилищеЗначения(Сертификат.Выгрузить()));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Удаляет строку табличной части ЭП.
//
// Параметры:
//   ПодписываемыйОбъект - СправочникОбъект - Подписываемый объект.
//   ДанныеПодписи - Структура - Данные для поиска объекта и строки в его табличной части.
//
Процедура УдалитьПодпись(ПодписанныйОбъект, ДанныеПодписи)
	
	НомерСтроки = ДанныеПодписи.НомерСтроки;
	
	СтрокаТабличнойЧасти = ПодписанныйОбъект.ЭлектронныеПодписи.Найти(НомерСтроки, "НомерСтроки");
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда 
			Если СтрокаТабличнойЧасти.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
				ВызватьИсключение НСтр("ru = 'Недостаточно прав на удаление подписи.'");
			КонецЕсли;
		КонецЕсли;
		
		ПодписанныйОбъект.ЭлектронныеПодписи.Удалить(СтрокаТабличнойЧасти);
	Иначе	
		ВызватьИсключение НСтр("ru = 'Строка с подписью не найдена.'");
	КонецЕсли;
		
КонецПроцедуры

// Получает менеджер на основе общих настроек криптографии.
Функция ПолучитьМенеджерКриптографии() Экспорт
	
	ОбщиеНастройки = ОбщиеНастройки();
	
	Если Не ОбщиеНастройки.ВыполнятьПроверкуЭПНаСервере Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПровайдерЭП            = ОбщиеНастройки.ПровайдерЭП;
	ТипПровайдераЭП        = ОбщиеНастройки.ТипПровайдераЭП;
	ПутьМодуляКриптографии = ОбщиеНастройки.ПутьМодуляКриптографииСервера;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка при создании менеджера криптографии на сервере:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС
			+ НСтр("ru = 'Укажите настройки криптографии согласно инструкции фирмы-производителя криптопровайдера.'");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(МенеджерКриптографии, ОбщиеНастройки);
	
	Возврат МенеджерКриптографии;
КонецФункции

// Сохраняет настройки текущего пользователя для работы с электронной подписью.
Процедура СохранитьПерсональныеНастройки(ПерсональныеНастройки) Экспорт
	КлючПодсистемы = КлючХраненияНастроек();
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючПодсистемы, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

// Ключ, который используется для хранения настроек подсистемы.
Функция КлючХраненияНастроек()
	Возврат "ЭЦП"; // Не заменять на "ЭП". Используется для обратной совместимости.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет справочник НазначенияСертификатовЭП значениями из макета
Процедура УдалитьСтарыеИЗаполнитьНазначенияСертификатовЭП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МакетУдаленный = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("УдалитьНазначенияСертификатов");
	ТаблицаЗначенийУдаленный = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетУдаленный.ПолучитьТекст()).Данные;
	
	Макет = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("НазначенияСертификатов");
	ТаблицаЗначений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из ТаблицаЗначенийУдаленный Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка <> Неопределено И НЕ СпрСсылка.Пустая() Тогда
				
				СправочникОбъект = СпрСсылка.ПолучитьОбъект();
				СправочникОбъект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Запись Из ТаблицаЗначений Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка = Неопределено ИЛИ СпрСсылка.Пустая() Тогда
				Элемент = Справочники.НазначенияСертификатовЭП.СоздатьЭлемент();
				Элемент.Код = Запись.Code;
				Элемент.Наименование = Запись.Name;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет справочник НазначенияСертификатовЭП значениями из макета
Процедура ЗаполнитьНазначенияСертификатовЭП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("НазначенияСертификатов");
	ТаблицаЗначений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из ТаблицаЗначений Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка = Неопределено ИЛИ СпрСсылка.Пустая() Тогда
				Элемент = Справочники.НазначенияСертификатовЭП.СоздатьЭлемент();
				Элемент.Код = Запись.Code;
				Элемент.Наименование = Запись.Name;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
