#Область ПрограммныйИнтерфейс

// Устанавливает границы начала и окончания рабочего времени
//
// Параметры:
//	Пользователь - Тип: СправочникСсылка.Пользователи
//	Календари - Тип: Массив[СправочникСсылка.КалендариПланировщика]
//	Начало - Тип: Число
//	Конец - Тип: Число
//
Процедура ПолучитьРабочееВремя(Пользователь, Календари, Начало, Конец) Экспорт
	
	НачалоРабочегоВремени		= РегистрыСведений.НастройкиПланировщика.ПолучитьЗначениеНастройки(Перечисления.ВидыНастроекПланировщика.НачалоРабочегоВремени, Пользователь);
	ОкончаниеРабочегоВремени	= РегистрыСведений.НастройкиПланировщика.ПолучитьЗначениеНастройки(Перечисления.ВидыНастроекПланировщика.ОкончаниеРабочегоВремени, Пользователь);
	
	// Если значения настроек заданы в настройках пользователя, возвращаем заданные значения
	Если НачалоРабочегоВремени <> 0 И ОкончаниеРабочегоВремени <> 24 И НачалоРабочегоВремени < ОкончаниеРабочегоВремени Тогда
		Начало	= НачалоРабочегоВремени;
		Конец	= ОкончаниеРабочегоВремени;
		Возврат;
	КонецЕсли;
	
	НачалоРабочегоВремени		= ?(НачалоРабочегоВремени = 0, 24, НачалоРабочегоВремени);
	ОкончаниеРабочегоВремени	= ?(ОкончаниеРабочегоВремени = 24, 0, ОкончаниеРабочегоВремени);
	
	ПараметрыКалендарей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Календари, "ИспользоватьРабочееВремя,НачалоРабочегоВремени,ОкончаниеРабочегоВремени");
	Для Каждого КлючИЗначение Из ПараметрыКалендарей Цикл
		Реквизиты = КлючИЗначение.Значение;
		
		Если НЕ Реквизиты.ИспользоватьРабочееВремя Тогда
			Продолжить;
		КонецЕсли; 
		
		НачалоРабочегоВремени		= Мин(НачалоРабочегоВремени, Реквизиты.НачалоРабочегоВремени);
		ОкончаниеРабочегоВремени	= Макс(ОкончаниеРабочегоВремени, Реквизиты.ОкончаниеРабочегоВремени);
	КонецЦикла;
		
	Начало	= ?(НачалоРабочегоВремени = 24, 8, НачалоРабочегоВремени);
	Конец	= ?(ОкончаниеРабочегоВремени = 0, 19, ОкончаниеРабочегоВремени);
	
	Если Начало > Конец Тогда
		Начало	= 0;
		Конец	= 24;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив календарей для которых пользователь является владельцем,
// а также общественные календари, если указан соответствующий параметр
//
// Параметры:
//	Пользователь - Тип: СправочникСсылка.Пользователь
//	ВключаяОбщественные - Тип: Булево
//
// Возвращаемое значение:
//	Массив[Структура]
//		Календарь - Тип: СправочникСсылка.КалендариПланировщика
//		Пользователь - Тип: СправочникСсылка.Пользователи
//		КалендарьПредставление - Тип: Строка
//		ПользовательПредставление - Тип: Строка
//		Вид - Тип: Число. 1 - собственный, 2 - общественный
//
Функция ПолучитьКалендариПользователя(Пользователь, ВключаяОбщественные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Общественные", ВключаяОбщественные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСобытийПланировщика.Ссылка КАК Календарь,
	|	ВидыСобытийПланировщика.Владелец КАК Пользователь,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыСобытийПланировщика.Ссылка) КАК КалендарьПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыСобытийПланировщика.Владелец) КАК ПользовательПредставление,
	|	1 КАК Вид
	|ИЗ
	|	Справочник.КалендариПланировщика КАК ВидыСобытийПланировщика
	|ГДЕ
	|	НЕ ВидыСобытийПланировщика.ПометкаУдаления
	|	И ВидыСобытийПланировщика.Владелец = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыСобытийПланировщика.Ссылка,
	|	ВидыСобытийПланировщика.Владелец,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыСобытийПланировщика.Ссылка),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыСобытийПланировщика.Владелец),
	|	2
	|ИЗ
	|	Справочник.КалендариПланировщика КАК ВидыСобытийПланировщика
	|ГДЕ
	|	&Общественные
	|	И НЕ ВидыСобытийПланировщика.ПометкаУдаления
	|	И ВидыСобытийПланировщика.Общественный
	|	И ВидыСобытийПланировщика.Владелец <> &Пользователь";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	
КонецФункции

// Возвращает основной календарь пользователя или первый созданный
//
// Параметры:
//	Пользователь - Тип: СправочникСсылка.Пользователь
//	ВключаяОбщественные - Тип: Булево
//
// Возвращаемое значение:
//	Массив[Структура]
//		Календарь - Тип: СправочникСсылка.КалендариПланировщика
//		Пользователь - Тип: СправочникСсылка.Пользователи
//		КалендарьПредставление - Тип: Строка
//		ПользовательПредставление - Тип: Строка
//		Вид - Тип: Число. 1 - собственный, 2 - общественный
//
Функция ПолучитьОсновнойКалендарьПользователя(Пользователь) Экспорт
	
	ОсновнойКалендарь = ПланировщикДанныеПереопределяемый.ПолучитьОсновнойКалендарьПользователя(Пользователь);
	Если ТипЗнч(ОсновнойКалендарь) = Тип("СправочникСсылка.КалендариПланировщика") И ЗначениеЗаполнено(ОсновнойКалендарь) Тогда
		Возврат ОсновнойКалендарь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КалендариПланировщика.Ссылка
	|ИЗ
	|	Справочник.КалендариПланировщика КАК КалендариПланировщика
	|ГДЕ
	|	КалендариПланировщика.Владелец = &Пользователь
	|	И НЕ КалендариПланировщика.ПометкаУдаления
	|	И НЕ КалендариПланировщика.Общественный
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендариПланировщика.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.КалендариПланировщика.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Возвращает структуру с данными реквизитов события. Если передана не ссылка,
// а структура, тогда проверяется наличие всех данных в структуре
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика, Структура
//		Обязательный ключ структуры: Ссылка
//	СписокКолонок - Тип: Строка
//
// Возвращаемое значение:
//	Структура
//
Функция ПолучитьСтруктуруРеквизитовСобытия(знач СобытиеСсылка, СписокКолонок) Экспорт
	Если ПроверитьСтруктуруЗначенийСобытия(СобытиеСсылка, СписокКолонок) Тогда
		Реквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СобытиеСсылка);
	Иначе
		Если ТипЗнч(СобытиеСсылка) = Тип("Структура") Тогда
			СобытиеСсылка = СобытиеСсылка.Ссылка;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеСсылка, СписокКолонок);
	КонецЕсли;
	
	Возврат Реквизиты;
КонецФункции

// Возвращает идентификатор пользователя в событии. Если никак не задействован возвращается Неопределено.
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//	ПользовательСсылка - Тип: СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//	УникальныйИдентификатор, Неопределено.
//
Функция ПроверитьУчастиеПользователяВСобытии(знач СобытиеСсылка, знач ПользовательСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие"		, СобытиеСсылка);
	Запрос.УстановитьПараметр("Участник"	, ПользовательСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСобытийПланировщика.Идентификатор
	|ИЗ
	|	РегистрСведений.УчастникиСобытийПланировщика КАК УчастникиСобытийПланировщика
	|ГДЕ
	|	УчастникиСобытийПланировщика.Событие = &Событие
	|	И УчастникиСобытийПланировщика.Участник = &Участник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Идентификатор; 
	
КонецФункции

// Заполнение оповещений по событий пользователя
Процедура ЗаполнитьОповещенияПоСобытию(СобытиеСсылка, Отказ = Ложь) Экспорт
	//Реквизиты	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеСсылка, "Ссылка, Владелец, Код, Наименование, НачалоСобытия, ОкончаниеСобытия, Статус, Повторять, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания, ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения");
	//ТекущаяДата	= ТекущаяДатаСеанса();
	//	
	//ТаблицаЗаполнения = ПолучитьТаблицуОповещений(Реквизиты, КонецНедели(ТекущаяДата + 7*86400));
	//Если НЕ ТипЗнч(ТаблицаЗаполнения) = Тип("ТаблицаЗначений") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//НачатьТранзакцию();
	//
	//Попытка
	//	
	//	// Добавляем новые записи
	//	Для Каждого СтрокаТаблицы Из ТаблицаЗаполнения Цикл
	//		
	//		Если СтрокаТаблицы.Вид = 1 Тогда
	//			НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	//			НаборЗаписей.Отбор.Пользователь.Установить(Реквизиты.Владелец, Истина);
	//			НаборЗаписей.Отбор.Источник.Установить(СтрокаТаблицы.Источник, Истина);
	//			НаборЗаписей.Прочитать();
	//			НаборЗаписей.Очистить();
	//			
	//			Если НЕ СтрокаТаблицы.Удалить Тогда
	//				ЗаписьРегистра = НаборЗаписей.Добавить();
	//				ЗаписьРегистра.Пользователь = Реквизиты.Владелец;
	//				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
	//			КонецЕсли;
	//			
	//			НаборЗаписей.Записать(Истина);
	//		ИначеЕсли СтрокаТаблицы.Вид = 2 ИЛИ СтрокаТаблицы.Вид = 3 Тогда
	//			НаборЗаписей = РегистрыСведений.ОповещенияПланировщика.СоздатьНаборЗаписей();
	//			НаборЗаписей.Отбор.Пользователь.Установить(Реквизиты.Владелец, Истина);
	//			НаборЗаписей.Отбор.Событие.Установить(СтрокаТаблицы.Событие, Истина);
	//			НаборЗаписей.Отбор.Идентификатор.Установить(СтрокаТаблицы.Идентификатор, Истина);
	//			НаборЗаписей.Прочитать();
	//			
	//			Если СтрокаТаблицы.Удалить Тогда
	//				НаборЗаписей.Очистить();
	//			Иначе
	//				Если НаборЗаписей.Количество() > 0 Тогда
	//					ЗаписьРегистра = НаборЗаписей[0];
	//					Если ЗаписьРегистра.ВремяСобытия = СтрокаТаблицы.ВремяСобытия И ЗаписьРегистра.Выполнено Тогда
	//						Продолжить;
	//					Иначе
	//						ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
	//					КонецЕсли;
	//				Иначе
	//					ЗаписьРегистра = НаборЗаписей.Добавить();
	//					ЗаписьРегистра.Пользователь = Реквизиты.Владелец;
	//					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			НаборЗаписей.Записать(Истина);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение
	//	
	//	Отказ = Истина;
	//	
	//	ОтменитьТранзакцию();
	//	
	//КонецПопытки;		                                 
КонецПроцедуры

// Выполняет уведомления пользователей о событиях планировщика, где пользователи являются участниками
//
// Параметры: 
//	Параметры - Тип: Структура. Настройка отбора.
//		Событие - Тип: СправочникСсылка.СобытияПланировщика.
//
Процедура ОтправитьОповещенияУчастникамСобытия(СобытиеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие"		, СобытиеСсылка);
	Запрос.УстановитьПараметр("Организатор"	, Перечисления.ВидыУчастниковСобытийПланировщика.Организатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСобытийПланировщика.Событие,
	|	УчастникиСобытийПланировщика.ВидУчастника,
	|	УчастникиСобытийПланировщика.Идентификатор,
	|	УчастникиСобытийПланировщика.Участник,
	|	УчастникиСобытийПланировщика.АдресЭлектроннойПочты,
	|	УчастникиСобытийПланировщика.Представление,
	|	УчастникиСобытийПланировщика.ОригинальноеСобытие,
	|	УчастникиСобытийПланировщика.Календарь,
	|	УчастникиСобытийПланировщика.Обязательно,
	|	УчастникиСобытийПланировщика.Организатор,
	|	УчастникиСобытийПланировщика.Синхронизировать,
	|	УчастникиСобытийПланировщика.Уведомлять,
	|	УчастникиСобытийПланировщика.Ответ,
	|	УчастникиСобытийПланировщика.Комментарий,
	|	УчастникиСобытийПланировщика.Отправлено,
	|	УчастникиСобытийПланировщика.Событие.НачалоСобытия,
	|	УчастникиСобытийПланировщика.Событие.ОкончаниеСобытия,
	|	УчастникиСобытийПланировщика.Событие.ВесьДень,
	|	УчастникиСобытийПланировщика.Событие.Наименование,
	|	УчастникиСобытийПланировщика.Событие.Календарь
	|ИЗ
	|	РегистрСведений.УчастникиСобытийПланировщика КАК УчастникиСобытийПланировщика
	|ГДЕ
	|	УчастникиСобытийПланировщика.Событие = &Событие
	|	И УчастникиСобытийПланировщика.ВидУчастника <> &Организатор
	|	И УчастникиСобытийПланировщика.Уведомлять
	|	И НЕ УчастникиСобытийПланировщика.Отправлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись	= РегистрыСведений.НастройкиПланировщика.ПолучитьЗначениеНастройки(Перечисления.ВидыНастроекПланировщика.СистемнаяУчетнаяЗапись);
	ТекПользователь	= Пользователи.ТекущийПользователь();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Уведомлять Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Отправлено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли; 
		
		КалендарьСсылка = ?(Выборка.Организатор, Выборка.СобытиеКалендарь, Выборка.Календарь);
		
		СтруктураСобытия = Новый Структура("Ссылка, НачалоКалендаря, КонецКалендаря, ВесьДень, Наименование, Календарь",
			Выборка.Событие, Выборка.СобытиеНачалоСобытия, Выборка.СобытиеОкончаниеСобытия, Выборка.СобытиеВесьДень, Выборка.СобытиеНаименование, КалендарьСсылка);
		
		ТекстПисьмаHTML = ПолучитьТекстHTMLУведомленияСобытия(Новый Структура("Вид", 4), СтруктураСобытия);
		ТекстПисьма		= НСтр("ru='Приглашение: '") + ПолучитьТекстУведомленияСобытия(Новый Структура("Вид", 4), СтруктураСобытия);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Пользователь"		, Выборка.Участник);
		СтруктураДанных.Вставить("ДатаНапоминания"	, КонецМинуты(ТекущаяДатаСеанса() + 1));
		СтруктураДанных.Вставить("Событие"			, Выборка.Событие);
		СтруктураДанных.Вставить("Идентификатор"	, Выборка.Идентификатор);
		СтруктураДанных.Вставить("Вид"				, 2);
		СтруктураДанных.Вставить("Текст"			, ТекстПисьма);
		СтруктураДанных.Вставить("ТекстHTML"		, ТекстПисьмаHTML);
		СтруктураДанных.Вставить("НачалоСобытия"	, Выборка.СобытиеНачалоСобытия);
		СтруктураДанных.Вставить("ОкончаниеСобытия"	, Выборка.СобытиеОкончаниеСобытия);
		СтруктураДанных.Вставить("ВесьДень"			, Выборка.СобытиеВесьДень);
		СтруктураДанных.Вставить("АдресЭП"			, Выборка.АдресЭлектроннойПочты);
		СтруктураДанных.Вставить("Телефон"			, "");
		СтруктураДанных.Вставить("УчетнаяЗапись"	, УчетнаяЗапись);
		
		Результат = ОтправитьУведомлениеСобытияПользователю(ТекПользователь, СтруктураДанных); 
		
		Если Результат Тогда
			МенеджерЗаписи = РегистрыСведений.УчастникиСобытийПланировщика.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Событие		= Выборка.Событие;
			МенеджерЗаписи.ВидУчастника	= Выборка.ВидУчастника;
			МенеджерЗаписи.Идентификатор= Выборка.Идентификатор;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Отправлено = Истина;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "Планировщик";
	Описание.Версия = "1.2.1.0";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ЦветоваяГаммаПланировщика.ВыполнитьЗагрузкуСправочникаЦветоваяГаммаПоУмолчанию";
	
	// позволяет не снимать данный модуль с поддержки
	// и вызывать обновления в расширениях или из др. модулей
	ПланировщикДанныеПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#Область Обновление_2_1_0_1

// Выполняется на версию 2.1.0.1. Актуализирует признак использования
// наборов свойств справочника Внешние пользователи.
//
Процедура ОбновитьИспользованиеНаборовСвойствВнешнихПользователей() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		
		ПараметрыНабора = МодульУправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Истина;
		МодульУправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПомещенияПланировщика", ПараметрыНабора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НапоминанияПланировщика

// Удаляет старые и создает новые записи уведомлений по указанному периоду
//
// Параметры:
//	Параметры - Тип: Структура. Настройка отбора.
//		НачалоПериода - Тип: Дата. Не обязательно
//		КонецПериода - Тип: Дата. Не обязательно
//	АдресХранилища - Тип: Строка. Адрес хранилища для помещения результата выполнения
//
Процедура ОбновитьЗаписиНапоминанийЗаПериод(Параметры, АдресХранилища = "") Экспорт

	УдалитьЗаписиУведомленийСобытийПланировщика(Параметры);
	ОбновитьЗаписиУведомленийСобытийПланировщика(Параметры, АдресХранилища);
	
КонецПроцедуры

// Удаляет старые и создает новые записи уведомлений по указанному событию
//
// Параметры:
//	Параметры - Тип: Структура. Настройка отбора.
//		События - Тип: СправочникСсылка.СобытияПланировщика, Массив. Не обязательно
//	АдресХранилища - Тип: Строка. Адрес хранилища для помещения результата выполнения
//
Процедура ОбновитьЗаписиНапоминанийПоСобытию(Параметры, АдресХранилища = "") Экспорт
	
	УдалитьЗаписиУведомленийСобытийПланировщика(Параметры);
	ОбновитьЗаписиУведомленийСобытийПланировщика(Параметры, АдресХранилища);
	
КонецПроцедуры

// Выполняет уведомления пользователей о событиях планировщика
//
// Параметры: 
//	ПользовательСсылка - Тип: СправочникСсылка.Пользователи
//	ДатаНапоминания - Тип: Дата
//
Процедура ОбработатьУведомленияСобытийПользователя(ПользовательСсылка, ДатаНапоминания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	, ПользовательСсылка);
	Запрос.УстановитьПараметр("ДатаНапоминания"	, ДатаНапоминания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомленияСобытийПланировщика.Пользователь,
	|	УведомленияСобытийПланировщика.ДатаНапоминания,
	|	УведомленияСобытийПланировщика.Событие,
	|	УведомленияСобытийПланировщика.Идентификатор,
	|	УведомленияСобытийПланировщика.Вид,
	|	УведомленияСобытийПланировщика.Текст,
	|	УведомленияСобытийПланировщика.ТекстHTML,
	|	УведомленияСобытийПланировщика.НачалоСобытия,
	|	УведомленияСобытийПланировщика.ОкончаниеСобытия,
	|	УведомленияСобытийПланировщика.ВесьДень
	|ИЗ
	|	РегистрСведений.УведомленияСобытийПланировщика КАК УведомленияСобытийПланировщика
	|ГДЕ
	|	УведомленияСобытийПланировщика.Пользователь = &Пользователь
	|	И УведомленияСобытийПланировщика.ДатаНапоминания <= &ДатаНапоминания
	|	И НЕ УведомленияСобытийПланировщика.Выполнено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	АдресЭП = ПланировщикДанныеПереопределяемый.ПолучитьАдресЭлектроннойПочтыПользователя(ПользовательСсылка);
	Телефон	= ПланировщикДанныеПереопределяемый.ПолучитьНомерМобильногоТелефонаПользователя(ПользовательСсылка);
	
	СтруктураДанных = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	СтруктураДанных.Вставить("АдресЭП"			, АдресЭП);
	СтруктураДанных.Вставить("Телефон"			, Телефон);
	СтруктураДанных.Вставить("УчетнаяЗапись"	, РегистрыСведений.НастройкиПланировщика.ПолучитьЗначениеНастройки(Перечисления.ВидыНастроекПланировщика.СистемнаяУчетнаяЗапись));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Выполним обработку события
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		Результат = ОтправитьУведомлениеСобытияПользователю(ПользовательСсылка, СтруктураДанных);
		Если НЕ Результат Тогда
			Продолжить;
		КонецЕсли;
		
		// Установим признак "Выполнено"
		ЗаписьУведомление = РегистрыСведений.УведомленияСобытийПланировщика.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьУведомление, Выборка, "Пользователь, ДатаНапоминания, Событие, Идентификатор");
		ЗаписьУведомление.Прочитать();
		ЗаписьУведомление.Выполнено = Результат;
		ЗаписьУведомление.Записать(Истина);
	КонецЦикла;   
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработка события модуля формы ПриСозданииНаСервере
//		
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Инициализация компоновщика настроек СКД
	ИнициализироватьКомпоновщикНастроекКомпоновкиДанных(Форма.Объект.Компоновщик, Форма.УникальныйИдентификатор);
	
	// Обработка переданных в форму параметров
	ЗадачаИсполнителя = Неопределено;
	Если НЕ Форма.Параметры.Свойство("ЗадачаИсполнителя", ЗадачаИсполнителя) И ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Объект.Компоновщик.Настройки.Отбор
			, "Ссылка.ЗадачаИсполнителя"
			, ЗадачаИсполнителя
			, ВидСравненияКомпоновкиДанных.Равно
			, "Отбор по задаче"
			, Истина
			, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	// Обработка режима подбора времени
	Если Форма.Параметры.РежимПодбора И ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаИсполнителя, "Ссылка, Наименование, Описание");
		
		ТекДатаСеанса	= ТекущаяДатаСеанса();
		НачалоСобытия	= НачалоЧаса(ТекДатаСеанса) - НачалоДня(ТекДатаСеанса);
		Если Форма.РабочееВремя И (НачалоСобытия < Форма.Объект.НачалоРабочегоВремени 
			ИЛИ НачалоСобытия >= Форма.Объект.ОкончаниеРабочегоВремени) Тогда
			Форма.РабочееВремя = Ложь;
		КонецЕсли;
		
		Событие = Новый Структура;
		Событие.Вставить("Идентификатор"	, "newEvent");
		Событие.Вставить("Наименование"		, РеквизитыЗадачи.Наименование);
		Событие.Вставить("ВесьДень"			, Ложь);
		Событие.Вставить("Начало"			, НачалоЧаса(ТекДатаСеанса));
		Событие.Вставить("Конец"			, НачалоЧаса(ТекДатаСеанса) + 1800);
		Событие.Вставить("Редактирование"	, Истина);
		Событие.Вставить("ЦветФонаHEX"		, "#e6e6fa");
		Событие.Вставить("ЦветТекстаHEX"	, "#1b1b1b");
		Событие.Вставить("Ссылка"			, РеквизитыЗадачи.Ссылка);

		Форма.НовоеСобытие = Новый ФиксированнаяСтруктура(Событие);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заполнении данных для вывода в планировщике
// Сбор данных осуществляется при следующих событиях:
//	- обновление, изменение периода, изменение вида (день, месяц и т.д.),
//	- оповещения об изменениях данных
//
// Параметры:
//	Форма - Тип: УправляемаяФорма.
//
Процедура ПриОбновленииДанныхПланировщика(Форма) Экспорт
	
	ТекПользователь	= Пользователи.ТекущийПользователь();
	
	//КэшСобытий = Новый Соответствие;
	//Для Каждого СтрокаТаблицы Из Форма.Объект.ТаблицаСобытий Цикл
	//	ЕстьНапоминания = КэшСобытий.Получить(СтрокаТаблицы.Ссылка);
	//	Если ЕстьНапоминания = Неопределено Тогда
	//		ЕстьНапоминания = ЕстьНапоминанияПоСобытию(СтрокаТаблицы.Ссылка, ТекПользователь);
	//		КэшСобытий.Вставить(СтрокаТаблицы.Ссылка, ЕстьНапоминания);
	//	КонецЕсли;
	//	
	//	Если НЕ ЕстьНапоминания Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	 Желательно иметь две картинки черную и белую, в зависимости от шрифта выводить под цвет
	//	 для демонстрации выводим всегда черную
	//	СтрокаТаблицы.Картинка = "http://icons.iconarchive.com/icons/iconsmind/outline/16/Clock-icon.png";
	//КонецЦикла;
	
КонецПроцедуры

// Возвращает события планировщика с данными
//
// Параметры:
//	Форма - Тип: УправляемаяФорма.
//
// Возвращаемое значение:
//	ТаблицаЗначений. См. ПолучитьТаблицуСобытий
//
Функция ПолучитьСобытия(Форма) Экспорт
	
	Пользователь	= Форма.Объект.ТекущийПользователь;
	НачалоПериода	= Форма.Объект.НачалоПериода;
	КонецПериода	= Форма.Объект.ОкончаниеПериода;
	Компоновщик 	= Форма.Объект.Компоновщик;
	
	Если НачалоПериода = Дата(1, 1, 1) Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если КонецПериода = Дата(1, 1, 1) Тогда
		КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Календари = Новый Массив;
	МассивСтрок = Форма.Объект.Календари.НайтиСтроки(Новый Структура("Использование", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Календари.Добавить(СтрокаТаблицы.Календарь);
	КонецЦикла;
	МассивСтрок = Форма.Объект.ОбщиеКалендари.НайтиСтроки(Новый Структура("Использование", Истина));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Календари.Добавить(СтрокаТаблицы.Календарь);
	КонецЦикла;
	
	Настройки = Новый Структура("Исполнитель, НачалоПериода, КонецПериода, Календари",
		Пользователь,
		НачалоПериода,
		КонецПериода,
		Календари);
		
	ТаблицаСобытий = ПолучитьТаблицуСобытий(Настройки, Компоновщик);
	
	Возврат ТаблицаСобытий;
	
КонецФункции

#КонецОбласти

#Область ШинаДанныхПрограммныйИнтерфейс

// Возвращает массив данных напоминаний по событию
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//
// Возвращаемое значение:
//	Массив[Структура] (см. ПланировщикСлужебныйКлиентСервер.ПолучитьСтруктуруНапоминания)
//
Функция ПолучитьДанныеНапоминаний(знач СобытиеСсылка) Экспорт
	
	МассивНапоминаний = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СобытиеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Напоминания.Пользователь КАК Пользователь,
	|	Напоминания.Идентификатор КАК Идентификатор,
	|	Напоминания.Вид,
	|	Напоминания.Интервал,
	|	Напоминания.ВидИнтервала,
	|	Напоминания.ИнтервалСекунды
	|ИЗ
	|	РегистрСведений.НапоминанияСобытийПланировщика КАК Напоминания
	|ГДЕ
	|	Напоминания.Событие = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	Идентификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивНапоминаний;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураНапоминания = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруНапоминания();
		ЗаполнитьЗначенияСвойств(СтруктураНапоминания, Выборка);
		МассивНапоминаний.Добавить(СтруктураНапоминания);
	КонецЦикла;  
	
	Возврат МассивНапоминаний;
	
КонецФункции

// Возвращает массив данных участников по событию
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//
// Возвращаемое значение:
//	Массив[Структура] (см. ПланировщикСлужебныйКлиентСервер.ПолучитьСтруктуруУчастника)
//
Функция ПолучитьДанныеУчастников(знач СобытиеСсылка) Экспорт
	
	МассивУчастников = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СобытиеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСобытийПланировщика.Идентификатор,
	|	УчастникиСобытийПланировщика.ВидУчастника,
	|	УчастникиСобытийПланировщика.Участник,
	|	УчастникиСобытийПланировщика.Представление,
	|	УчастникиСобытийПланировщика.ОригинальноеСобытие,
	|	УчастникиСобытийПланировщика.АдресЭлектроннойПочты,
	|	УчастникиСобытийПланировщика.Обязательно,
	|	УчастникиСобытийПланировщика.Организатор,
	|	УчастникиСобытийПланировщика.Уведомлять,
	|	УчастникиСобытийПланировщика.Ответ,
	|	УчастникиСобытийПланировщика.Комментарий,
	|	УчастникиСобытийПланировщика.Календарь,
	|	УчастникиСобытийПланировщика.Отправлено
	|ИЗ
	|	РегистрСведений.УчастникиСобытийПланировщика КАК УчастникиСобытийПланировщика
	|ГДЕ
	|	УчастникиСобытийПланировщика.Событие = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивУчастников;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураУчастника = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруУчастника();
		ЗаполнитьЗначенияСвойств(СтруктураУчастника, Выборка);
		МассивУчастников.Добавить(СтруктураУчастника);
	КонецЦикла;  
	
	Возврат МассивУчастников;
	
КонецФункции

// Возвращает заполненную структуру с данными по событию, используется
// в основном для заполнения формы события
//
// Параметры:
//	СобытиеСсылка - Тип: СправочникСсылка.СобытияПланировщика
//
// Возвращаемое значение:
//	Структура (см. ПланировщикСлужебныйКлиентСервер.ПолучитьСтруктуруСобытия)
//
Функция ПолучитьДанныеСобытия(знач СобытиеСсылка) Экспорт

	РеквизитыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеСсылка, "ВерсияДанных, Владелец, Ссылка, Код, Наименование, ВесьДень, Календарь,
	|МестоСобытия, МестоСобытияЗначенияПолей, НачалоСобытия, ОкончаниеСобытия, ОригинальноеНачалоСобытия, ОригинальноеСобытие, Содержание, Статус,
	|ПовторВидОкончания, ПовторДниПовторения, ПовторИнтервал, ПовторКоличество, ПовторНачало, ПовторОкончание, ПовторПериодичность, ПовторПредставление,
	|Повторять, ЦветФона, ЗадачаИсполнителя");
	
	СтруктураСобытия = ПланировщикДанныеКлиентСервер.ПолучитьСтруктуруСобытия();
	ЗаполнитьЗначенияСвойств(СтруктураСобытия, РеквизитыСобытия);
	ЗаполнитьЗначенияСвойств(СтруктураСобытия.НастройкаПовтора, РеквизитыСобытия);
	СтруктураСобытия.Вставить("ВерсияДанных", РеквизитыСобытия.ВерсияДанных);
	СтруктураСобытия.Вставить("Напоминания"	, ПолучитьДанныеНапоминаний(СобытиеСсылка));
	СтруктураСобытия.Вставить("Участники"	, ПолучитьДанныеУчастников(СобытиеСсылка));
	
	Возврат СтруктураСобытия;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ЗаполнитьНапоминанияПланировщика() Экспорт
	
	ЗаписьЖурналаРегистрации(ПланировщикДанныеКлиентСервер.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное заполнение напоминаний в регистр уведомлений'"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоПериода	= НачалоДня(ТекущаяДатаСеанса());
	КонецПериода	= НачалоПериода + ПланировщикКлиентСервер.НеделяВСекундах();
	
	ПараметрыУдалить = Новый Структура;
	ПараметрыУдалить.Вставить("НачалоПериода"	, Дата(1, 1, 1));
	ПараметрыУдалить.Вставить("КонецПериода"	, КонецПериода);
	УдалитьЗаписиУведомленийСобытийПланировщика(ПараметрыУдалить);
	
	// обновим напоминания за период ДатаСеанса + 1 неделя
	ПараметрыОбновить = Новый Структура;
	ПараметрыОбновить.Вставить("НачалоПериода"	, НачалоПериода);
	ПараметрыОбновить.Вставить("КонецПериода"	, КонецПериода);
	ОбновитьЗаписиУведомленийСобытийПланировщика(ПараметрыОбновить, "");
	
	Если НЕ (ПараметрыОбновить.Свойство("Выполнено") И ПараметрыОбновить.Выполнено) Тогда
		ЗаписьЖурналаРегистрации(ПланировщикДанныеКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , ,
			НСтр("ru = 'Аварийное завершение регламентного заполнения напоминаний в регистр уведомлений'"));
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ПланировщикДанныеКлиентСервер.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Завершено регламентное заполнение напоминаний в регистр уведомлений'"));
	
КонецПроцедуры

Процедура ОбработатьНапоминанияПланировщика() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНапоминания = НачалоМинуты(ТекущаяДатаСеанса()) + 120;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНапоминания", ДатаНапоминания);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УведомленияСобытийПланировщика.Пользователь
	|ИЗ
	|	РегистрСведений.УведомленияСобытийПланировщика КАК УведомленияСобытийПланировщика
	|ГДЕ
	|	УведомленияСобытийПланировщика.ДатаНапоминания <= &ДатаНапоминания
	|	И НЕ УведомленияСобытийПланировщика.Выполнено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Выборка.Пользователь);
		МассивПараметров.Добавить(ДатаНапоминания);
		
		ФоновыеЗадания.Выполнить("ПланировщикДанные.ОбработатьУведомленияСобытийПользователя", МассивПараметров,, НСтр("ru='Уведомление пользователя о событиях планировщика'")); 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает таблицу периодов в котором должно происходить событие
// согласно настройке повторения или значению начало-конец события
//
// Параметры:
//	ПараметрСобытие - Тип: СправочникСсылка.СобытияПланировщика, Структура.
//	НачалоПериода - Тип: Дата. Начало периода для формирования таблицы повторений.
//	КонецПериода - Тип: Дата. Конец периода для формирования таблицы повторений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//		Период - Тип: Дата
//		Счетчик - Тип: Число (номер повтора в цепочке повторений)
//
Функция ПолучитьТаблицуПериодовСобытия(знач ПараметрСобытие, знач НачалоПериода, знач КонецПериода) Экспорт
	
	ТаблицаПовторов = Новый ТаблицаЗначений;
	ТаблицаПовторов.Колонки.Добавить("Период"	, Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПовторов.Колонки.Добавить("Счетчик"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаПовторов.Индексы.Добавить("Период");
	
	НачалоПериода = ?(НачалоПериода = Неопределено, Дата(1, 1, 1), НачалоПериода);
	Если НачалоПериода > КонецПериода Тогда
		ВызватьИсключение НСтр("ru='Начало периода больше окончания. Проверьте значения параметров.'");
	КонецЕсли;
	
	СписокКолонок = "НачалоСобытия, Повторять, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания, ПовторПериодичность,"
					+ "ПовторНачало, ПовторОкончание, ПовторДниПовторения";
	Реквизиты = ПолучитьСтруктуруРеквизитовСобытия(ПараметрСобытие, СписокКолонок);
	
	Если НЕ Реквизиты.Повторять Тогда
		НоваяСтрока = ТаблицаПовторов.Добавить();
		НоваяСтрока.Период	= Реквизиты.НачалоСобытия;
		НоваяСтрока.Счетчик	= 1;
	Иначе 
		Интервал			= ?(Реквизиты.ПовторИнтервал = 0, 1, Реквизиты.ПовторИнтервал);
		Ограничение			= ?(Реквизиты.ПовторВидОкончания = 2, Мин(КонецПериода, Реквизиты.ПовторОкончание), КонецПериода);
		МаксПовторений		= Реквизиты.ПовторКоличество;
		ДниНеделиПропуск	= ПланировщикДанныеКлиентСервер.ПолучитьДниНеделиБезПовторений(Реквизиты);
		
		// Пересчет с даты начала повторений до даты построения таблицы
		Счетчик			= 0;
		ТекущийПериод	= Реквизиты.ПовторНачало;
		ОпределитьНачальныеЗначенияРасчетаПериодовПовторений(Реквизиты, НачалоПериода, КонецПериода, Счетчик, ТекущийПериод);
		
		// Если в результате пересчета количество повторений стало больше допустимых
		// возвращаем пустую таблицу
		Если Реквизиты.ПовторВидОкончания = 1 И Счетчик > МаксПовторений Тогда
			Возврат ТаблицаПовторов;
		КонецЕсли;
		
		// Заполняем таблицу периодов исходя из подготовленных данных
		Если Реквизиты.ПовторПериодичность = 1 // каждый день
			ИЛИ Реквизиты.ПовторПериодичность = 2 // каждый рабочий день
			ИЛИ Реквизиты.ПовторПериодичность = 3 // каждый пн, ср, пт
			ИЛИ Реквизиты.ПовторПериодичность = 4 // каждый вт, чт
			ИЛИ Реквизиты.ПовторПериодичность = 5 Тогда // каждую неделю
			
			Пока ТекущийПериод <= Ограничение 
				И (Реквизиты.ПовторВидОкончания <> 1
				ИЛИ (Реквизиты.ПовторВидОкончания = 1 И Счетчик < МаксПовторений)) Цикл
				
				// Контроль дня недели
				ТекущийДеньНедели = ДеньНедели(ТекущийПериод);
				Если НЕ ДниНеделиПропуск.Найти(ТекущийДеньНедели) = Неопределено Тогда
					ТекущийПериод = КонецДня(ТекущийПериод) + 1;
					
					Продолжить;
				КонецЕсли;
				
				// Добавляем строку периода
				НоваяСтрока = ТаблицаПовторов.Добавить();
				НоваяСтрока.Период	= ТекущийПериод;
				НоваяСтрока.Счетчик	= Счетчик + 1;
				
				Счетчик			= Счетчик + 1;
				ТекущийПериод	= КонецДня(ТекущийПериод) + 1;
				ТекущийПериод	= ТекущийПериод + (Интервал - 1) * ?(Реквизиты.ПовторПериодичность = 5, 7, 1) * 86400;
				
			КонецЦикла;
		
		ИначеЕсли Реквизиты.ПовторПериодичность = 6 Тогда // каждый месяц
			
			Если Реквизиты.ПовторДниПовторения = "1" Тогда // день месяца
				ЧислоМесяца 	= День(Реквизиты.НачалоСобытия);
				ДеньНедели		= 0;
				НеделяМесяца	= 0;
			ИначеЕсли Реквизиты.ПовторДниПовторения = "2" Тогда // день недели
				ЧислоМесяца		= 0;
				ДеньНедели		= ДеньНедели(Реквизиты.НачалоСобытия);
				ПоправкаНедели	= ?(ДеньНедели >= ДеньНедели(НачалоМесяца(Реквизиты.НачалоСобытия)), 1, 0);
				НеделяМесяца	= НеделяГода(Реквизиты.НачалоСобытия) - НеделяГода(НачалоМесяца(Реквизиты.НачалоСобытия)) + ПоправкаНедели;
			КонецЕсли;
			
			Пока ТекущийПериод <= Ограничение 
				И (Реквизиты.ПовторВидОкончания <> 1
				ИЛИ (Реквизиты.ПовторВидОкончания = 1 И Счетчик < МаксПовторений)) Цикл
				
				// Проверяем день месяца или день недели месяца
				ТекЧислоМесяца		= День(ТекущийПериод);
				ТекДеньНедели		= ДеньНедели(ТекущийПериод);
				ТекПоправкаНедели	= ?(ТекДеньНедели >= ДеньНедели(НачалоМесяца(ТекущийПериод)), 1, 0);
				ТекНеделяМесяца		= НеделяГода(ТекущийПериод) - НеделяГода(НачалоМесяца(ТекущийПериод)) + ТекПоправкаНедели;
				Если (ЧислоМесяца > 0 И НЕ ТекЧислоМесяца = ЧислоМесяца)
					ИЛИ (ДеньНедели > 0 И НЕ (ДеньНедели = ТекДеньНедели И НеделяМесяца = ТекНеделяМесяца)) Тогда
					
					СледующийМесяц = НачалоМесяца(ДобавитьМесяц(ТекущийПериод, Интервал));
					ТекущийПериод = СледующийМесяц + ?(ЧислоМесяца > 0, ЧислоМесяца - 1, (НеделяМесяца-1) * 7 + ДеньНедели - ДеньНедели(СледующийМесяц)) * 86400; 
					Продолжить;
					
				КонецЕсли;
				
				// Добавляем строку периода
				НоваяСтрока = ТаблицаПовторов.Добавить();
				НоваяСтрока.Период	= ТекущийПериод;
				НоваяСтрока.Счетчик	= Счетчик + 1;
				
				Счетчик			= Счетчик + 1;
				СледующийМесяц	= НачалоМесяца(ДобавитьМесяц(ТекущийПериод, Интервал));
				ТекущийПериод	= СледующийМесяц + ?(ЧислоМесяца > 0, ЧислоМесяца - 1, (НеделяМесяца-1) * 7 + ДеньНедели - ДеньНедели(СледующийМесяц)) * 86400;
				
			КонецЦикла;
			
		ИначеЕсли Реквизиты.ПовторПериодичность = 7 Тогда // каждый год
			
			Пока ТекущийПериод <= Ограничение 
				И (Реквизиты.ПовторВидОкончания <> 1
				ИЛИ (Реквизиты.ПовторВидОкончания = 1 И Счетчик < МаксПовторений)) Цикл
				
				// Добавляем строку периода
				НоваяСтрока = ТаблицаПовторов.Добавить();
				НоваяСтрока.Период	= ТекущийПериод;
				НоваяСтрока.Счетчик	= Счетчик + 1;
				
				Счетчик			= Счетчик + 1;
				ТекущийПериод	= ДобавитьМесяц(ТекущийПериод, 12 * Интервал);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПовторов;
	
КонецФункции

// Возвращает номер повтора события по данным события, начало повтора, и окончания повтора
//
// Параметры
//	ПараметрСобытие - СправочникСсылка.СобытияПланировщика, Структура.
//	НачалоПовтора - Дата.
//	ОкончаниеПовтора - Дата.
//
// Возвращаемое значение
//	Число
//
Функция ПолучитьНомерПовтораСобытия(ПараметрСобытие, НачалоПовтора, ОкончаниеПовтора) Экспорт
	ТаблицаПериодовСобытия = ПолучитьТаблицуПериодовСобытия(ПараметрСобытие, НачалоПовтора, ОкончаниеПовтора);
	ТаблицаПериодовСобытия.Индексы.Добавить("Период");
	
	Если ТаблицаПериодовСобытия.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокиТаблицы = ТаблицаПериодовСобытия.НайтиСтроки(Новый Структура("Период", НачалоДня(НачалоПовтора)));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		ТаблицаПериодовСобытия.Сортировать("Счетчик УБЫВ");
		Счетчик = ТаблицаПериодовСобытия[0].Счетчик;
	Иначе 
		Счетчик = СтрокиТаблицы[0].Счетчик;
	КонецЕсли;
	
	Возврат Счетчик;	
КонецФункции

// Возвращает период следующего события согласно настройкам повторения после определенного номера
//
Функция ПолучитьПериодСледующегоСобытия(ПараметрСобытие, НачалоПовтора, ОкончаниеПовтора, НомерПовтора) Экспорт
	
	СписокКолонок = "НачалоСобытия, Повторять, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания, ПовторПериодичность"
					+ ", ПовторНачало, ПовторОкончание, ПовторДниПовторения";
	Реквизиты = ПолучитьСтруктуруРеквизитовСобытия(ПараметрСобытие, СписокКолонок);
	
	Если НЕ Реквизиты.Повторять Тогда
		Возврат КонецДня(ОкончаниеПовтора) + 1;
	КонецЕсли;
	
	Интервал		= ?(Реквизиты.ПовторИнтервал = 0, 1, Реквизиты.ПовторИнтервал);
	МаксПовторений	= Реквизиты.ПовторКоличество;
	
	НачалоПериода = НачалоПовтора;
	Если Реквизиты.ПовторВидОкончания = 2 Тогда
		ОкончаниеПериода = Реквизиты.ПовторОкончание;
	ИначеЕсли Реквизиты.ПовторПериодичность = 1 Тогда
		ОкончаниеПериода = ОкончаниеПовтора + 86400 * (Интервал + 1);
	ИначеЕсли Реквизиты.ПовторПериодичность >= 2 И Реквизиты.ПовторПериодичность <= 5 Тогда
		ОкончаниеПериода = ОкончаниеПовтора + 86400 * 8;
	ИначеЕсли Реквизиты.ПовторПериодичность = 6 Тогда
		ОкончаниеПериода = ДобавитьМесяц(ОкончаниеПовтора, 1);
	ИначеЕсли Реквизиты.ПовторПериодичность = 7 Тогда
		ОкончаниеПериода = ДобавитьМесяц(ОкончаниеПовтора, 12);
	КонецЕсли;
	
	ОкончаниеПериода = КонецДня(ОкончаниеПериода) + 1;
	
	ТаблицаПериодов = ПолучитьТаблицуПериодовСобытия(Реквизиты, НачалоПериода, ОкончаниеПериода);
	Если ТаблицаПериодов.Количество() = 0 Тогда
		Возврат КонецДня(ОкончаниеПовтора) + 1;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПериодов.Найти(НомерПовтора+1, "Счетчик");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат КонецДня(ОкончаниеПовтора) + 1;
	Иначе 
		Возврат СтрокаТаблицы.Период;
	КонецЕсли;
КонецФункции

// Возвращает период окончания повторений события по регистру сведений границ повторений
//
// Параметры:
//	ПараметрСобытие - Тип: Структура[Ссылка], СправочникСсылка.СобытияПланировщика
//
// Возвращаемое значение:
//	Дата - окончание периода всех повторений
//
Функция ПолучитьКонецПериодаПовторений(ПараметрСобытие) Экспорт
	
	Если ТипЗнч(ПараметрСобытие) = Тип("Структура") Тогда
		СобытиеСсылка = ПараметрСобытие.Ссылка;
	Иначе
		СобытиеСсылка = ПараметрСобытие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие", СобытиеСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГраницыСобытийПланировщика.ОкончаниеПовторений
	|ИЗ
	|	РегистрСведений.ГраницыСобытийПланировщика КАК ГраницыСобытийПланировщика
	|ГДЕ
	|	ГраницыСобытийПланировщика.Событие = &Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(3999, 12, 31);
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОкончаниеПовторений;
	КонецЕсли;
	
КонецФункции

// Рассчитывает и возвращает период окончания повторений события по таблице периодов
//
Функция РассчитатьКонецПериодаПовторений(ПараметрСобытие) Экспорт
	
	СписокКолонок = "Ссылка, НачалоСобытия, ОкончаниеСобытия, Статус, Повторять, ПовторИнтервал, ПовторКоличество"
					+", ПовторВидОкончания, ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения";
	Реквизиты = ПолучитьСтруктуруРеквизитовСобытия(ПараметрСобытие, СписокКолонок);
	
	Если НЕ Реквизиты.Повторять Тогда
		Возврат Реквизиты.ОкончаниеСобытия;
	ИначеЕсли Реквизиты.ПовторВидОкончания = 0 Тогда
		Возврат Дата(3999, 12, 31);
	ИначеЕсли Реквизиты.ПовторВидОкончания = 2 Тогда
		Возврат Реквизиты.ПовторОкончание;
	КонецЕсли;
	
	Счетчик		= 0;
	ТекПериод	= Реквизиты.ПовторНачало;
	НачПериод	= Дата(3999, 12, 31);
	ОпределитьНачальныеЗначенияРасчетаПериодовПовторений(Реквизиты, НачПериод, НачПериод, Счетчик, ТекПериод);
	Пока Счетчик > Реквизиты.ПовторКоличество Цикл
		ДоляСдвига	= Реквизиты.ПовторКоличество / Счетчик * 0.9;
		
		Счетчик		= 0;
		ТекПериод	= Реквизиты.ПовторНачало;
		НачПериод	= Реквизиты.ПовторНачало + (НачПериод - Реквизиты.ПовторНачало) * ДоляСдвига;
		
		ОпределитьНачальныеЗначенияРасчетаПериодовПовторений(Реквизиты, НачПериод, НачПериод, Счетчик, ТекПериод);
	КонецЦикла;
	
	// Пока таблица периодов содержит строки делает запрос
	ДатаМаксимум	= Дата(1, 1, 1);
	ТаблицаПериодов = ПолучитьТаблицуПериодовСобытия(Реквизиты, НачПериод, Дата(3999, 12, 31));
	Если ТаблицаПериодов.Количество() > 0 Тогда
		ТаблицаПериодов.Сортировать("Период УБЫВ");
		ДатаМаксимум = Макс(ДатаМаксимум, ТаблицаПериодов[0].Период);
	КонецЕсли;
	
	Возврат ?(ДатаМаксимум < Реквизиты.ОкончаниеСобытия, Реквизиты.ОкончаниеСобытия, ДатаМаксимум);
		
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Вычисляет начальные значения номера повторения и начальную дату для расчета периодов повторений
//
Процедура ОпределитьНачальныеЗначенияРасчетаПериодовПовторений(знач Реквизиты, знач НачалоПериода, знач КонецПериода, Счетчик, ТекущийПериод)
	Интервал			= ?(Реквизиты.ПовторИнтервал = 0, 1, Реквизиты.ПовторИнтервал);
	Ограничение			= ?(Реквизиты.ПовторВидОкончания = 2, Мин(КонецПериода, Реквизиты.ПовторОкончание), КонецПериода);
	МаксПовторений		= Реквизиты.ПовторКоличество;
	ДниНеделиПропуск	= ПланировщикДанныеКлиентСервер.ПолучитьДниНеделиБезПовторений(Реквизиты);
		
	Счетчик			= 0;
	ТекущийПериод	= Реквизиты.ПовторНачало;
	
	Если Реквизиты.ПовторПериодичность = 1
		И НачалоДня(Реквизиты.ПовторНачало) < НачалоДня(НачалоПериода) Тогда
		
		РазницаВДнях	= (НачалоДня(НачалоПериода) - НачалоДня(Реквизиты.ПовторНачало)) / 86400;
		
		Счетчик			= Цел(РазницаВДнях / Интервал);
		ТекущийПериод	= НачалоДня(Реквизиты.ПовторНачало + Счетчик * Интервал * 86400);
		
	ИначеЕсли Реквизиты.ПовторПериодичность >= 2 И Реквизиты.ПовторПериодичность <= 5
		И НачалоНедели(Реквизиты.ПовторНачало) < НачалоНедели(НачалоПериода) Тогда
		
		РазницаВДнях	= (НачалоНедели(НачалоПериода) - НачалоДня(КонецНедели(Реквизиты.ПовторНачало)+1)) / 86400;
		РазницаВНеделях	= Цел(РазницаВДнях / 7);
		
		Для НомерДня = ДеньНедели(Реквизиты.ПовторНачало) По 7 Цикл
			Если НЕ ДниНеделиПропуск.Найти(НомерДня) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		Счетчик = Счетчик + РазницаВНеделях * (7-ДниНеделиПропуск.Количество());
		Для НомерДня = 1 По ДеньНедели(НачалоДня(НачалоПериода)-1) Цикл
			Если НЕ ДниНеделиПропуск.Найти(НомерДня) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ТекущийПериод = НачалоДня(НачалоПериода); 
		
	ИначеЕсли Реквизиты.ПовторПериодичность = 6 
		И НачалоМесяца(Реквизиты.ПовторНачало) < НачалоМесяца(НачалоПериода) Тогда
		
		Для НомерГода = Год(Реквизиты.ПовторНачало) По Год(НачалоПериода) Цикл
			НачМесяц = ?(НомерГода = Год(Реквизиты.ПовторНачало), Месяц(Реквизиты.ПовторНачало), 1);
			КонМесяц = ?(НомерГода = Год(НачалоПериода), Месяц(НачалоМесяца(НачалоПериода)-1), 12);
			
			Счетчик = Счетчик + КонМесяц - НачМесяц + 1;
		КонецЦикла;
		ТекущийПериод	= НачалоМесяца(НачалоПериода) + (Реквизиты.ПовторНачало - НачалоМесяца(Реквизиты.ПовторНачало));
		
	ИначеЕсли Реквизиты.ПовторПериодичность = 7 
		И НачалоГода(Реквизиты.ПовторНачало) < НачалоГода(НачалоПериода) Тогда
		
		Счетчик			= Год(НачалоПериода) - Год(Реквизиты.ПовторНачало);
		ТекущийПериод	= НачалоГода(НачалоПериода) + (Реквизиты.ПовторНачало - НачалоГода(Реквизиты.ПовторНачало));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию компоновщика настроек КД для схемы из справочника "СобытияПланировщика"
// Применяется только для процедуры "ПолучитьТаблицуСобытий"
//
Процедура ИнициализироватьКомпоновщикНастроекКомпоновкиДанных(Компоновщик, УникальныйИдентификатор)
	СхемаКомпоновкиДанных = Справочники.СобытияПланировщика.ПолучитьМакет("ОсновнаяСхема");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
КонецПроцедуры

// Собирает данные из базы данных и возвращает в виде таблицы значений
//
// Параметры:
//	Настройки - Тип: Структура
//		Исполнитель - Тип: СправочникСсылка.Пользователи
//		Календари - Тип: Массив[СправочникСсылка.КалендариПланировщика]
//		НачалоПериода - Тип: Дата. Дата + время
//		КонецПериода - Тип: Дата. Дата + время
//	Компоновщик - Тип: КомпоновщикНастроекКомпоновкиДанных, Неопределено
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//		Перечень колонок соответствует СКД Справочник.СобытияПланировщика
//		
//     
Функция ПолучитьТаблицуСобытий(Настройки, Компоновщик)
	
	Если НЕ ТипЗнч(Компоновщик) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		ИнициализироватьКомпоновщикНастроекКомпоновкиДанных(Компоновщик, "");
	КонецЕсли;
	
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Исполнитель"		, Настройки.Исполнитель);
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Календари"		, Настройки.Календари);
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода"	, Настройки.НачалоПериода);
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода"	, Настройки.КонецПериода);
	
	СхемаКомпоновкиДанных	= Справочники.СобытияПланировщика.ПолучитьМакет("ОсновнаяСхема");
	КомпоновщикМакета		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки			= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ПолучитьВсеЭкземплярыСобытий(ТаблицаДанных, Настройки.НачалоПериода, Настройки.КонецПериода);
	
КонецФункции

// Выполняет преобразование таблицы данных событий в полную таблицу со всеми экземплярами
// повторяющихся событий за определенный период
//
// Параметры:
//	ТаблицаДанных - Тип: ТаблицаЗначений.
//		Колонки аналогичны данным из СКД Справочники.СобытияПланировщика.Макеты.ОсновнаяСхема
//		Обязательные:
//			Оригинал, Повторять, ОригинальноеСобытие, ОригинальноеНачалоСобытия,
//			НачалоСобытия, ОкончаниеСобытия, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания,
//			ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения,
//			Ссылка, НачалоКалендаря, КонецКалендаря, ВесСобытия, ВыводитьВШапке,
//			НомерПовтора
//
Функция ПолучитьВсеЭкземплярыСобытий(ТаблицаДанных, НачалоПериода, КонецПериода)
	
	ЗначениеОтменено = Перечисления.СтатусыСобытийПланировщика.Отменено;
	
	// Добавим индексы по основным полям
	ТаблицаДанных.Индексы.Добавить("Оригинал, Повторять"); 
	
	// Основной набор - Оригинал = Истина, Повторять = Ложь
	КопияТаблицы = ТаблицаДанных.Скопировать(Новый Структура("Оригинал, Повторять", Истина, Ложь));
	
	// Выполняем обработку повторов
	ТаблицаОригиналов = ТаблицаДанных.Скопировать(Новый Структура("Оригинал, Повторять", Истина, Истина));
	
	ТаблицаНеоригиналов = ТаблицаДанных.Скопировать(Новый Структура("Оригинал", Ложь));
	ТаблицаНеоригиналов.Индексы.Добавить("ОригинальноеСобытие,ОригинальноеНачалоСобытия");
	
	Для Каждого СтрокаСобытия Из ТаблицаОригиналов Цикл
		СтруктураСобытия = Новый Структура("Повторять, НачалоСобытия, ПовторИнтервал, ПовторКоличество, ПовторВидОкончания, ПовторПериодичность, ПовторНачало, ПовторОкончание, ПовторДниПовторения");
		ЗаполнитьЗначенияСвойств(СтруктураСобытия, СтрокаСобытия);
		
		ШагНач = СтрокаСобытия.НачалоСобытия - НачалоДня(СтрокаСобытия.НачалоСобытия);
		ШагКон = СтрокаСобытия.ОкончаниеСобытия - СтрокаСобытия.НачалоСобытия;
		
		ТаблицаПериодов = ПолучитьТаблицуПериодовСобытия(СтруктураСобытия, НачалоПериода, КонецПериода);
		
		Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Если СтрокаПериода.Период < НачалоПериода ИЛИ СтрокаПериода.Период > КонецПериода Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоСобытия	= НачалоДня(СтрокаПериода.Период) + ШагНач;
			КонецСобытия	= НачалоСобытия + ШагКон;
			
			// Удалим из таблицы неоригинальные события
			Отбор = Новый Структура("ОригинальноеСобытие, ОригинальноеНачалоСобытия", СтрокаСобытия.Ссылка, НачалоДня(НачалоСобытия));
			МассивСтрокНеоригиналы = ТаблицаНеоригиналов.НайтиСтроки(Отбор);
			ЕстьНеоригиналы = МассивСтрокНеоригиналы.Количество() > 0;
			Если ЕстьНеоригиналы Тогда
				Если МассивСтрокНеоригиналы[0].Статус = ЗначениеОтменено Тогда
					Продолжить;
				КонецЕсли;
				
				НачалоСобытия	= МассивСтрокНеоригиналы[0].НачалоСобытия;
				КонецСобытия	= МассивСтрокНеоригиналы[0].ОкончаниеСобытия;
			КонецЕсли;
			
			// Добавим новую запись о событии
			НоваяСтрока = КопияТаблицы.Добавить();
			
			Если ЕстьНеоригиналы Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСтрокНеоригиналы[0], , "НачалоКалендаря, КонецКалендаря, ВесСобытия, ВыводитьВШапке, НомерПовтора");
			Иначе 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСобытия, , "НачалоКалендаря, КонецКалендаря, ВесСобытия, ВыводитьВШапке, НомерПовтора");
			КонецЕсли;
			
			НоваяСтрока.НачалоКалендаря = НачалоСобытия;
			НоваяСтрока.КонецКалендаря	= КонецСобытия;
			НоваяСтрока.ВесСобытия		= НоваяСтрока.КонецКалендаря - НоваяСтрока.НачалоКалендаря;
			НоваяСтрока.ВыводитьВШапке	= НоваяСтрока.ВесьДень 
											ИЛИ Цел((КонецДня(НоваяСтрока.КонецКалендаря) - НачалоДня(НоваяСтрока.НачалоКалендаря)) / 86400) >= 1;
			НоваяСтрока.НомерПовтора	= СтрокаПериода.Счетчик;
			
			// Удалим найденные строки из таблицы
			Для Каждого СтрокаНеоригинал Из МассивСтрокНеоригиналы Цикл
				ТаблицаНеоригиналов.Удалить(СтрокаНеоригинал);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Если в таблице неоригиналов остались экземпляры тогда добавим их в таблицу
	Для Каждого СтрокаСобытия Из ТаблицаНеоригиналов Цикл
		Если СтрокаСобытия.Статус = ЗначениеОтменено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = КопияТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСобытия);
		НоваяСтрока.НомерПовтора = ПолучитьНомерПовтораСобытия(СтрокаСобытия.Ссылка, СтрокаСобытия.НачалоСобытия, СтрокаСобытия.ОкончаниеСобытия);
	КонецЦикла;
	
	Возврат КопияТаблицы;
	
КонецФункции

// Проверяет наличие напоминаний по пользователю
//
Функция ЕстьНапоминанияПоСобытию(СобытиеСсылка, ПользовательСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие"			, СобытиеСсылка);
	Запрос.УстановитьПараметр("Пользователь"	, ПользовательСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияСобытийПланировщика.Идентификатор
	|ИЗ
	|	РегистрСведений.НапоминанияСобытийПланировщика КАК НапоминанияСобытийПланировщика
	|ГДЕ
	|	НапоминанияСобытийПланировщика.Событие = &Событие
	|	И НапоминанияСобытийПланировщика.Пользователь = &Пользователь";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой(); 
	
КонецФункции

// Выполняет проверку переданного значения на наличие реквизитов по списку
//
// Параметры:
//	ПараметрСобытие - Тип: Структура, Любой.
//	СписокКолонок - Тип: Строка. Имена реквизитов через запятую
//
// Возвращаемое значение:
//	Булево
//
Функция ПроверитьСтруктуруЗначенийСобытия(ПараметрСобытие, СписокКолонок)
	Если НЕ ТипЗнч(ПараметрСобытие) = Тип("Структура") Тогда
		Возврат Ложь;
	Иначе 
		МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СписокКолонок, ",");
		
		ПроверкаПройдена = Истина;
		Для Каждого ИмяКолонки Из МассивКолонок Цикл
			Если НЕ ПараметрСобытие.Свойство(СокрЛП(ИмяКолонки)) Тогда
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверкаПройдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ПроверкаПройдена;
	КонецЕсли;
КонецФункции

#Область МетодыРаботыСУведомлениями

// Формирует текст уведомления о событии планировщика
//
Функция ПолучитьТекстУведомленияСобытия(НастройкаНапоминания, СтруктураСобытия)
	
	ПериодСобытия = ПланировщикДанныеКлиентСервер.ПолучитьПредставлениеПериода(СтруктураСобытия.НачалоКалендаря, СтруктураСобытия.КонецКалендаря, СтруктураСобытия.ВесьДень);
	
	Если НастройкаНапоминания.Вид = 1 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - %2'"),
			СокрЛП(СтруктураСобытия.Наименование), ПериодСобытия);
	ИначеЕсли НастройкаНапоминания.Вид = 2 ИЛИ НастройкаНапоминания.Вид = 4 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - %2'"),
			СокрЛП(СтруктураСобытия.Наименование), ПериодСобытия);
	ИначеЕсли НастройкаНапоминания.Вид = 3 Тогда
		ДлинаСтрПериод = СтрДлина(ПериодСобытия);
		ОстатокНаименования = 72 - ДлинаСтрПериод;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - %2'"),
			Лев(СокрЛП(СтруктураСобытия.Наименование), ОстатокНаименования), ПериодСобытия);
	КонецЕсли;
	
	Возврат Текст; 
	
КонецФункции

// Формирует текст HTML уведомления о событии планировщика
//
Функция ПолучитьТекстHTMLУведомленияСобытия(НастройкаНапоминания, СтруктураСобытия)
	
	Если НЕ (НастройкаНапоминания.Вид = 2 ИЛИ НастройкаНапоминания.Вид = 4) Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = "
	|<table cellspacing=""0"" cellpadding=""8"" border=""0"" summary="""" style=""width:100%;font-family:Arial,Sans-serif;border:1px Solid #000793;border-width:1px 2px 2px 1px;background-color:#fff"">
	|<tbody>
	|  <tr>
	|    <td><div style=""padding:2px""><span></span>
	|        %2
	|        <h3 style=""padding: 0 0 6px 0; margin: 0; font-family: Arial,Sans-serif; font-size: 16px; font-weight: bold; color: #000793""><span>%1</span></h3>
	|        <table cellpadding=""0"" cellspacing=""0"" border=""0"" summary=""Сведения о мероприятии"">
	|          <tbody>
	|            <tr>
	|              <td style=""padding: 0 1em 10px 0; font-family: Arial,Sans-serif; font-size: 13px; color: #737373; white-space: nowrap"" valign=""top""><div><i style=""font-style:normal"">Когда</i></div></td>
	|              <td style=""padding-bottom:10px;font-family:Arial,Sans-serif;font-size:13px;color:#000793"" valign=""top""><u></u><u></u><u></u><u></u>%3 <span style=""color:#888"">%4</span></td>
	|            </tr>
	|            <tr>
	|              <td style=""padding:0 1em 10px 0;font-family:Arial,Sans-serif;font-size:13px;color: #737373;white-space:nowrap"" valign=""top""><div><i style=""font-style:normal"">Календарь</i></div></td>
	|              <td style=""padding-bottom:10px;font-family:Arial,Sans-serif;font-size:13px;color:#000793"" valign=""top"">%5</td>
	|            </tr>
	|            <tr>
	|              <td style=""padding:0 1em 10px 0;font-family:Arial,Sans-serif;font-size:13px;color: #737373;white-space:nowrap"" valign=""top""><div><i style=""font-style:normal"">Участники</i></div></td>
	|              <td style=""padding-bottom:10px;font-family:Arial,Sans-serif;font-size:13px;color:#222"" valign=""top""><table cellspacing=""0"" cellpadding=""0"">
	|                  <tbody>%6</tbody>
	|                </table></td>
	|            </tr>
	|          </tbody>
	|        </table>
	|      </div></td>
	|  </tr>
	|  <tr>
	|    <td style=""background-color: #E0E3FF; color: #333; border-top: 1px Solid #000793; font-family: Arial,Sans-serif; font-size: 11px""><p>Приглашение из <a href=""http://www.progtb.ru/1cplanner/"" target=""_blank"">1С Планировщик</a></p>
	//|      <p>Вы получили это сообщение на адрес <a href=""mailto:%7"" target=""_blank"">%7</a>, так как настроили оповещение для этого мероприятия в календаре ""%5.""</p>
	|      <p>Оповещения для конкретных мероприятий можно редактировать на странице сведений о мероприятии.</p></td>
	|  </tr>
	|</tbody>
	|</table>";
	
	Если Метаданные.Константы.Найти("АдресПубликацииИнформационнойБазыВИнтернете") <> Неопределено Тогда
		АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
		Если НЕ ПустаяСтрока(АдресПубликации) Тогда
			ВнутренняяСсылка = ПолучитьНавигационнуюСсылку(СтруктураСобытия.Ссылка);
			СтрокаПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<div style=""float:right;font-weight:bold;font-size:13px""> <a href=""%1"" style=""color:#20c;white-space:nowrap"" target=""_blank"">подробнее »</a><br></div>",
				АдресПубликации + "#" + ВнутренняяСсылка);
		Иначе 
			СтрокаПодробнее = "";
		КонецЕсли;
	КонецЕсли;
	
	ПериодСобытия = ПланировщикДанныеКлиентСервер.ПолучитьПредставлениеПериода(СтруктураСобытия.НачалоКалендаря, СтруктураСобытия.КонецКалендаря, СтруктураСобытия.ВесьДень);
	
	// Участники события
	СтрУчастники = "";
	ШаблонУчастника = "
	|                    <tr>
	|                      <td style=""padding-right:10px;font-family:Arial,Sans-serif;font-size:13px;color:#222""><span style=""font-family:Courier New,monospace"">•</span></td>
	|                      <td style=""padding-right:10px;font-family:Arial,Sans-serif;font-size:13px;color:#000793""><div>
	|                          <div style=""margin:0 0 0.3em 0""><span><span>%1</span></span><span style=""font-size: 11px; color: #999""> – %2</span></div>
	|                      </div></td>
	|                    </tr>";
	
	МассивУчастников = ПолучитьДанныеУчастников(СтруктураСобытия.Ссылка);
	Для Каждого ДанныеУчастника Из МассивУчастников Цикл
		ПредставлениеУчастника = ?(ПустаяСтрока(ДанныеУчастника.Представление), Строка(ДанныеУчастника.Участник), ДанныеУчастника.Представление);
		
		СтрУчастники = СтрУчастники + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУчастника,
			ПредставлениеУчастника, ?(ДанныеУчастника.Организатор, НСтр("ru='организатор'"),  НСтр("ru='участник'")));
	КонецЦикла;
	
	// %1 - ЗАГОЛОВОК
	// %2 - АДРЕС СОБЫТИЯ В ИНТЕРНЕТ
	// %3 - ПРЕДСТАВЛЕНИЕ ПЕРИОДА
	// %4 - ЧАСОВОЙ ПОЯС
	// %5 - ИМЯ КАЛЕНДАРЯ
	// %6 - УЧАСТНИКИ
	// %7 - ЭЛ. ПОЧТА ПОЛУЧАТЕЛЯ
	
	ПредставлениеКалендарь = ?(ЗначениеЗаполнено(СтруктураСобытия.Календарь), Строка(СтруктураСобытия.Календарь), НСтр("ru='<не указан>'")); 
	
	ТекстHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
		СокрЛП(СтруктураСобытия.Наименование), СтрокаПодробнее, ПериодСобытия, "",
		ПредставлениеКалендарь, СтрУчастники, "_user_email_");
	
	Возврат ТекстHTML;
	
КонецФункции

// Выполняет уведомление о событии пользователю, согласно настройке.
// Создает запись в регистре напоминаний, отправляет письмо, посылает SMS
//
Функция ОтправитьУведомлениеСобытияПользователю(ПользовательСсылка, ДанныеУведомления)
	Если ДанныеУведомления.Вид = 1 Тогда
		Если Метаданные.РегистрыСведений.Найти("НапоминанияПользователя") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписьНапоминание = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		ЗаписьНапоминание.Пользователь		= ДанныеУведомления.Пользователь;
		ЗаписьНапоминание.ВремяСобытия		= ?(ДанныеУведомления.ВесьДень, ДанныеУведомления.ДатаНапоминания, ДанныеУведомления.НачалоСобытия);
		ЗаписьНапоминание.Источник			= ДанныеУведомления.Событие;
		ЗаписьНапоминание.СрокНапоминания	= ДанныеУведомления.ДатаНапоминания;
		ЗаписьНапоминание.Описание			= ДанныеУведомления.Текст;
		
		ЗаписьНапоминание.СпособУстановкиВремениНапоминания	= Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		ЗаписьНапоминание.ПредставлениеИсточника			= Строка(ДанныеУведомления.Событие);
		
		ЗаписьНапоминание.Записать(Истина);
	ИначеЕсли ДанныеУведомления.Вид = 2 Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		Если ОбщийМодуль = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДоступныеУчетныеЗаписи = ОбщийМодуль.ДоступныеУчетныеЗаписи(Истина, , Истина);
		Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		УчетнаяЗапись1	= ДанныеУведомления.УчетнаяЗапись;
		УчетнаяЗапись2	= ОбщийМодуль.СистемнаяУчетнаяЗапись();
		Если ДоступныеУчетныеЗаписи.НайтиСтроки(Новый Структура("Ссылка", УчетнаяЗапись1)).Количество() > 0 Тогда
			УчетнаяЗапись = УчетнаяЗапись1;
		ИначеЕсли ДоступныеУчетныеЗаписи.НайтиСтроки(Новый Структура("Ссылка", УчетнаяЗапись2)).Количество() > 0 Тогда
			УчетнаяЗапись = УчетнаяЗапись2;
		Иначе
			УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
		КонецЕсли;
		
		ТелоПисьма = СтрЗаменить(ДанныеУведомления.ТекстHTML, "_user_email_", ДанныеУведомления.АдресЭП);
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому"		, ДанныеУведомления.АдресЭП);
		ПараметрыПисьма.Вставить("Тема"		, ДанныеУведомления.Текст);
		ПараметрыПисьма.Вставить("Тело"		, ТелоПисьма);
		ПараметрыПисьма.Вставить("ТипТекста", "HTML"); // "ПростойТекст"
		ПараметрыПисьма.Вставить("Важность"	, ВажностьИнтернетПочтовогоСообщения.Высокая);
		
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(УчетнаяЗапись);
		ПараметрыПроцедуры.Добавить(ПараметрыПисьма);
		
		ФоновыеЗадания.Выполнить("РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение", ПараметрыПроцедуры);
	ИначеЕсли ДанныеУведомления.Вид = 3 Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		Если ОбщийМодуль = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НастройкаВыполнена = ОбщийМодуль.НастройкаОтправкиSMSВыполнена();
		Если НЕ НастройкаВыполнена Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НомерТелефона = СтрЗаменить(ДанныеУведомления.Телефон, " ", "");
		НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
		НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
		НомерТелефона = ?(Лев(НомерТелефона, 1) = "8", "+7" + Сред(НомерТелефона, 2), НомерТелефона);
		НомерТелефона = ?(Лев(НомерТелефона, 2) <> "+7", "+7" + НомерТелефона, НомерТелефона);
		
		МассивТелефонов = Новый Массив;
		МассивТелефонов.Добавить(НомерТелефона);
		
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(МассивТелефонов);
		ПараметрыПроцедуры.Добавить(ДанныеУведомления.Текст);
		ПараметрыПроцедуры.Добавить("");
		ПараметрыПроцедуры.Добавить(Ложь);
		
		ФоновыеЗадания.Выполнить("ОтправкаSMS.ОтправитьSMS", ПараметрыПроцедуры);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Выполняет удаление записей об уведомлениях о событиях планировщика
//
// Параметры:
//	Параметры - Тип: Структура.
//		НачалоПериода - Тип: Дата. Не обязательно. По умолчанию начало дня текущей даты сеанса
//		КонецПериода - Тип: Дата. Не обязательно. По умолчанию НачалоНедели + 1 неделя
//		События - Тип: Массив, СправочникСсылка.СобытияПланировщика. Не обязательно.
//
Процедура УдалитьЗаписиУведомленийСобытийПланировщика(Параметры)
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	НачалоПериода		= ?(Параметры.Свойство("НачалоПериода"), Параметры.НачалоПериода, НачалоДня(ТекущаяДатаСеанса()));
	КонецПериода		= ?(Параметры.Свойство("КонецПериода"), Параметры.КонецПериода, КонецДня(ТекущаяДатаСеанса() + ПланировщикКлиентСервер.НеделяВСекундах()));
	ОтборСобытий		= ?(Параметры.Свойство("События"), Параметры.События, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецПериода);
	Запрос.УстановитьПараметр("ДанныеСобытий"	, ОтборСобытий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомленияСобытийПланировщика.Пользователь,
	|	УведомленияСобытийПланировщика.Событие,
	|	УведомленияСобытийПланировщика.Идентификатор
	|ИЗ
	|	РегистрСведений.УведомленияСобытийПланировщика КАК УведомленияСобытийПланировщика
	|ГДЕ
	|	УведомленияСобытийПланировщика.ДатаНапоминания МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ УведомленияСобытийПланировщика.Выполнено
	|	И &ОтборПоСобытию";
	
	Если ТипЗнч(ОтборСобытий) = Тип("Массив") Тогда  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "УведомленияСобытийПланировщика.Событие В(&ДанныеСобытий)");
	ИначеЕсли ТипЗнч(ОтборСобытий) = Тип("СправочникСсылка.СобытияПланировщика") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "УведомленияСобытийПланировщика.Событие = &ДанныеСобытий");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "ИСТИНА");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УведомленияСобытийПланировщика");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Событие", "Событие");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Идентификатор", "Идентификатор");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.УведомленияСобытийПланировщика.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь		= Выборка.Пользователь;
			МенеджерЗаписи.Событие			= Выборка.Событие;
			МенеджерЗаписи.Идентификатор	= Выборка.Идентификатор;
			МенеджерЗаписи.Удалить();
		КонецЦикла;  
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ПланировщикДанныеКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Выполняет обновление записей об уведомлениях о событиях планировщика на основании
// данных о событиях и настройках уведомлений
//
// Параметры:
//	Параметры - Тип: Структура.
//		НачалоПериода - Тип: Дата. Не обязательно. По умолчанию начало дня текущей даты сеанса
//		КонецПериода - Тип: Дата. Не обязательно. По умолчанию НачалоНедели + 1 неделя
//		События - Тип: Массив, СправочникСсылка.СобытияПланировщика. Не обязательно.
//
Процедура ОбновитьЗаписиУведомленийСобытийПланировщика(Параметры, АдресХранилища = "")
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	НачалоПериода		= ?(Параметры.Свойство("НачалоПериода"), Параметры.НачалоПериода, НачалоДня(ТекущаяДатаСеанса()));
	КонецПериода		= ?(Параметры.Свойство("КонецПериода"), Параметры.КонецПериода, КонецДня(ТекущаяДатаСеанса() + ПланировщикКлиентСервер.НеделяВСекундах()));
	ОтборСобытий		= ?(Параметры.Свойство("События"), Параметры.События, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата"		, Дата(1, 1, 1));
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецПериода);
	Запрос.УстановитьПараметр("ДанныеСобытий"	, ОтборСобытий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГраницыСобытийПланировщика.Событие КАК Событие
	|ПОМЕСТИТЬ МассивСобытий
	|ИЗ
	|	РегистрСведений.ГраницыСобытийПланировщика КАК ГраницыСобытийПланировщика
	|ГДЕ
	|	ГраницыСобытийПланировщика.ОкончаниеНапоминаний >= &НачалоПериода
	|	И ГраницыСобытийПланировщика.НачалоНапоминаний <= &КонецПериода
	|	И ГраницыСобытийПланировщика.НачалоНапоминаний <> &ПустаяДата
	|	И &ОтборПоСобытию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Событие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Напоминания.Событие,
	|	Напоминания.Пользователь,
	|	Напоминания.Идентификатор,
	|	Напоминания.Вид,
	|	Напоминания.Интервал,
	|	Напоминания.ВидИнтервала,
	|	Напоминания.ИнтервалСекунды
	|ИЗ
	|	МассивСобытий КАК МассивСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияСобытийПланировщика КАК Напоминания
	|		ПО МассивСобытий.Событие = Напоминания.Событие
	|ГДЕ
	|	Напоминания.Событие В
	|			(ВЫБРАТЬ
	|				Т.Событие
	|			ИЗ
	|				МассивСобытий КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияПланировщика.Ссылка,
	|	ВЫБОР
	|		КОГДА СобытияПланировщика.ОригинальноеСобытие = ЗНАЧЕНИЕ(Справочник.СобытияПланировщика.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оригинал,
	|	СобытияПланировщика.НачалоСобытия,
	|	СобытияПланировщика.ОкончаниеСобытия,
	|	СобытияПланировщика.Повторять,
	|	СобытияПланировщика.ПовторИнтервал,
	|	СобытияПланировщика.ПовторКоличество,
	|	СобытияПланировщика.ПовторВидОкончания,
	|	СобытияПланировщика.ПовторПериодичность,
	|	СобытияПланировщика.ПовторНачало,
	|	СобытияПланировщика.ПовторОкончание,
	|	СобытияПланировщика.ПовторДниПовторения,
	|	СобытияПланировщика.ОригинальноеСобытие,
	|	СобытияПланировщика.ОригинальноеНачалоСобытия,
	|	ВЫБОР
	|		КОГДА СобытияПланировщика.НачалоСобытия < &НачалоПериода
	|				ИЛИ СобытияПланировщика.НачалоСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ СобытияПланировщика.НачалоСобытия
	|	КОНЕЦ КАК НачалоКалендаря,
	|	ВЫБОР
	|		КОГДА СобытияПланировщика.ОкончаниеСобытия > &КонецПериода
	|				ИЛИ СобытияПланировщика.ОкончаниеСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &КонецПериода
	|		ИНАЧЕ СобытияПланировщика.ОкончаниеСобытия
	|	КОНЕЦ КАК КонецКалендаря,
	|	ВЫБОР
	|		КОГДА СобытияПланировщика.ВесьДень
	|			ТОГДА ИСТИНА
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СобытияПланировщика.НачалоСобытия, ДЕНЬ), КОНЕЦПЕРИОДА(СобытияПланировщика.ОкончаниеСобытия, ДЕНЬ), ДЕНЬ) >= 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьВШапке,
	|	РАЗНОСТЬДАТ(СобытияПланировщика.НачалоСобытия, СобытияПланировщика.ОкончаниеСобытия, СЕКУНДА) КАК ВесСобытия,
	|	0 КАК НомерПовтора,
	|	СобытияПланировщика.Наименование,
	|	СобытияПланировщика.ВесьДень,
	|	СобытияПланировщика.Календарь
	|ИЗ
	|	Справочник.СобытияПланировщика КАК СобытияПланировщика
	|ГДЕ
	|	СобытияПланировщика.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Событие
	|			ИЗ
	|				МассивСобытий КАК Т)";
	
	Если ТипЗнч(ОтборСобытий) = Тип("Массив") Тогда  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "ГраницыСобытийПланировщика.Событие В(&ДанныеСобытий)");
	ИначеЕсли ТипЗнч(ОтборСобытий) = Тип("СправочникСсылка.СобытияПланировщика") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "ГраницыСобытийПланировщика.Событие = &ДанныеСобытий");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСобытию", "ИСТИНА");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 0 - ВТ МассивСобытий
	ДанныеНапоминаний	= МассивРезультатов[1].Выгрузить();
	ДанныеСобытий		= МассивРезультатов[2].Выгрузить();
	
	ДанныеОбновлений		= Новый Соответствие;
	НачалоПериодаОбновления = НачалоМинуты(ТекущаяДатаСеанса());
	КонецПериодаОбновления	= НачалоМинуты(НачалоПериодаОбновления + 180);
	
	ЭкземплярыСобытий	= ПолучитьВсеЭкземплярыСобытий(ДанныеСобытий, НачалоПериода, КонецПериода);
	Для Каждого СтрокаСобытия Из ЭкземплярыСобытий Цикл
		СтрокиНапоминаний = ДанныеНапоминаний.НайтиСтроки(Новый Структура("Событие", СтрокаСобытия.Ссылка));
		Если СтрокиНапоминаний.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого НастройкаНапоминания Из СтрокиНапоминаний Цикл
			ДатаНапоминания = СтрокаСобытия.НачалоКалендаря - НастройкаНапоминания.ИнтервалСекунды;
			
			ЗаписьРегистра = РегистрыСведений.УведомленияСобытийПланировщика.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Пользователь		= НастройкаНапоминания.Пользователь;
			ЗаписьРегистра.Событие			= СтрокаСобытия.Ссылка;
			ЗаписьРегистра.Идентификатор	= НастройкаНапоминания.Идентификатор;
			ЗаписьРегистра.Прочитать();
			Если ЗаписьРегистра.Выбран() И ЗаписьРегистра.Выполнено
				И ЗаписьРегистра.ДатаНапоминания = ДатаНапоминания Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьРегистра.Пользователь		= НастройкаНапоминания.Пользователь;
			ЗаписьРегистра.Событие			= СтрокаСобытия.Ссылка;
			ЗаписьРегистра.Идентификатор	= НастройкаНапоминания.Идентификатор;
			ЗаписьРегистра.ДатаНапоминания	= ДатаНапоминания;
			ЗаписьРегистра.Вид				= НастройкаНапоминания.Вид;
			ЗаписьРегистра.Текст			= ПолучитьТекстУведомленияСобытия(НастройкаНапоминания, СтрокаСобытия);
			ЗаписьРегистра.ТекстHTML		= ПолучитьТекстHTMLУведомленияСобытия(НастройкаНапоминания, СтрокаСобытия);
			ЗаписьРегистра.НачалоСобытия	= СтрокаСобытия.НачалоКалендаря;
			ЗаписьРегистра.ОкончаниеСобытия	= СтрокаСобытия.КонецКалендаря;
			ЗаписьРегистра.ВесьДень			= СтрокаСобытия.ВесьДень;
			ЗаписьРегистра.Выполнено		= Ложь;
			ЗаписьРегистра.Записать(Истина);
			
			Если ЗаписьРегистра.ДатаНапоминания >= НачалоПериодаОбновления И ЗаписьРегистра.ДатаНапоминания <= КонецПериодаОбновления Тогда
				ПериодыОбновлений = ДанныеОбновлений.Получить(ЗаписьРегистра.Пользователь);
				Если ПериодыОбновлений = Неопределено Тогда
					ПериодыОбновлений = Новый Массив;
				КонецЕсли;
				
				ПериодПроверки = НачалоМинуты(ЗаписьРегистра.ДатаНапоминания);
				Если ПериодыОбновлений.Найти(ПериодПроверки) = Неопределено Тогда
					ПериодыОбновлений.Добавить(ПериодПроверки);
				КонецЕсли;
				
				ДанныеОбновлений.Вставить(ЗаписьРегистра.Пользователь, ПериодыОбновлений);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеОбновлений Цикл
		Для Каждого ПериодОбновления Из КлючИЗначение.Значение Цикл
			ОбработатьУведомленияСобытийПользователя(КлючИЗначение.Ключ, ПериодОбновления);
		КонецЦикла;
	КонецЦикла;
	
	Параметры.Вставить("Выполнено", Истина);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
