#Область ПрограммныйИнтерфейс

Функция СоздатьСобытиеНаОсновании(ОбъектОснование, СтруктураСобытия) Экспорт
	
	Возврат Справочники.СобытияПланировщика.СоздатьСобытиеНаОсновании(ОбъектОснование, СтруктураСобытия);

КонецФункции

Функция СоздатьСобытие(СтруктураСобытия) Экспорт
	
	Возврат Справочники.СобытияПланировщика.СоздатьСобытие(СтруктураСобытия);
	
КонецФункции

Функция ПереместитьСобытие(СобытиеСсылка, ТекущееНачало, НовоеНачало, НовоеОкончание, НовоеВесьДень) Экспорт
	
	Возврат Справочники.СобытияПланировщика.ПереместитьСобытие(СобытиеСсылка, ТекущееНачало, НовоеНачало, НовоеОкончание, НовоеВесьДень);
	
КонецФункции

Функция ВыделитьСобытие(СобытиеСсылка, ДопПараметры) Экспорт
	
	Возврат Справочники.СобытияПланировщика.ВыделитьСобытие(СобытиеСсылка, ДопПараметры);

КонецФункции

Функция НапоминанияВсплывающимОкном() Экспорт
	
	ПодсистемаНапоминаний = ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.НапоминанияПользователя");
	Если ПодсистемаНапоминаний Тогда
		ОповещениеДоступно = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	Иначе 
		ОповещениеДоступно = Ложь;
	КонецЕсли;
	
	Возврат ОповещениеДоступно; 
	
КонецФункции

Функция НапоминанияЭлектроннойПочтой() Экспорт
	
	ПодсистемаЭлектроннаяПочта = ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	Если ПодсистемаЭлектроннаяПочта Тогда
		МодульРаботаССообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ОповещениеДоступно = МодульРаботаССообщениями.ДоступнаОтправкаПисем();
	Иначе 
		ОповещениеДоступно = Ложь;
	КонецЕсли;
	
	Возврат ОповещениеДоступно;
	
КонецФункции

Функция НапоминанияСообщениемSMS() Экспорт
	
	ПодсистемаОтправкиSMS = ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	Если ПодсистемаОтправкиSMS Тогда
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		ОповещениеДоступно = МодульОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	Иначе 
		ОповещениеДоступно = Ложь;
	КонецЕсли;
	
	Возврат ОповещениеДоступно;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПроверитьНеобходимостьОбновленияФормы(РеквизитыФормы, ЭлементСсылка) Экспорт
	
	Если ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.КалендариПланировщика") Тогда
		РеквизитыКалендаря = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементСсылка, "Владелец, Общественный");
		Если НЕ РеквизитыКалендаря.Общественный И НЕ РеквизитыКалендаря.Владелец = РеквизитыФормы.ТекущийПользователь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИсточникДанных = ?(РеквизитыКалендаря.Общественный, "ОбщиеКалендари", "Календари");
		
		СтрокиНайдены = Ложь;
		Для Каждого СтруктураКалендари Из РеквизитыФормы[ИсточникДанных] Цикл
			Если СтруктураКалендари.Календарь = ЭлементСсылка И СтруктураКалендари.Использование Тогда
				СтрокиНайдены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СтрокиНайдены Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.СобытияПланировщика") Тогда
		РеквизитыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементСсылка, "Владелец, НачалоСобытия, ОкончаниеСобытия, Повторять");
		Если РеквизитыСобытия.Владелец <> РеквизитыФормы.ТекущийПользователь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если РеквизитыСобытия.Повторять Тогда
			ПериодыПовторения = ПланировщикДанные.ПолучитьТаблицуПериодовСобытия(ЭлементСсылка, РеквизитыФормы.НачалоПериода, РеквизитыФормы.ОкончаниеПериода);
			Если ПериодыПовторения.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли РеквизитыСобытия.НачалоСобытия > РеквизитыФормы.ОкончаниеПериода ИЛИ РеквизитыСобытия.ОкончаниеСобытия < РеквизитыФормы.НачалоПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПланировщикДанные.ПроверитьУчастиеПользователяВСобытии(ЭлементСсылка, РеквизитыФормы.ТекущийПользователь) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьНаличиеОповещений(знач ПользовательСсылка, ВремяБлижайшего) Экспорт
	
	Если НЕ ТипЗнч(ВремяБлижайшего) = Тип("Дата") ИЛИ ВремяБлижайшего = Дата(1, 1, 1) Тогда
		ВремяБлижайшего = ТекущаяДатаСеанса() + 60;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПользовательСсылка);
	Запрос.УстановитьПараметр("СрокНапоминания", ВремяБлижайшего);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Напоминания.Пользователь КАК Пользователь,
	|	Напоминания.ВремяСобытия КАК ВремяСобытия,
	|	Напоминания.Источник КАК Источник,
	|	Напоминания.СрокНапоминания КАК СрокНапоминания,
	|	Напоминания.Описание КАК Описание,
	|	2 КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК Напоминания
	|ГДЕ
	|	Напоминания.Пользователь = &Пользователь
	|	И Напоминания.СрокНапоминания < &СрокНапоминания
	|	И Напоминания.Источник ССЫЛКА Справочник.СобытияПланировщика";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецФункции

#КонецОбласти

