////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Данные подписи объекта.
//
// Параметры:
//   МенеджерКриптографии - МенеджерКриптографии - менеджер криптографии
//   ОбъектДляПодписиСсылка - ЛюбаяСсылка - Подписываемый объект.
//   ДвоичныеДанные - ДвоичныеДанные - двоичные данные подписи
//   СтруктураПараметровПодписи - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура - Данные подписи для записи в табличную часть.
//
Функция СформироватьДанныеПодписи(
			МенеджерКриптографии,
			ОбъектДляПодписиСсылка,
			ДвоичныеДанные,
			СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка", ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Отпечаток", Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи", ДатаПодписи);
	ДанныеПодписи.Вставить("Комментарий", СтруктураПараметровПодписи.Комментарий);
	ДанныеПодписи.Вставить("ИмяФайлаПодписи", "");
	ДанныеПодписи.Вставить("КомуВыданСертификат", КомуВыданСертификат);
	ДанныеПодписи.Вставить("АдресФайла", "");
	ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	Возврат ДанныеПодписи;
	
КонецФункции

// Проверяет подпись. В случае ошибки бросает исключение.
//
// Параметры:
//   МенеджерКриптографии - МенеджерКриптографии - Менеджер криптографии.
//   ДвоичныеДанныеФайла - Двоичные данные файла.
//   ДвоичныеДанныеПодписи - Двоичные данные подписи.
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	
	МассивРежимовПроверки = Новый Массив;
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
	
КонецПроцедуры	

// Открывает персональные настройки ЭП.
//
// Параметры:
//   Модально - Булево - Открывать форму поверх всех остальных.
//
Процедура ОткрытьФормуНастройкиЭП() Экспорт
	
	ПараметрыФормы = Новый Структура("ПоказыватьНастройкиШифрования", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройкиЭП", ПараметрыФормы);
	
КонецПроцедуры

// Показывает диалог установки расширения работы с криптографией.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ТекстВопроса         - Строка - Текст вопроса.
//   ЗаголовокВопроса     - Строка - Заголовок вопроса.
//
// Возвращаемое значение:
//   Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
//   Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
//   Неопределено - Пользователь отказался от установки.
//
Процедура УстановитьРасширение(ОбработчикРезультата, ТекстВопроса = "", ЗаголовокВопроса = "") Экспорт
	
	Если ПустаяСтрока(ЗаголовокВопроса) Тогда
		ЗаголовокВопроса = НСтр("ru = 'Расширение работы с криптографией'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо установить
		|расширение работы с криптографией.'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Да, ЗаголовокВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текущую настройку использования электронных подписей.
Функция ИспользоватьЭлектронныеПодписи() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьЭлектронныеПодписи;
	
КонецФункции

// По окончании подписания нотифицирует о подписании
//
// Параметры:
//   ОбъектСсылка - ЛюбаяСсылка - Объект, в табличную часть которого будет занесена информация о ЭП.
//
Процедура ИнформироватьОПодписанииОбъекта(ОбъектСсылка) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ОбъектСсылка);
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит сертификат по строке отпечатка.
//
// Параметры
//   Отпечаток - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - Если Истина, то поиск производится только в личном хранилище.
//
// Возвращаемое значение:
//   СертификатКриптографии - Сертификат криптографии.
//
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	ВозниклиОшибки = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(ВозниклиОшибки);
	Если ВозниклиОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

// Заполняет структуру полями сертификата.
//
// Параметры
//   Отпечаток - Строка - Base64 кодированный отпечаток сертификата.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования.
//
// Параметры
//  ТолькоЛичные - Булево - Если Ложь, то берутся также и сертификаты получателей.
//
// Возвращаемое значение:
//   Массив - массив структур с полями сертификата
//
Функция ПолучитьМассивСтруктурСертификатов(Знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаУниверсальная(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

// Создает на клиенте менеджер криптографии. Пароль не устанавливается.
//
// Возвращаемое значение:
//   МенеджерКриптографии - менеджер криптографии
//
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПерсональныеНастройки  = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки();
	ОбщиеНастройки         = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
	ПровайдерЭП            = ОбщиеНастройки.ПровайдерЭП;
	ТипПровайдераЭП        = ОбщиеНастройки.ТипПровайдераЭП;
	ПутьМодуляКриптографии = ПерсональныеНастройки.ПутьМодуляКриптографии;
	
	Если ПустаяСтрока(ПровайдерЭП) Тогда
		ВызватьИсключение
			НСтр("ru = 'Не указан провайдер ЭП.
			           |В настройках криптографии укажите провайдера ЭП,
			           |тип провайдера, алгоритмы подписи и хеширования.'");
	КонецЕсли;
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);
	
	МенеджерКриптографии.АлгоритмПодписи = ОбщиеНастройки.АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = ОбщиеНастройки.АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = ОбщиеНастройки.АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Открывает форму просмотра сертификата ЭП.
//
// Параметры
//  Отпечаток - Строка - Отпечаток сертификата ЭП.
//
Процедура ОткрытьСертификат(Отпечаток) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
		ОткрытьФорму("ОбщаяФорма.СертификатЭП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП.
//
// Параметры
//   СтруктураСертификата - Структура с полями сертификата.
//   Отпечаток - Строка - Отпечаток сертификата ЭП.
//   АдресСертификата - Строка - Адрес сертификата во временном хранилище.
//
Процедура ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата", 
			СтруктураСертификата, Отпечаток, АдресСертификата);
		ОткрытьФорму("ОбщаяФорма.СертификатЭП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП.
Процедура ОткрытьСертификатПоОтпечаткуИАдресу(Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Отпечаток = Отпечаток;
	Сертификат = Неопределено;
	СтруктураСертификата = Неопределено;
	Если НЕ ПустаяСтрока(АдресСертификата) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресСертификата);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	Иначе
		СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;	
	
	Если СтруктураСертификата <> Неопределено Тогда
		ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра подписи ЭП.
Процедура ОткрытьПодпись(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
		
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	ОбъектУказан = Ложь;
	
	Если ТипЗнч(ТекущиеДанные.Объект) = Тип("Строка") Тогда
		Если НЕ ПустаяСтрока(ТекущиеДанные.Объект) Тогда
			ОбъектУказан = Истина;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		ОбъектУказан = Истина;
	КонецЕсли;
	
	Если ОбъектУказан Тогда
		
		Отпечаток = ТекущиеДанные.Отпечаток;
		Сертификат = Неопределено;
		СтруктураСертификата = Неопределено;
		Если НЕ ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ТекущиеДанные.АдресСертификата);
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Иначе
			СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
		КонецЕсли;	
		
		Если СтруктураСертификата <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата, УстановившийПодпись, Комментарий, АдресПодписи, ДатаПодписи", 
				СтруктураСертификата, Отпечаток, ТекущиеДанные.АдресСертификата,
				ТекущиеДанные.УстановившийПодпись, ТекущиеДанные.Комментарий, ТекущиеДанные.АдресПодписи,
				ТекущиеДанные.ДатаПодписи);
			ОткрытьФорму("ОбщаяФорма.ПодписьЭП", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// "Сохранить как" вместе с подписями - все или выбранные.
//
// Параметры
//   ФайлСсылка - СправочникСсылка - Объект, в табличной части которого содержатся подписи.
//   ПолноеИмяФайла - Строка - Полное имя с путем, под которым сохранен файл.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//   МассивСтруктурПодписей - Массив - массив структур подписей. Если Неопределено - сохраняем все подписи.
//
Процедура СохранитьПодписи(ФайлСсылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей) Экспорт
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ОсновнойФайл.Имя);
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда 
			ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + "." + РасширениеДляФайловПодписи;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + "." + РасширениеДляФайловПодписи;
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;	
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, СтруктураПодписи.АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
	КонецЦикла;
	
	Если МассивСтруктурПодписей.Количество() <> 0 Тогда
		Текст = НСтр("ru = 'Каталог:'") + Символы.ПС;
		Текст = Текст + Путь;
		Текст = Текст + Символы.ПС + Символы.ПС;
		Текст = Текст + НСтр("ru = 'Файлы:'") + Символы.ПС;
		
		Для Каждого ИмяФайла Из МассивИмен Цикл
			Текст = Текст + ИмяФайла + Символы.ПС;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Текст", Текст);
		ОткрытьФорму("ОбщаяФорма.ОтчетОСохраненииФайлов", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет ЭП из файла (файлов).
//
// Параметры
//   ФайлСсылка - ЛюбаяСсылка - Объект, в табличную часть которого будет занесена информация о ЭП.
//   МассивФайловПодписей - Массив - Массив структур (ПутьКФайлу, Комментарий).
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//   ВладелецФайла - ЛюбаяСсылка - значение реквизита ВладелецФайла у ФайлСсылка.
//
Функция СформироватьПодписиДляЗанесениюВБазу(ФайлСсылка, МассивФайловПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
#Если НЕ ВебКлиент Тогда	
		
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДатаПодписи = Дата('00010101');
	
	Для Каждого Элемент Из МассивФайловПодписей Цикл
		
		ИмяФайлаСПутем = Элемент.ПутьКФайлу;
		
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ИмяФайлаСПутем);
		
		Если Сертификаты.Количество() <> 0 Тогда
			
			Сертификат = Сертификаты[0];
			
			НоваяПодписьДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
			
			Файл = Новый Файл(ИмяФайлаСПутем);
			ИмяФайлаПодписи = Файл.Имя;
			
			Отпечаток = Base64Строка(Сертификат.Отпечаток);
			КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
			ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
			
			ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
				ФайлСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Элемент.Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				"", // АдресФайла
				ДвоичныеДанныеСертификата);
			
			МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецЕсли	

	Возврат МассивДанныхДляЗанесенияВБазу;

КонецФункции

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы электронных подписей (*.%1)|*.%1|Все файлы (*.*)|*.*'"),
		РасширениеДляФайловПодписи);
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подпись сохранена в файл
			           |""%1"".'"),
			ДиалогОткрытияФайла.ПолноеИмяФайла);
		
		Состояние(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

// Обработчик результата работы процедуры "УстановитьРасширение".
Процедура УстановитьРасширениеПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСКриптографией(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры "УстановитьРасширениеПослеОтвета".
Процедура УстановитьРасширениеПослеЗавершения(ДополнительныеПараметры) Экспорт
	Результат = ПодключитьРасширениеРаботыСКриптографией();
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
КонецПроцедуры

#КонецОбласти
