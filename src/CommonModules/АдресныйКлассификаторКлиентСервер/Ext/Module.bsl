////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет наличие обновлений адресного классификатора на веб сервере
// для тех объектов, которые ранее уже загружались.
//
// Возвращаемое значение:
//     Массив  - содержит структуры, описывающие адресные объекты, каждая структура имеет формат:
//         * КодАдресногоОбъекта - Строка - код адресного объекта
//         * Наименование        - Строка - наименование адресного объекта
//         * Сокращение          - Строка - сокращение адресного объекта
//         * Индекс              - Строка - индекс адресного объекта
//         * ОбновлениеДоступно  - Булево - флаг доступности обновления
//
Функция ПроверитьОбновлениеАдресныхОбъектов() Экспорт
	
	ВерсииХранимыхСведений = АдресныйКлассификаторВызовСервера.ВерсииАдресныхОбъектов();
	
	Результат = ВерсииДоступныеНаСайте1С();
	Если НЕ Результат.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	ДоступныеВерсии = Результат.ДоступныеВерсии;
	
	ДоступныеОбновления = Новый Массив;
	
	Для Каждого ЭлементХранимаяВерсия Из ВерсииХранимыхСведений Цикл
		АдресныйОбъект = ЭлементХранимаяВерсия.Представление;
		АдресныеСведения = АдресныйКлассификаторВызовСервера.ИнформацияПоАдресномуОбъекту(АдресныйОбъект);
		АдресныеСведения.Вставить("ОбновлениеДоступно",
			?(ТипЗнч(ДоступныеВерсии[АдресныйОбъект]) <> Тип("Дата"),
			  Ложь,
			  ДоступныеВерсии[АдресныйОбъект] > Дата(ЭлементХранимаяВерсия.Значение)));
		ДоступныеОбновления.Добавить(АдресныеСведения);
	КонецЦикла;
	
	// Подготовка версии последнего обновления КЛАДР на сайте 1С
	Результат = ЗаполнитьРезультат(ДоступныеОбновления);
	//
	ВерсияПоследнегоОбновленияКЛАДР = ДоступныеВерсии["V0"];
	Если ТипЗнч(ВерсияПоследнегоОбновленияКЛАДР) <> Тип("Дата") Тогда
		ВерсияПоследнегоОбновленияКЛАДР = '00000000';
	КонецЕсли;
	Результат.Вставить("ВерсияПоследнегоОбновленияКЛАДР", ВерсияПоследнегоОбновленияКЛАДР);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Получает версии, доступные на сайте 1С.
//
// Возвращаемое значение:
//     Структура - описание версий:
//         * Статус          - Булево       - статус наличия доступных версий.
//         * ДоступныеВерсии - Соответствие - доступные версии.
//
Функция ВерсииДоступныеНаСайте1С() Экспорт
	
	URLСтрока = ПутьКФайлуОписаниюДанныхКЛАДР();
	
	// Обход особенности БТС
	СоставАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСтрока);
	Если ПустаяСтрока(СоставАдреса.Порт) Тогда
		Протокол = ВРег(СоставАдреса.Схема);
		Если Протокол = "HTTP" Тогда
			СоставАдреса.Порт = 80;
		ИначеЕсли Протокол = "HTTPS" Тогда
			СоставАдреса.Порт = 443;
		КонецЕсли;
		URLСтрока = URIПоСтруктуре(СоставАдреса);
	КонецЕсли;
	
#Если Клиент Тогда
	РезультатПолученияФайлов = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока);
#Иначе
	РезультатПолученияФайлов = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(URLСтрока);
#КонецЕсли
	
	Если Не РезультатПолученияФайлов.Статус Тогда
		Возврат РезультатПолученияФайлов;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(РезультатПолученияФайлов.Путь);
	ТекстXML = ТекстовыйДокумент.ПолучитьТекст();
	
	УдалитьФайлы(РезультатПолученияФайлов.Путь);
	
	ДоступныеВерсии = АдресныйКлассификаторВызовСервера.ПолучитьВерсииАдресныхСведений(ТекстXML);
	
	Возврат Новый Структура("Статус, ДоступныеВерсии", Истина, ДоступныеВерсии);
	
КонецФункции

// Путь к файлу на веб сервере, содержащему информацию по версиям адресных сведений
//
// Возвращаемое значение:
//     Строка - путь к файлу описания данных КЛАДР.
//
Функция ПутьКФайлуОписаниюДанныхКЛАДР() Экспорт
	
	Возврат "http://downloads.1c.ru/ipp/ITSREPV/V8Update/Configs/kladr/versions.xml";
	
КонецФункции

// Формирует структуру с ключами Статус (Истина) и Значение.
//
// Параметры:
//     Значение - Произвольный - передаваемое значение. 
//     Статус   - Булево       - передаваемый статус.
//
// Возвращаемое значение:
//     Структура - структура-результат
//
Функция ЗаполнитьРезультат(Знач Значение, Знач Статус = Истина)
	
	Если Статус Тогда
		Возврат Новый Структура("Статус, Значение", Истина, Значение);
	Иначе
		Возврат Новый Структура("Статус, СообщениеОбОшибке", Ложь, Значение);
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру с набором полей, аналогичным записи регистра сведений
// АдресныйКлассификатор с пустым набором значений
//
// Возвращаемое значение:
//     Структура - требуемая структура
//
Функция ПустаяСтруктураАдреса() Экспорт
	
	СтруктураАдреса =  Новый Структура;
	СтруктураАдреса.Вставить("Код", 0);
	СтруктураАдреса.Вставить("Наименование", "");
	СтруктураАдреса.Вставить("Сокращение", "");
	СтруктураАдреса.Вставить("ТипАдресногоЭлемента", 0);
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодАдресногоОбъектаВКоде", 0);
	СтруктураАдреса.Вставить("КодРайонаВКоде", 0);
	СтруктураАдреса.Вставить("КодГородаВКоде", 0);
	СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", 0);
	СтруктураАдреса.Вставить("КодУлицыВКоде", 0);
	СтруктураАдреса.Вставить("ПризнакАктуальности", 0);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Противоположность ОбщегоНазначенияКлиентСервер.СтруктураURI
Функция URIПоСтруктуре(Знач СтруктураURI)
	Результат = "";
	
	// Протокол
	Если Не ПустаяСтрока(СтруктураURI.Схема) Тогда
		Результат = Результат + СтруктураURI.Схема + "://";
	КонецЕсли;
	
	// Авторизация
	Если Не ПустаяСтрока(СтруктураURI.Логин) Тогда
		Результат = Результат + СтруктураURI.Логин + ":" + СтруктураURI.Пароль + "@";
	КонецЕсли;
		
	// Все остальное
	Результат = Результат + СтруктураURI.Хост;
	Если Не ПустаяСтрока(СтруктураURI.Порт) Тогда
		Результат = Результат + ":" + ?(ТипЗнч(СтруктураURI.Порт) = Тип("Число"), Формат(СтруктураURI.Порт, ""), СтруктураURI.Порт);
	КонецЕсли;
	
	Результат = Результат + "/" + СтруктураURI.ПутьНаСервере;
	Возврат Результат;
	
КонецФункции

// Возвращает вариант адресного классификатора: 
//
// Возвращаемое значение:
//     Строка       - идентификатор используемого адресного классфикатора "КЛАДР" 
//     Неопределено - если не удалось определить используемый вариант классификатора
//
Функция ИспользуемыйАдресныйКлассификатор() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ЕстьПодсистемаАдресныйКлассификатор = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор");
#Иначе
	ЕстьПодсистемаАдресныйКлассификатор = ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор");
#КонецЕсли
	
	Если ЕстьПодсистемаАдресныйКлассификатор Тогда
		Возврат "КЛАДР";
	КонецЕсли;
	
	// Нет подсистемы
	Возврат Неопределено;
КонецФункции

// Проверка на доступность всех необходимых файлов для загрузки
//
// Параметры:
//     КодыРегионов      - Массив    - содержит числовые значения - коды регионов-субъектов РФ (для последующей загрузки)
//     РабочийКаталог    - Строка    - каталог с проверяемыми файлами
//     ПараметрыЗагрузки - Структура - содержит поля
//         * КодИсточникаЗагрузки - Строка - описывает набор анализируемых файлов. Возможные значения: "КАТАЛОГ", "ИТС"
//         * ПолеОшибки           - Строка - имя реквизита для привязки сообщений об ошибке
//
// Возвращаемое значение - структура с полями:
//     * КодыРегионов    - Массив -       содержит числовые значения кодов регионов-субъектов для которых доступны все файлы
//     * ЕстьВсеФайлы    - Булево       - флаг того, что можно загружать все регионы
//     * Ошибки          - Структура    - см. описание ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю
//     * ФайлыПоРегионам - Соответствие - соответствие файлов регионам. Ключ может быть:
//                                          - числом (код региона), тогда значение - массив имен файлов, необходимых для загрузки этого региона
//                                          - символом "*", тогда значение - массив имен файлов, необходимых для загрузки всех регионов
//
Функция АнализДоступностиФайловКлассификатораВКаталоге(Знач КодыРегионов, Знач РабочийКаталог, Знач ПараметрыЗагрузки) Экспорт
	
	// В зависимости от классификатора будет разный набор файлов
	ТипКлассификатора = ИспользуемыйАдресныйКлассификатор();
	Если ТипКлассификатора = "КЛАДР" Тогда
		Возврат АнализДоступностиФайловКлассификатораВКаталогеКЛАДР(КодыРегионов, РабочийКаталог, ПараметрыЗагрузки);
	КонецЕсли;
	
	// Фиктивный вызов для получения пустой структуры
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки");
	Возврат АнализДоступностиФайловКлассификатораВКаталогеКЛАДР(КодыРегионов, РабочийКаталог, ПараметрыЗагрузки);
КонецФункции

Функция АнализДоступностиФайловКлассификатораВКаталогеКЛАДР(Знач КодыРегионов, Знач РабочийКаталог, Знач ПараметрыЗагрузки)
	
	Результат = Новый Структура;
	Результат.Вставить("КодыРегионов", КодыРегионов);
	Результат.Вставить("ЕстьВсеФайлы", Истина);
	Результат.Вставить("Ошибки",       Неопределено);
	Результат.Вставить("ФайлыПоРегионам",              Новый Соответствие);
	
	Если ПараметрыЗагрузки.КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		// Полный состав файлов КЛАДР
		ШаблонОшибки = НСтр("ru = 'Не найден файл КЛАДР ""%1""'");
		Расширение   = ".DBF";
		ИменаФайлов  = "ALTNAMES, DOMA, KLADR, SOCRBASE, STREET";
		
	ИначеЕсли ПараметрыЗагрузки.КодИсточникаЗагрузки = "ИТС" Тогда
		// Поставляемые файлы
		ШаблонОшибки = НСтр("ru = 'Не найден файл ""%1""'");
		Расширение   = ".EXE";
		ИменаФайлов  = "ALTNAMES, DOMA, KLADR, SOCRBASE, STREET";
		
	Иначе
		Возврат Результат;
		
	КонецЕсли;

	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
	
	Результат.ФайлыПоРегионам["*"] = Новый Массив;
	Для Каждого КлючЗначение Из Новый Структура(ИменаФайлов) Цикл
		ИмяФайла = КлючЗначение.Ключ + Расширение;
		Файл = НайтиФайл(РабочийКаталог, ИмяФайла);
		Если Файл.Существует Тогда
			Результат.ФайлыПоРегионам["*"].Добавить(Файл.ПолноеИмя);
		Иначе
			Результат.ЕстьВсеФайлы = Ложь;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки, ПараметрыЗагрузки.ПолеОшибки, 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяФайла));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Поиск первого файла по маске без учета регистра (особенностей операционной системы)
//
// Параметры:
//     Каталог  - Строка - каталог, в котором ищется файл
//     ИмяФайла - Строка - имя искомого файла
//
// Возвращаемое значение:
//     Структура - описание найденного файла. Содержит поля:
//         * Существует       - Булево - флаг того, что указанный файл существует
//         * Имя              - Строка - характеристика найденного файла, см. описания типа Файл
//         * ИмяБезРасширения - Строка - характеристика найденного файла, см. описания типа Файл
//         * ПолноеИмя        - Строка - характеристика найденного файла, см. описания типа Файл
//         * Путь             - Строка - характеристика найденного файла, см. описания типа Файл
//         * Расширение       - Строка - характеристика найденного файла, см. описания типа Файл
//
Функция НайтиФайл(Знач Каталог, Знач ИмяФайла) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		Маска = ВРег(ИмяФайла);
	Иначе
		Маска = "";
		Для Позиция = 1 По СтрДлина(ИмяФайла) Цикл
			Символ = Сред(ИмяФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				Маска = Маска + Символ;
			Иначе
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("Существует, Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение", Ложь); 
	Варианты = НайтиФайлы(Каталог, Маска);
	Если Варианты.Количество() > 0 Тогда 
		Результат.Существует = Истина;
		ЗаполнитьЗначенияСвойств(Результат, Варианты[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что клиент работает под windows
//
// Возвращаемое значение:
//     Булево - Истина, если клиент работает windows
//
Функция ЭтоWindowsКлиент() Экспорт
	
#Если Клиент Или ВнешнееСоединение Тогда
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
#Иначе
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоLinuxКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("ЭтоLinuxКлиент");
	
	Если ЭтоLinuxКлиент = Неопределено Тогда
		// Нет клиентского приложения.
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Не ЭтоLinuxКлиент;
#КонецЕсли
	
	Возврат Результат;
КонецФункции

// Удаляет временный файл. 
// Если при попытке удаления возникает ошибка, она игнорируется - файл будет удален позднее
//
Процедура УдалитьВременныйФайл(Знач ПолноеИмяФайла) Экспорт
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
		// Дополнительная обработка не требуется
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти
