#Область ОбработкаСобытийФормы

// Обработка события модуля формы ПриОткрытии
// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
КонецПроцедуры

// Обработка события модуля формы ОбработкаОповещения
// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	Если Форма.Параметры.РежимПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Источник) = Тип("СправочникСсылка.СобытияПланировщика")
		И НЕ ТипЗнч(Источник) = Тип("СправочникСсылка.КалендариПланировщика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаписиКалендариПланировщика" Тогда
		Форма.ЗаполнитьСписокКалендарей();
	КонецЕсли;
	
	РеквизитыФормы = ПланировщикИнтерфейсКлиентСервер.ПолучитьСтруктуруРеквизитовФормы(Форма);
	Если ПланировщикДанныеВызовСервера.ПроверитьНеобходимостьОбновленияФормы(РеквизитыФормы, Источник) Тогда
		Форма.Обновить(Неопределено);
	КонецЕсли;
КонецПроцедуры

// Обработка события модуля формы ПередЗакрытием
// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПередЗакрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработка события модуля формы ПриЗакрытии
// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПриЗакрытии(Форма) Экспорт
	
КонецПроцедуры

// Обработка события модуля формы ОбработкаЗаписиНового
// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//		
Процедура ОбработкаЗаписиНового(Форма, НовыйОбъект, Источник, СтандартнаяОбработка) Экспорт
	
	РеквизитыФормы = ПланировщикИнтерфейсКлиентСервер.ПолучитьСтруктуруРеквизитовФормы(Форма);
	Если ПланировщикДанныеВызовСервера.ПроверитьНеобходимостьОбновленияФормы(РеквизитыФормы, Источник) Тогда
		Форма.Обновить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументHTMLПланировщик

// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПланировщикВыбор(Форма, ДатаНачала, ДатаОкончания, ВесьДень) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма"			, Форма);
	ДопПараметры.Вставить("ДатаНачала"		, ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания"	, ДатаОкончания);
	ДопПараметры.Вставить("ВесьДень"		, ВесьДень);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПланировщикВыборЗавершение", ЭтотОбъект, ДопПараметры);
	
	НачалоСобытия		= Дата(ДатаНачала);
	ОкончаниеСобытия	= Дата(ДатаОкончания);
	ЗначенияЗаполнения	= Новый Структура("НачалоСобытия, ОкончаниеСобытия, ВесьДень", НачалоСобытия, ОкончаниеСобытия, ВесьДень);
	
	ОткрытьФорму("Справочник.СобытияПланировщика.Форма.ФормаСобытияУпрощенная",
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),
		Форма,
		Истина, , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПланировщикСобытиеВыбор(Форма, ДанныеСобытия) Экспорт
	Если ДанныеСобытия.Идентификатор = "newEvent" Тогда
		ОткрытьЗначение(Форма.НовоеСобытие.Задача);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Ссылка) Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СобытиеСсылка"		, ДанныеСобытия.Ссылка);
		ПараметрыФормы.Вставить("НачалоЭкземпляра"	, ДанныеСобытия.Начало); 
		ПараметрыФормы.Вставить("КонецЭкземпляра"	, ДанныеСобытия.Конец);
		
		ОткрытьФорму("Справочник.СобытияПланировщика.Форма.ФормаСобытия", ПараметрыФормы, Форма);
	КонецЕсли;
КонецПроцедуры

// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПланировщикСобытиеПриОкончанииПеретаскивания(Форма, ДанныеСобытия, КоличествоДней, КоличествоМинут, ВесьДень) Экспорт

	ТекНачало	= ДанныеСобытия.Начало;
	ТекКонец	= ДанныеСобытия.Конец;
	
	Изменение	= КоличествоДней * 86400 + КоличествоМинут * 60;
	НовНачало	= ТекНачало + Изменение;
	НовКонец	= ТекКонец	+ Изменение;
	
	Если НЕ ДанныеСобытия.Идентификатор = "newEvent" Тогда
		СобытиеСсылка = ПланировщикДанныеВызовСервера.ПереместитьСобытие(ДанныеСобытия.Ссылка, ТекНачало, НовНачало, НовКонец, ВесьДень);
		
		Если СобытиеСсылка = Неопределено Тогда
			Форма.Обновить(Неопределено);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСобытия.Ссылка	= СобытиеСсылка;
	ДанныеСобытия.Начало	= НовНачало;
	ДанныеСобытия.Конец		= НовКонец;
	ДанныеСобытия.ВесьДень	= ВесьДень;

КонецПроцедуры

// Параметры в соотв. процедуре см. ПланировщикИнтерфейсКлиентПереопределяемый
//
Процедура ПланировщикСобытиеПриОкончанииИзменениеРазмера(Форма, ДанныеСобытия, КоличествоДней, КоличествоМинут) Экспорт

	ТекНачало	= ДанныеСобытия.Начало;
	ТекКонец	= ДанныеСобытия.Конец;
	НовКонец	= ТекКонец	+ КоличествоДней * 86400 + КоличествоМинут * 60;
	
	Если НЕ ДанныеСобытия.Идентификатор = "newEvent" Тогда
		СобытиеСсылка = ПланировщикДанныеВызовСервера.ПереместитьСобытие(ДанныеСобытия.Ссылка, ТекНачало, ТекНачало, НовКонец, Ложь);
		
		Если СобытиеСсылка = Неопределено Тогда
			Форма.Обновить(Неопределено);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСобытия.Ссылка	= СобытиеСсылка;
	ДанныеСобытия.Конец		= НовКонец;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПланировщикВыборЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Форма") Тогда
		Возврат;
	ИначеЕсли НЕ ТипЗнч(ДопПараметры.Форма) = Тип("УправляемаяФорма") Тогда
		Возврат;
	ИначеЕсли НЕ ДопПараметры.Форма.ИмяФормы = "Обработка.ПланировщикИнтерфейс.Форма.Форма" Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Форма.Обновить(Неопределено);
КонецПроцедуры

// Активизирует обработчик ожидания, проверяющий текущие напоминания пользователя.
Процедура ПослеНачалаРаботыСистемы() Экспорт

	ПодключитьОбработчикОжидания("ПроверитьНапоминанияПланировщика", 60, Истина); // через 60 секунд после запуска клиента
	
КонецПроцедуры

#КонецОбласти
