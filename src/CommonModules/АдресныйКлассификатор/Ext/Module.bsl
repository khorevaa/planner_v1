////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версии адресных объектов, записанные при последнем обновлении.
// Если записи об адресном объекте нет - возвращается пустая дата
// 
// Возвращаемое значение:
//    СписокЗначений - в представлении - номер адресного объекта, в значении - UTC дата выпуска версии.
//
Функция ВерсииАдресныхОбъектов() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Версии.АдресныйОбъект    КАК АдресныйОбъект,
		|	Версии.ДатаВыпускаВерсии КАК ДатаВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектовАдресногоКлассификатора КАК Версии
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Регион.КодАдресногоОбъектаВКоде КАК КодРегиона
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|ГДЕ
		|	Регион.ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|");
	
	РезультатЗапроса= Запрос.ВыполнитьПакет();
	
	ТекущиеВерсии = РезультатЗапроса[0].Выгрузить();
	ТекущиеВерсии.Индексы.Добавить("АдресныйОбъект");
	
	ДатаВерсии = '00000000';
	Результат  = Новый СписокЗначений;
	
	Для Каждого КодРегиона Из РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("КодРегиона") Цикл
		КодСтрокой = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");
		СтрокаВерсии = ТекущиеВерсии.Найти(КодСтрокой, "АдресныйОбъект");
		Результат.Добавить( ?(СтрокаВерсии = Неопределено, ДатаВерсии, СтрокаВерсии.ДатаВерсии), КодСтрокой);
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		Результат.Добавить("AL", ДатаВерсии);
		Результат.Добавить("SO", ДатаВерсии);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура для загрузки данных в КЛАДР
//
// Параметры:
//    КодАдресногоОбъекта  - Строка - Код адресного объекта в формате NN
//    ПутьКДаннымНаСервере - Строка - Путь к каталогу на сервере, в котором хранятся файлы кладр
//    ЗагрузкаСВеб         - Булево - Если Истина, данные загружаются с веб сервера 1С (другое формирование имени файла)
//    Версия               - Дата   - Дата и время загружаемой версии
//
Процедура ЗагрузитьКлассификаторПоАдресномуОбъекту(Знач КодАдресногоОбъекта, Знач ПутьКДаннымНаСервере, Знач ЗагрузкаСВеб, Знач Версия) Экспорт
	
	КодАдресногоОбъекта = Лев(КодАдресногоОбъекта, 2);
	
	АльтернативныеНазвания = Новый ТаблицаЗначений;
	АльтернативныеНазвания.Колонки.Добавить("Код");
	АльтернативныеНазвания.Колонки.Добавить("Наименование");
	АльтернативныеНазвания.Колонки.Добавить("Сокращение");
	АльтернативныеНазвания.Колонки.Добавить("Индекс");
	
	АдресныеСведения = Новый ТаблицаЗначений;
	АдресныеСведения.Колонки.Добавить("Код");
	АдресныеСведения.Колонки.Добавить("КодАдресногоОбъектаВКоде");
	АдресныеСведения.Колонки.Добавить("Наименование");
	АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
	АдресныеСведения.Колонки.Добавить("Сокращение");
	АдресныеСведения.Колонки.Добавить("Индекс");
	АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
	АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
	АдресныеСведения.Колонки.Добавить("КодГородаВКоде");
	АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");
	АдресныеСведения.Колонки.Добавить("КодУлицыВКоде");
	АдресныеСведения.Колонки.Добавить("ПризнакАктуальности");
	
	ИндексПоКоду = АдресныеСведения.Индексы.Добавить("Код");
	
	// Имена файлов приведены к верхнему регистру
	
	ИмяФайлаАльтернативныхНазваний = ? (ЗагрузкаСВеб, "ALTN", "ALTNAMES");
	Постфикс                       = ? (ЗагрузкаСВеб, КодАдресногоОбъекта, "");
	
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации() + "." + НСтр("ru = 'Загрузка из файлов'");
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начата загрузка адресного классификатора по региону %1 из каталога ""%2""'"), 
			КодАдресногоОбъекта, ПутьКДаннымНаСервере
	));
	
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, 
		ПутьКДаннымНаСервере + "KLADR" + Постфикс, АдресныеСведения, АльтернативныеНазвания);
	
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
		ПутьКДаннымНаСервере + "STREET" + Постфикс, АдресныеСведения, АльтернативныеНазвания, 5);
	
	ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
		ПутьКДаннымНаСервере + "DOMA" + Постфикс, АдресныеСведения, АльтернативныеНазвания, 6);
	
	ЗаполнитьАльтернативныеНазвания(ПутьКДаннымНаСервере + ИмяФайлаАльтернативныхНазваний + Постфикс, 
		АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб);
	
	// Выравнивание кода - для совместимости
	АдресныеСведения.Индексы.Удалить(ИндексПоКоду);
	Для Каждого Элемент Из АдресныеСведения Цикл
		Элемент.Код = Лев(Строка(Элемент.Код) + "000000000000000000000", 21);
	КонецЦикла;
	
	// Запись в одной транзакции с версией
	НачатьТранзакцию();
	Попытка
		НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Установить( Число(КодАдресногоОбъекта) );
		НаборАдресныхСведений.Загрузить(АдресныеСведения);
		НаборАдресныхСведений.Записать();
		
		УстановитьВерсиюКлассификатора(КодАдресногоОбъекта, Версия);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружен адресный классификатор по региону %1, %2 записей.'"), 
			КодАдресногоОбъекта, АдресныеСведения.Количество()
	));
КонецПроцедуры

// Очищает адресные сведений по переданным адресным объектам.
// 
// Параметры:
//    МассивАдресныхОбъектов - Массив - каждый элемент - строка, номер адресного объекта в формате NN
//
Процедура УдалитьАдресныеСведения(Знач МассивАдресныхОбъектов) Экспорт
	
	Для Каждого КодАдресногоОбъекта Из МассивАдресныхОбъектов Цикл
		
		НачатьТранзакцию();
		Попытка
			НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
			НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Установить( Число(КодАдресногоОбъекта) );
			НаборАдресныхСведений.Записать();
			
			УстановитьВерсиюКлассификатора(КодАдресногоОбъекта);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает число адресных объектов по которым заполнены адресные сведения
//
// Возвращаемое значение:
//    Число - Количество заполненных адресных объектов.
//
Функция ЧислоЗаполненныхАдресныхОбъектов() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Регион.КодАдресногоОбъектаВКоде) КАК КоличествоЗагруженных
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|ГДЕ
		|	Регион.ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень2
		|		ГДЕ 
		|			Уровень2.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень3
		|		ГДЕ 
		|			Уровень3.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень4
		|		ГДЕ 
		|			Уровень4.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень5
		|		ГДЕ 
		|			Уровень5.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень6
		|		ГДЕ 
		|			Уровень6.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗагруженных;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция сообщает, загружен ли адресный классификатор
//
// Возвращаемое значение:
//     Булево - Истина, если адресный классификатор загружен, Ложь - в противном случае.
//
Функция КлассификаторЗагружен() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
	                      |ИЗ
	                      |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	                      |ГДЕ
	                      |	АдресныйКлассификатор.ТипАдресногоЭлемента > 1");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


// Возвращает структуру, содержащую информацию по адресному объекту
// 
// Параметры
//    КодАдресногоОбъекта - Строка - номер адресного объекта от 1 до 89 + 99 в формате NN
//
// Возвращаемое значение:
//    Структура - описание адресного объекта, содержит ключи:
//        * КодАдресногоОбъекта - Строка - код адресного объекта.
//        * Наименование        - Строка - наименование адресного объекта.
//        * Сокращение          - Строка - сокращение адресного объекта.
//        * Индекс              - Строка - индекс.
//
Функция ИнформацияПоАдресномуОбъекту(Знач КодАдресногоОбъекта) Экспорт
	
	Результат = Новый Структура("КодАдресногоОбъекта, Наименование, Сокращение, Индекс");
	
	Если КодАдресногоОбъекта = "AL" Тогда
		Результат.КодАдресногоОбъекта = "AL";
		Результат.Наименование        = НСтр("ru = 'Альтернативные названия'");
		Результат.Сокращение          = "";
		Результат.Индекс              = "";
		
	ИначеЕсли КодАдресногоОбъекта = "SO" Тогда
		Результат.КодАдресногоОбъекта = "SO";
		Результат.Наименование        = НСтр("ru = 'Адресные сокращения'");
		Результат.Сокращение          = "";
		Результат.Индекс              = "";
		
	Иначе
		Классификатор = РегистрыСведений.АдресныйКлассификатор.КлассификаторСубъектовРФ();
		Если ТипЗнч(КодАдресногоОбъекта) = Тип("Строка") Тогда
			ТипЧисло = Новый ОписаниеТипов("Число");
			КодАдресногоОбъекта = ТипЧисло.ПривестиЗначение(КодАдресногоОбъекта);
		КонецЕсли;
		
		АдресныйОбъект = Классификатор.Найти(КодАдресногоОбъекта, "КодСубъектаРФ");
		Если АдресныйОбъект <> Неопределено ТОгда
			Результат.КодАдресногоОбъекта = Формат(АдресныйОбъект.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН=");
			Результат.Наименование        = АдресныйОбъект.Наименование;
			Результат.Сокращение          = АдресныйОбъект.Сокращение;
			Результат.Индекс              = АдресныйОбъект.ПочтовыйИндекс;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Найти по индексу записи в адресном классификаторе.
//
// Параметры:
//    Индекс - Строка - индекс, по которому будет производиться поиск 
//
// Возвращаемое значение:
//    Структура - описание найденного. Содержит поля:
//        * Количество          - Число - количество найденных вариантов
//        * НайденныйРегион     - Строка - если найден один регион
//        * НайденныйРайон      - Строка - если найден один район
//        * ПризнакАктуальности - Число - признак актуальности если найден один вариант
//        * АдресВХранилище     - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Функция НайтиЗаписиПоИндексу(Индекс) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПризнакАктуальности", 0);
	Результат.Вставить("НайденныйРегион",     "");
	Результат.Вставить("НайденныйРайон",      "");
	Результат.Вставить("Количество",          0);
	
	// Проверим правильность ввода индекса
	Если СтрДлина(Индекс) <> 6 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 1.Найдем записи по индексу, а также записи родительских элементов, и сохраним все во временных таблицах 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|
		|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Индекс = &Индекс
		|ИНДЕКСИРОВАТЬ ПО 
		|	КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде
		|";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получим списки регионов и районов
	ЗапросРегионов = Новый Запрос;
	ЗапросРегионов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРегионов.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регионы.КодРегиона          КАК КодРегиона,
		|	Регионы.Наименование        КАК Наименование,
		|	Регионы.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	Регионы КАК Регионы
		|";
	ВыборкаРегионов = ЗапросРегионов.Выполнить().Выбрать();
	
	ЗапросРайонов = Новый Запрос;
	ЗапросРайонов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРайонов.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Районы.КодРайона           КАК КодРайона,
		|	Районы.Наименование        КАК Наименование,
		|	Районы.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	Районы КАК Районы
		|";
	ВыборкаРайонов = ЗапросРайонов.Выполнить().Выбрать();
	
	// 3.Анализируем количество регионов и районов и на основании этого принимаем решение
	// Если не найдены регионы или районы - значит нет ни одного подходящего адреса - можно завершить поиск
	Если ВыборкаРегионов.Количество() = 0 Тогда
		Возврат Результат;
		// Если найдено несколько регионов, то пользователю нужно будет указывать при выборе также регион и район
	ИначеЕсли ВыборкаРегионов.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
		Результат.НайденныйРегион = "";
		Результат.НайденныйРайон = "";
		// Если найдено несколько районов, то пользователю нужно будет указывать при выборе также район
	ИначеЕсли ВыборкаРайонов.Количество() <> 1 Тогда // ВыборкаРегионов.Количество() = 1
		ДетализацияДоУровня = 2;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		Результат.НайденныйРайон = "";
		// Если же найден только один регион и один район - то их выбирать не нужно
	ИначеЕсли ВыборкаРайонов.Количество() = 1 Тогда
		ДетализацияДоУровня = 3;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		ВыборкаРайонов.Следующий();
		Результат.НайденныйРайон = ВыборкаРайонов.Наименование;
	КонецЕсли;
	
	// 4.Формируем список найденных адресов, с соответствующей детализацией
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросАдресов.Текст = "
		|ВЫБРАТЬ
		|	Адреса.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	Адреса.Код                  КАК Код,
		|	Адреса.ПризнакАктуальности  КАК ПризнакАктуальности,
		|
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Регионы.Наименование, """")          КАК Регион,
		|	""""                                          КАК Описание
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.Код = НаселенныеПункты.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Города КАК Города
		|ПО 
		|	Адреса.Код = Города.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.Код = Районы.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Регионы КАК Регионы
		|ПО 
		|	Адреса.Код = Регионы.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.Код = Улицы.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Улица,
		|	Код
		|";
	ВыборкаАдресов = ЗапросАдресов.Выполнить().Выбрать();
	
	// 5.Если найден один адрес - то в результат сохраняем компоненты адреса
	// Если же найдено несколько адресов то составляем таблицу адресов, 
	// формируя подробное описание адреса в зависимости от уровня детализации
	Количество = ВыборкаАдресов.Количество();
	Результат.Вставить("Количество", Количество);
	Если Количество = 1 Тогда
		ВыборкаАдресов.Следующий();
		Результат.Вставить("Регион", ВыборкаАдресов.Регион);
		Результат.Вставить("Район",  ВыборкаАдресов.Район);
		Результат.Вставить("Город",  ВыборкаАдресов.Город);
		Результат.Вставить("НаселенныйПункт", ВыборкаАдресов.НаселенныйПункт);
		Результат.Вставить("Улица",  ВыборкаАдресов.Улица);
		Результат.Вставить("ПризнакАктуальности", ВыборкаАдресов.ПризнакАктуальности);
		
	ИначеЕсли Количество > 1 Тогда
		НайденныеЗаписиПоИндексу = Новый ТаблицаЗначений;
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Улица",    Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Код",      Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ПризнакАктуальности",  Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ТипАдресногоЭлемента", Новый ОписаниеТипов("Число"));
		
		Пока ВыборкаАдресов.Следующий() Цикл
			// Не добавляем повторы улиц для домов
			Если ВыборкаАдресов.ТипАдресногоЭлемента = 6 
			     И НайденныеЗаписиПоИндексу.Найти(ВыборкаАдресов.Улица, "Улица")<>Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НайденныеЗаписиПоИндексу.Добавить();
			НоваяСтрока.Код = ВыборкаАдресов.Код;
			НоваяСтрока.ПризнакАктуальности = ВыборкаАдресов.ПризнакАктуальности;
			НоваяСтрока.ТипАдресногоЭлемента = ВыборкаАдресов.ТипАдресногоЭлемента;
			НоваяСтрока.Улица = ?(ВыборкаАдресов.ТипАдресногоЭлемента > 4, ВыборкаАдресов.Улица, НСтр("ru='< Без улицы >'"));
	
			НоваяСтрока.Описание = СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня,
				ВыборкаАдресов.Регион, ВыборкаАдресов.Район, ВыборкаАдресов.Город, ВыборкаАдресов.НаселенныйПункт);
		КонецЦикла;
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(НайденныеЗаписиПоИндексу, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресВХранилище", АдресВХранилище);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//    КодАдресногоЭлемента - Число     - код адресного элемента, по которому ищутся компоненты адреса 
//    Результат            - Структура - заполняется результатами поиска. Поля:
//        ПризнакАктуальности - Число  - признак актуальности найденного адреса
//        Регион              - Строка - наименование найденного региона
//        Район               - Строка - наименование найденного района
//        Город               - Строка - наименование найденного города
//        НаселенныйПункт     - Строка - наименование найденного населенного пункта
//        Улица               - Строка - наименование найденной улицы
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// 1.Раскладываем адрес и элементы адреса по временным таблицам
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|
		|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде            КАК КодУлицыВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &КодАдресногоЭлемента
		|";
	Запрос.УстановитьПараметр("КодАдресногоЭлемента", КодАдресногоЭлемента);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получаем наименование элементов адреса из временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Адреса.Код                                    КАК Код,
		|	ЕСТЬNULL(Регионы.Наименование, """")          КАК Регион,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица,
		|	Адреса.ПризнакАктуальности                    КАК ПризнакАктуальности
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регионы КАК Регионы
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.КодРайонаВКоде = Районы.КодРайонаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Города КАК Города
		|ПО 
		|	Адреса.КодГородаВКоде = Города.КодГородаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.КодНаселенногоПунктаВКоде = НаселенныеПункты.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.КодУлицыВКоде = Улицы.КодУлицыВКоде
		|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// 3.Выводим полученные данные в результат
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("Регион", "");
		Результат.Вставить("Район", "");
		Результат.Вставить("Город", "");
		Результат.Вставить("НаселенныйПункт", "");
		Результат.Вставить("Улица", "");
		Результат.Вставить("ПризнакАктуальности", 0);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Вставить("Регион", Выборка.Регион);
		Результат.Вставить("Район", Выборка.Район);
		Результат.Вставить("Город", Выборка.Город);
		Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
		Результат.Вставить("Улица", Выборка.Улица);
		Результат.Вставить("ПризнакАктуальности", Выборка.ПризнакАктуальности);
	КонецЕсли;
	
КонецПроцедуры

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//    КодАдресногоЭлемента - Число  - код адресного элемента, по которому ищутся компоненты адреса 
//    Дом                  - Строка - номер дома, если требуется
//    Корпус               - Строка - номер корпуса, если требуется
//    Квартира             - Строка - номер квартиры, если требуется
//
// Возвращаемое значение:
//    Структура - описание результата с полями:
//      * Индекс          - Строка - индекс адреса по переданным параметрам
//      * Регион          - Строка - регион по переданному коду
//      * Район           - Строка - район по переданному коду
//      * Город           - Строка - город по переданному коду
//      * НаселенныйПункт - Строка - населенный пункт по переданному коду
//      * Улица           - Строка - улица по переданному коду
//      * Дом             - Строка - переданный номер дома
//      * Корпус          - Строка - переданный номер корпуса
//      * Квартира        - Строка - переданный номер квартиры
//
Функция СтруктураАдреса(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	СтруктураАдреса = Новый Структура();
	ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, СтруктураАдреса);
	
	// Получение индекса по коду
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &Код
		|";
	Запрос.УстановитьПараметр("Код", КодАдресногоЭлемента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Индекс = ИндексАдреса(СтруктураАдреса.Регион, 
			СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица, 
			Дом, Корпус);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Индекс = Выборка.Индекс;
	КонецЕсли;
	СтруктураАдреса.Вставить("Индекс", Индекс);
	
	СтруктураАдреса.Вставить("Дом", Дом);
	СтруктураАдреса.Вставить("Корпус", Корпус);
	СтруктураАдреса.Вставить("Квартира", Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

// Определяет индекс по переданным региону, району, городу, населенному пункту, улице, дому и корпусу.
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    Улица                     - Строка - название улицы с сокращением
//    НомерДома                 - Строка - номер дома, для которого необходимо получить индекс
//    НомерКорпуса              - Строка - номер корпуса
//    РодительИндекса           - Структура - заполняется данными найденного адресного элемента
//
// Возвращаемое значение:
//    Строка - шестизначный почтовый индекс
//
Функция ИндексАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	РодительИндекса = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	ОбъектАдреса = Новый Структура;
	ОбъектАдреса.Вставить("Индекс",          "-");	// Заранее некорректный индекс для поиска вариантов
	ОбъектАдреса.Вставить("Регион",          НазваниеРегиона);
	ОбъектАдреса.Вставить("Район",           НазваниеРайона);
	ОбъектАдреса.Вставить("Город",           НазваниеГорода);
	ОбъектАдреса.Вставить("НаселенныйПункт", НазваниеНаселенногоПункта);
	ОбъектАдреса.Вставить("Улица",           НазваниеУлицы);
	ОбъектАдреса.Вставить("НомерДома",       НомерДома);
	ОбъектАдреса.Вставить("НомерКорпуса",    НомерКорпуса);

	РезультатАнализа = АнализСоответствияАдресаКлассификатору(ОбъектАдреса);
	
	Если РезультатАнализа.Варианты.Количество() = 0 Тогда
		// Нет ни одного варианта
		Возврат "";
	КонецЕсли;
	Вариант = РезультатАнализа.Варианты[0];
	
	// Восстанавливаем данные по коду-идентификатору в РодительИндекса
	Запрос = Новый Запрос( " 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код                       КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.Наименование              КАК Наименование,
		|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
		|	АдресныйКлассификатор.Индекс                    КАК Индекс,
		|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &Код
		|");
	Запрос.УстановитьПараметр("Код", Вариант.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РодительИндекса, Выборка);
	КонецЕсли;
	
	Возврат Вариант.Индекс;
КонецФункции

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры:
//    Текст               - Строка - введенный пользователем текст в адресном элементе ввода
//    Регион              - Строка - ранее введенное название региона
//    Район               - Строка - ранее введенное название района
//    Город               - Строка - ранее введенное название города
//    НаселенныйПункт     - Строка - ранее введенное название населенного пункта
//    УровеньЭлемента     - Число  - идентификатор адресного элемента ввода:
//                                   1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//    ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
//    СписокЗначений - данные для автоподбора
//    Неопределено   - в случае отсутствия данных
//
Функция АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности = 0) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(
		Регион, Район, Город, НаселенныйПункт, "", УровеньЭлемента);
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураОграничений, 51);
	
	Количество = РезультатЗапроса.Количество();
	Если (Количество = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ПолноеНаименование = СокрЛП(СтрокаРезультата.Наименование) + " " + СокрЛП(СтрокаРезультата.Сокращение);
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Значение", ПолноеНаименование);
		СтруктураРезультата.Вставить("ПометкаУдаления", (СтрокаРезультата.ПризнакАктуальности <> 0));
		Если СтруктураРезультата.ПометкаУдаления Тогда
			ТекстПредупреждения = НСтр("ru='""%ПолноеНаименование%"" не актуален.'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПолноеНаименование%", ПолноеНаименование);
			СтруктураРезультата.Вставить("Предупреждение", ТекстПредупреждения);
		КонецЕсли;
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устарело. Необходимо использовать АнализСоответствияАдресаКлассификатору
//
// Проверяет соответствие адреса КЛАДР по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу, при этом выводит все поля по каждому найденному элементу адреса
//
// Параметры: 
//    УказанныйИндекс           - Строка - индекс
//    НазваниеРегиона           - Строка - название региона (с сокращением)
//    НазваниеРайона            - Строка - название района (с сокращением)
//    НазваниеГорода            - Строка - название города (с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта (с сокращением)
//    НазваниеУлицы             - Строка - название улицы (с сокращением)
//    НомерДома                 - Строка - номер дома (владения, домовладения), для которого необходимо получить индекс 
//    НомерКорпуса              - Строка - номер корпуса (строения, литеры)
//
// Возвращаемое значение:
//    Структура - описание результата проверки:
//        Индекс          - Структура - структура полей найденного индекса
//        Регион          - Структура - структура полей найденного региона
//        Район           - Структура - структура полей найденного района
//        Город           - Структура - структура полей найденного города
//        НаселенныйПункт - Структура - структура полей найденного населенного пункта
//        Улица           - Структура - структура полей найденной улицы
//        Дом             - Структура - структура полей найденного дома
//        ЕстьОшибки      - Булево    - найдены ли ошибки при проверке
//        СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента (например )
//                                      а в качестве значения - подробный текст ошибки.
//
Функция ПроверитьСоответствиеАдресаКЛАДРу(Знач УказанныйИндекс = "", Знач НазваниеРегиона = "", Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Знач НомерДома = "", Знач НомерКорпуса = "") Экспорт
	
	ОбъектАдреса = Новый Структура;
	
	ОбъектАдреса.Вставить("Индекс",          УказанныйИндекс);
	ОбъектАдреса.Вставить("Регион",          НазваниеРегиона);
	ОбъектАдреса.Вставить("Район",           НазваниеРайона);
	ОбъектАдреса.Вставить("Город",           НазваниеГорода);
	ОбъектАдреса.Вставить("НаселенныйПункт", НазваниеНаселенногоПункта);
	ОбъектАдреса.Вставить("Улица",           НазваниеУлицы);
	ОбъектАдреса.Вставить("НомерДома",       НомерДома);
	ОбъектАдреса.Вставить("НомерКорпуса",    НомерКорпуса);

	РезультатАнализа = АнализСоответствияАдресаКлассификатору(ОбъектАдреса);
	
	ЕстьОшибки = РезультатАнализа.Ошибки.Количество() > 0;
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",      ЕстьОшибки);
	Результат.Вставить("СтруктураОшибок", РезультатАнализа.Ошибки);
	
	Результат.Вставить("Индекс",          "");
	Результат.Вставить("Регион",          АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Район",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Город",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("НаселенныйПункт", АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Улица",           АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	Результат.Вставить("Дом",             АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса() );
	
	Если РезультатАнализа.Варианты.Количество() = 0 Тогда
		// Нет ни одного варианта
		Возврат Результат;
	КонецЕсли;
	
	// Восстанавливаем данные по коду - идентификатору
	Вариант = РезультатАнализа.Варианты.Найти(УказанныйИндекс, "Индекс");
	Если Вариант = Неопределено Тогда
		// Нет точного совпадения, вернем первого
		Вариант = РезультатАнализа.Варианты[0];
		Результат.Вставить("Индекс", Вариант.Индекс);
	Иначе
		// Нашли точно
		Результат.Вставить("Индекс", УказанныйИндекс);
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Адрес.Код                       КАК Код,
		|	Адрес.Наименование              КАК Наименование,
		|	Адрес.Сокращение                КАК Сокращение,
		|	Адрес.Индекс                    КАК Индекс,
		|	Адрес.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	Адрес.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	Адрес.КодГородаВКоде            КАК КодГородаВКоде,
		|	Адрес.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адрес.КодУлицыВКоде             КАК КодУлицыВКоде,
		|	Адрес.ПризнакАктуальности       КАК ПризнакАктуальности,
		|	Адрес.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
		|
		|	Улица.Код                       КАК УлицаКод,
		|	Улица.Наименование              КАК УлицаНаименование,
		|	Улица.Сокращение                КАК УлицаСокращение,
		|	Улица.Индекс                    КАК УлицаИндекс,
		|	Улица.КодАдресногоОбъектаВКоде  КАК УлицаКодАдресногоОбъектаВКоде,
		|	Улица.КодРайонаВКоде            КАК УлицаКодРайонаВКоде,
		|	Улица.КодГородаВКоде            КАК УлицаКодГородаВКоде,
		|	Улица.КодНаселенногоПунктаВКоде КАК УлицаКодНаселенногоПунктаВКоде,
		|	Улица.КодУлицыВКоде             КАК УлицаКодУлицыВКоде,
		|	Улица.ПризнакАктуальности       КАК УлицаПризнакАктуальности,
		|	Улица.ТипАдресногоЭлемента      КАК УлицаТипАдресногоЭлемента,
		|
		|	НаселенныйПункт.Код                       КАК НаселенныйПунктКод,
		|	НаселенныйПункт.Наименование              КАК НаселенныйПунктНаименование,
		|	НаселенныйПункт.Сокращение                КАК НаселенныйПунктСокращение,
		|	НаселенныйПункт.Индекс                    КАК НаселенныйПунктИндекс,
		|	НаселенныйПункт.КодАдресногоОбъектаВКоде  КАК НаселенныйПунктКодАдресногоОбъектаВКоде,
		|	НаселенныйПункт.КодРайонаВКоде            КАК НаселенныйПунктКодРайонаВКоде,
		|	НаселенныйПункт.КодГородаВКоде            КАК НаселенныйПунктКодГородаВКоде,
		|	НаселенныйПункт.КодНаселенногоПунктаВКоде КАК НаселенныйПунктКодНаселенногоПунктаВКоде,
		|	НаселенныйПункт.КодУлицыВКоде             КАК НаселенныйПунктКодУлицыВКоде,
		|	НаселенныйПункт.ПризнакАктуальности       КАК НаселенныйПунктПризнакАктуальности,
		|	НаселенныйПункт.ТипАдресногоЭлемента      КАК НаселенныйПунктТипАдресногоЭлемента,
		|
		|	Город.Код                       КАК ГородКод,
		|	Город.Наименование              КАК ГородНаименование,
		|	Город.Сокращение                КАК ГородСокращение,
		|	Город.Индекс                    КАК ГородИндекс,
		|	Город.КодАдресногоОбъектаВКоде  КАК ГородКодАдресногоОбъектаВКоде,
		|	Город.КодРайонаВКоде            КАК ГородКодРайонаВКоде,
		|	Город.КодГородаВКоде            КАК ГородКодГородаВКоде,
		|	Город.КодНаселенногоПунктаВКоде КАК ГородКодНаселенногоПунктаВКоде,
		|	Город.КодУлицыВКоде             КАК ГородКодУлицыВКоде,
		|	Город.ПризнакАктуальности       КАК ГородПризнакАктуальности,
		|	Город.ТипАдресногоЭлемента      КАК ГородТипАдресногоЭлемента,
		|
		|	Район.Код                       КАК РайонКод,
		|	Район.Наименование              КАК РайонНаименование,
		|	Район.Сокращение                КАК РайонСокращение,
		|	Район.Индекс                    КАК РайонИндекс,
		|	Район.КодАдресногоОбъектаВКоде  КАК РайонКодАдресногоОбъектаВКоде,
		|	Район.КодРайонаВКоде            КАК РайонКодРайонаВКоде,
		|	Район.КодГородаВКоде            КАК РайонКодГородаВКоде,
		|	Район.КодНаселенногоПунктаВКоде КАК РайонКодНаселенногоПунктаВКоде,
		|	Район.КодУлицыВКоде             КАК РайонКодУлицыВКоде,
		|	Район.ПризнакАктуальности       КАК РайонПризнакАктуальности,
		|	Район.ТипАдресногоЭлемента      КАК РайонТипАдресногоЭлемента,
		|
		|	Регион.Код                       КАК РегионКод,
		|	Регион.Наименование              КАК РегионНаименование,
		|	Регион.Сокращение                КАК РегионСокращение,
		|	Регион.Индекс                    КАК РегионИндекс,
		|	Регион.КодАдресногоОбъектаВКоде  КАК РегионКодАдресногоОбъектаВКоде,
		|	Регион.КодРайонаВКоде            КАК РегионКодРайонаВКоде,
		|	Регион.КодГородаВКоде            КАК РегионКодГородаВКоде,
		|	Регион.КодНаселенногоПунктаВКоде КАК РегионКодНаселенногоПунктаВКоде,
		|	Регион.КодУлицыВКоде             КАК РегионКодУлицыВКоде,
		|	Регион.ПризнакАктуальности       КАК РегионПризнакАктуальности,
		|	Регион.ТипАдресногоЭлемента      КАК РегионТипАдресногоЭлемента
		|
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адрес
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улица
		|ПО
		|	  Улица.ТипАдресногоЭлемента      = 5
		|	И Улица.КодАдресногоОбъектаВКоде  = Адрес.КодАдресногоОбъектаВКоде
		|	И Улица.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Улица.КодГородаВКоде            = Адрес.КодГородаВКоде
		|	И Улица.КодНаселенногоПунктаВКоде = Адрес.КодНаселенногоПунктаВКоде
		|	И Улица.КодУлицыВКоде             = Адрес.КодУлицыВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ПО
		|	  НаселенныйПункт.ТипАдресногоЭлемента      = 4
		|	И НаселенныйПункт.КодАдресногоОбъектаВКоде  = Адрес.КодАдресногоОбъектаВКоде
		|	И НаселенныйПункт.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И НаселенныйПункт.КодГородаВКоде            = Адрес.КодГородаВКоде
		|	И НаселенныйПункт.КодНаселенногоПунктаВКоде = Адрес.КодНаселенногоПунктаВКоде
		|	И НаселенныйПункт.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Город
		|ПО
		|	  Город.ТипАдресногоЭлемента      = 3
		|	И Город.КодАдресногоОбъектаВКоде  = Адрес.КодАдресногоОбъектаВКоде
		|	И Город.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Город.КодГородаВКоде            = Адрес.КодГородаВКоде
		|	И Город.КодНаселенногоПунктаВКоде = 0
		|	И Город.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Район
		|ПО
		|	  Район.ТипАдресногоЭлемента      = 2
		|	И Район.КодАдресногоОбъектаВКоде  = Адрес.КодАдресногоОбъектаВКоде
		|	И Район.КодРайонаВКоде            = Адрес.КодРайонаВКоде
		|	И Район.КодГородаВКоде            = 0
		|	И Район.КодНаселенногоПунктаВКоде = 0
		|	И Район.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|ПО
		|	  Регион.ТипАдресногоЭлемента      = 1
		|	И Регион.КодАдресногоОбъектаВКоде  = Адрес.КодАдресногоОбъектаВКоде
		|	И Регион.КодРайонаВКоде            = 0
		|	И Регион.КодГородаВКоде            = 0
		|	И Регион.КодНаселенногоПунктаВКоде = 0
		|	И Регион.КодУлицыВКоде             = 0
		|
		|ГДЕ
		|	Адрес.Код = &Код
		|");
	Запрос.УстановитьПараметр("Код", Вариант.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Регион,          Выборка, "Регион");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Район,           Выборка, "Район");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Город,           Выборка, "Город");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.НаселенныйПункт, Выборка, "НаселенныйПункт");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Улица,           Выборка, "Улица");
		ЗаполнитьСтруктуруАдресаПоВыборке(Результат.Дом,             Выборка);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверка адреса с возможно неуникальными полями на каком-то уровне.
//
// Параметры:
//    ОбъектАдреса - Структура - Содержит поля адреса:
//      * Индекс          - Строка - наименование с сокращением части адреса
//      * Регион          - Строка - наименование с сокращением части адреса
//      * Район           - Строка - наименование с сокращением части адреса
//      * Город           - Строка - наименование с сокращением части адреса
//      * НаселенныйПункт - Строка - наименование с сокращением части адреса
//      * Улица           - Строка - наименование с сокращением части адреса, 
//      * НомерДома       - Строка - значение номера дома (совместимость с КЛАДР)
//      * НомерКорпуса    - Строка - значение номера корпуса (совместимость с КЛАДР)
//
// Возвращаемое значение:
//     Структура - Результаты анализа. Содержит поля
//       * Ошибки   - Структура       - Описание ошибок, ключ - идентификатор части адреса (имя поля из ОбъектАдреса), значение - текст ошибки. 
//                                      Если нет ошибок, то возвращается пустая структура
//       * Варианты - ТаблицаЗначений - Описание найденных вариантов. Содержит колонки:
//           ** Код    - Число  - Код классификатора объекта - варианта
//           ** Индекс - Строка - Почтовый индекс объекта - варианта
//
Функция АнализСоответствияАдресаКлассификатору(Знач ОбъектАдреса) Экспорт
	Результат = Новый Структура("Варианты, Ошибки", Новый ТаблицаЗначений, Новый Структура);
	
	ВариантыАдреса = Результат.Варианты;
	ВариантыАдреса.Колонки.Добавить("Код",    Новый ОписаниеТипов("Число"));
	ВариантыАдреса.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Строка"));
	ВариантыАдреса.Индексы.Добавить("Код");
	ВариантыАдреса.Индексы.Добавить("Индекс");
	
	Ошибки = Результат.Ошибки;
	
	// Регион должен быть указан всегда, иначе дальше не проверяем
	Если ПустаяСтрока(ОбъектАдреса.Регион) Тогда
		Ошибки.Вставить("Регион", НСтр("ru = 'Не указан регион адреса.'"));
		Возврат Результат;
	КонецЕсли;
	
	// 1. Проверка объекта на присутствие в классификаторе до улицы
	
	Запрос = Новый Запрос;
	
	// Регион
	ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Регион);
	Запрос.УстановитьПараметр("РегионНаименование", ЧастиНазвания.Наименование);
	Запрос.УстановитьПараметр("РегионСокращение",   ЧастиНазвания.Сокращение);
	СтрокаСортировки = "";
	
	// Район
	РайонУстановлен = Не ПустаяСтрока(ОбъектАдреса.Район);
	Если РайонУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Район);
		Запрос.УстановитьПараметр("РайонНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("РайонСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаРайон = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Район
			|ПО
			|	Район.Наименование = &РайонНаименование
			|	И Район.Сокращение = &РайонСокращение
			|	И Район.ТипАдресногоЭлемента = 2
			|	И Район.КодАдресногоОбъектаВКоде  = Регион.КодАдресногоОбъектаВКоде 
			|	И Район.КодГородаВКоде            = 0 
			|	И Район.КодНаселенногоПунктаВКоде = 0
			|	И Район.КодУлицыВКоде             = 0
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Район.Наименование УБЫВ, Район.Сокращение УБЫВ";
	Иначе
		ТаблицаРайон = "";
	КонецЕсли;
	
	// Город
	ГородУстановлен = Не ПустаяСтрока(ОбъектАдреса.Город);
	Если ГородУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Город);
		Запрос.УстановитьПараметр("ГородНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("ГородСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаГород = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Город
			|ПО
			|	Город.Наименование = &ГородНаименование
			|	И Город.Сокращение = &ГородСокращение
			|	И Город.ТипАдресногоЭлемента = 3
			|	И Город.КодАдресногоОбъектаВКоде  = Регион.КодАдресногоОбъектаВКоде 
			|	И Город.КодРайонаВКоде            = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|	И Город.КодНаселенногоПунктаВКоде = 0
			|	И Город.КодУлицыВКоде             = 0
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Город.Наименование УБЫВ, Город.Сокращение УБЫВ";
	Иначе
		ТаблицаГород = "";
	КонецЕсли;
	
	// Населенный пункт
	НаселенныйПунктУстановлен = Не ПустаяСтрока(ОбъектАдреса.НаселенныйПункт);
	Если НаселенныйПунктУстановлен Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.НаселенныйПункт);
		Запрос.УстановитьПараметр("НаселенныйПунктНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("НаселенныйПунктСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаНаселенныйПункт = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
			|ПО
			|	НаселенныйПункт.Наименование = &НаселенныйПунктНаименование
			|	И НаселенныйПункт.Сокращение = &НаселенныйПунктСокращение
			|	И НаселенныйПункт.ТипАдресногоЭлемента = 4
			|	И НаселенныйПункт.КодАдресногоОбъектаВКоде  = Регион.КодАдресногоОбъектаВКоде 
			|	И НаселенныйПункт.КодРайонаВКоде            = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|	И НаселенныйПункт.КодГородаВКоде            = " + ?(ГородУстановлен, "Город.КодГородаВКоде", "0") + "
			|	И НаселенныйПункт.КодУлицыВКоде             = 0
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", НаселенныйПункт.Наименование УБЫВ, НаселенныйПункт.Сокращение УБЫВ";
	Иначе
		ТаблицаНаселенныйПункт = "";
	КонецЕсли;
	
	// Населенный пункт
	УлицаУстановлена = Не ПустаяСтрока(ОбъектАдреса.Улица);
	Если УлицаУстановлена Тогда
		ЧастиНазвания = НаименованиеИСокращение(ОбъектАдреса.Улица);
		Запрос.УстановитьПараметр("УлицаНаименование", ЧастиНазвания.Наименование);
		Запрос.УстановитьПараметр("УлицаСокращение",   ЧастиНазвания.Сокращение);
		
		ТаблицаУлица = "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК Улица
			|ПО
			|	Улица.Наименование = &УлицаНаименование
			|	И Улица.Сокращение = &УлицаСокращение
			|	И Улица.ТипАдресногоЭлемента = 5
			|	И Улица.КодАдресногоОбъектаВКоде  = Регион.КодАдресногоОбъектаВКоде 
			|	И Улица.КодРайонаВКоде            = " + ?(РайонУстановлен, "Район.КодРайонаВКоде", "0") + "
			|	И Улица.КодГородаВКоде            = " + ?(ГородУстановлен, "Город.КодГородаВКоде", "0") + "
			|	И Улица.КодНаселенногоПунктаВКоде = " + ?(НаселенныйПунктУстановлен, "НаселенныйПункт.КодНаселенногоПунктаВКоде", "0") + "
			|";
			
		СтрокаСортировки = СтрокаСортировки + ", Улица.Наименование УБЫВ, Улица.Сокращение УБЫВ";
	Иначе
		ТаблицаУлица = "";
	КонецЕсли;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	"""" КАК Индекс,
		|
		|	Регион.Наименование КАК РегионНаименование, Регион.Сокращение КАК РегионСокращение,	// Только для контроля
		|	Регион.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	Регион.Индекс                   КАК РегионИндекс
		|
		|" + ?(РайонУстановлен, "
		|		, Район.Наименование КАК РайонНаименование, Район.Сокращение КАК РайонСокращение	// Только для контроля
		|		, Район.Индекс         КАК РайонИндекс
		|		, Район.КодРайонаВКоде КАК КодРайонаВКоде
		|		, ВЫБОР КОГДА Район.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК РайонНеНайден
		|	", "
		|		, """" КАК РайонИндекс
		|		, 0    КАК КодРайонаВКоде
		|		, ЛОЖЬ КАК РайонНеНайден
		|") + "
		|" + ?(ГородУстановлен, "
		|		, Город.Наименование КАК ГородНаименование, Город.Сокращение КАК ГородСокращение	// Только для контроля
		|		, Город.Индекс         КАК ГородИндекс
		|		, Город.КодГородаВКоде КАК КодГородаВКоде
		|		, ВЫБОР КОГДА Город.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ГородНеНайден
		|	", "
		|		, """" КАК ГородИндекс
		|		, 0    КАК КодГородаВКоде
		|		, ЛОЖЬ КАК ГородНеНайден
		|") + "
		|" + ?(НаселенныйПунктУстановлен, "
		|		, НаселенныйПункт.Наименование КАК НаселенныйПунктНаименование, НаселенныйПункт.Сокращение КАК НаселенныйПунктСокращение	// Только для контроля
		|		, НаселенныйПункт.Индекс                    КАК НаселенныйПунктИндекс
		|		, НаселенныйПункт.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде
		|		, ВЫБОР КОГДА НаселенныйПункт.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НаселенныйПунктНеНайден
		|	", "
		|		, """" КАК НаселенныйПунктИндекс
		|		, 0    КАК КодНаселенногоПунктаВКоде
		|		, ЛОЖЬ КАК НаселенныйПунктНеНайден
		|") + "
		|" + ?(УлицаУстановлена, "
		|		, Улица.Наименование КАК УлицаНаименование, Улица.Сокращение КАК УлицаСокращение	// Только для контроля
		|		, Улица.Индекс        КАК УлицаИндекс
		|		, Улица.КодУлицыВКоде КАК КодУлицыВКоде
		|		, ВЫБОР КОГДА Улица.Наименование ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УлицаНеНайдена
		|	", "
		|		, """" КАК УлицаИндекс
		|		, 0    КАК КодУлицыВКоде
		|		, ЛОЖЬ КАК УлицаНеНайдена
		|") + "
		|
		|," + ?(УлицаУстановлена, "Улица.Код",
				?(НаселенныйПунктУстановлен, "НаселенныйПункт.Код",
					?(ГородУстановлен, "Город.Код",
						?(РайонУстановлен, "Район.Код",
							"Регион.Код")))) + "
		| КАК КодКлассификатора
		|
		|ИЗ	
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|" + ТаблицаРайон + "
		|" + ТаблицаГород + "
		|" + ТаблицаНаселенныйПункт + "
		|" + ТаблицаУлица + "
		|ГДЕ
		|	Регион.Наименование = &РегионНаименование
		|	И Регион.Сокращение = &РегионСокращение
		|УПОРЯДОЧИТЬ ПО
		|	Регион.Наименование УБЫВ, Регион.Сокращение УБЫВ
		|" + СтрокаСортировки + "
		|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Может вернуться больше чем одна запись, это правильно - нарушение уникальности на одном уровне подчиненности допустимо
	ЕстьЗаписи = Выборка.Следующий();
	Если Не ЕстьЗаписи Тогда
		// Нет региона, дальше не ищем
		Ошибки.Вставить("Регион", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Регион") );
		Возврат Результат;
	КонецЕсли;
	
	// Для анализа результата поиска достаточно проверить первую запись, они упорядочены по максимальному соответствию
	Если РайонУстановлен И Выборка.РайонНеНайден Тогда
		Ошибки.Вставить("Район", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Район") );
	КонецЕсли;
	
	Если ГородУстановлен И Выборка.ГородНеНайден Тогда
		Ошибки.Вставить("Город", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Город") );
	КонецЕсли;
	
	Если НаселенныйПунктУстановлен И Выборка.НаселенныйПунктНеНайден Тогда
		Ошибки.Вставить("НаселенныйПункт", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "НаселенныйПункт") );
	КонецЕсли;
	
	Если УлицаУстановлена И Выборка.УлицаНеНайдена Тогда
		Ошибки.Вставить("Улица", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Улица") );
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		// Не определили адресный объект, вариантов нет
		Возврат Результат;
	КонецЕсли;
	
	// 2. Проверяем дома по всем найденным записям. Если хоть в одной записи дом найден, то считаем адрес корректным
	
	// Сводная таблица для проверки
	СтрокаКолонокИндексов = "РегионИндекс, РайонИндекс, ГородИндекс, НаселенныйПунктИндекс, УлицаИндекс";
	СтрокаКолонокКодов    = "КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде";
	СтрокаВсеКолонки      = СтрокаКолонокИндексов + ", " + СтрокаКолонокКодов;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТипЧисло     = Новый ОписаниеТипов("Число");
	ТипСтрока    = Новый ОписаниеТипов("Строка");
	Для Каждого КлючЗначение Из Новый Структура(СтрокаКолонокКодов) Цикл
		ТаблицаКодов.Колонки.Добавить(КлючЗначение.Ключ, ТипЧисло);
	КонецЦикла;
	Для Каждого КлючЗначение Из Новый Структура(СтрокаКолонокИндексов) Цикл
		ТаблицаКодов.Колонки.Добавить(КлючЗначение.Ключ, ТипСтрока);
	КонецЦикла;
	
	Пока ЕстьЗаписи Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаКодов.Добавить(), Выборка, СтрокаВсеКолонки);
		КодКлассификатора = Выборка.КодКлассификатора;
		Если ЗначениеЗаполнено(КодКлассификатора) Тогда
			Вариант = ВариантыАдреса.Добавить();
			Вариант.Код    = КодКлассификатора;
			Вариант.Индекс = ПочтовыйИндексПоИерархии(Выборка);
		КонецЕсли;
		ЕстьЗаписи = Выборка.Следующий();
	КонецЦикла;
	
	Если ПустаяСтрока(ОбъектАдреса.НомерДома) И ПустаяСтрока(ОбъектАдреса.НомерКорпуса) Тогда
		// Не указаны для проверки, возвращаем варианты без домов
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	" + СтрокаВсеКолонки + " 
		|ПОМЕСТИТЬ
		|	ТаблицаКодов
		|ИЗ
		|	&ТаблицаКодов КАК ПараметрТаблица
		|ИНДЕКСИРОВАТЬ ПО
		|	" + СтрокаКолонокКодов + "
		|;
		|ВЫБРАТЬ 
		|	Дома.Код                           КАК КодКлассификатора,
		|	Дома.Наименование                  КАК Наименование,
		|	Дома.Индекс                        КАК Индекс,
		|	ТаблицаКодов.РегионИндекс          КАК РегионИндекс,
		|	ТаблицаКодов.РайонИндекс           КАК РайонИндекс,
		|	ТаблицаКодов.ГородИндекс           КАК ГородИндекс,
		|	ТаблицаКодов.НаселенныйПунктИндекс КАК НаселенныйПунктИндекс,
		|	ТаблицаКодов.УлицаИндекс           КАК УлицаИндекс
		|ИЗ
		|	ТаблицаКодов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Дома
		|ПО	
		|	  Дома.ТипАдресногоЭлемента      = 6
		|	И Дома.КодАдресногоОбъектаВКоде  = ТаблицаКодов.КодАдресногоОбъектаВКоде 
		|	И Дома.КодРайонаВКоде            = ТаблицаКодов.КодРайонаВКоде
		|	И Дома.КодГородаВКоде            = ТаблицаКодов.КодГородаВКоде
		|	И Дома.КодНаселенногоПунктаВКоде = ТаблицаКодов.КодНаселенногоПунктаВКоде
		|	И Дома.КодУлицыВКоде             = ТаблицаКодов.КодУлицыВКоде
		|	
		|ГДЕ
		|	НЕ Дома.ТипАдресногоЭлемента ЕСТЬ NULL
		|");
	Запрос.УстановитьПараметр("ТаблицаКодов", ТаблицаКодов);
	
	РезультатВыборки = Запрос.Выполнить();
	Если РезультатВыборки.Пустой() Тогда
		// Нет данных о домах - не считаем ошибкой, варианты остаются из старшего объекта
		Возврат Результат;
	КонецЕсли;
	
	// 2.1 Получаем все возможные описания зданий из упакованных строк
	
	ВсеВариантыЗданий = Новый ТаблицаЗначений;
	ВсеВариантыЗданий.Колонки.Добавить("КодКлассификатора", ТипЧисло);
	ВсеВариантыЗданий.Колонки.Добавить("Описание",          ТипСтрока);
	ВсеВариантыЗданий.Колонки.Добавить("Индекс",            ТипСтрока);

	ВсеВариантыЗданий.Колонки.Добавить("ЭтоДиапазон", Новый ОписаниеТипов("Булево") );
	
	Выборка = РезультатВыборки.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Индекс - ближайший по иерархии
		Индекс = ПочтовыйИндексПоИерархии(Выборка);
		
		// Идентификатор записи
		КодКлассификатора = Выборка.КодКлассификатора;
		
		// Разбиваем на детальные описания
		ВариантыОписаний = ВРег(СтрЗаменить( СокрЛП(СтрЗаменить(Выборка.Наименование, ",", Символы.ПС)), " ", ""));
		Для НомерСтроки = 1 По СтрЧислоСтрок(ВариантыОписаний) Цикл
			Описание = ВРег( СокрЛП( СтрПолучитьСтроку(ВариантыОписаний, НомерСтроки) ));
			Если Не ПустаяСтрока(Описание) Тогда
				НоваяСтрока = ВсеВариантыЗданий.Добавить();
				НоваяСтрока.КодКлассификатора = КодКлассификатора;
				НоваяСтрока.Описание          = Описание;
				НоваяСтрока.Индекс            = Индекс;
				НоваяСтрока.ЭтоДиапазон       = ЭтоДиапазон(Описание);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// 2.2 Оставляем во всех вариантах только строки, подходящие для нашего дома
	
	НомерДомаСтрокой    = ВРег(СокрЛП(СтрЗаменить(ОбъектАдреса.НомерДома, " ", "")));
	НомерКорпусаСтрокой = ВРег(СокрЛП(СтрЗаменить(ОбъектАдреса.НомерКорпуса, " ", "")));
	
	ДомУстановлен    = Не ПустаяСтрока(НомерДомаСтрокой);
	КорпусУстановлен = Не ПустаяСтрока(НомерКорпусаСтрокой);
	
	Если (Не ДомУстановлен) И (Не КорпусУстановлен) Тогда
		// Не указаны дома для проверки
		Возврат Результат;
	КонецЕсли;
	
	// Все варианты совместимости:
	//     номер дома может означать Дом, Владение, Домовладение
	//     номер корпуса - Корпус, Строение, Литер, Сооружение, Участок
	ВариантыДома    = Новый Структура("Дом, Владение, Домовладение");
	ВариантыКорпуса = Новый Структура("Корпус, Строение, Литер, Сооружение, Участок");
	
	КэшОписанияЗданий = Новый Соответствие;
	ТипыЧастейЗдания = ТипыЧастейЗдания();
	
	Позиция = ВсеВариантыЗданий.Количество() - 1;
	Пока Позиция >= 0 Цикл
		Вариант = ВсеВариантыЗданий[Позиция];
		
		Если ДомУстановлен Тогда
			
			// Проверяем все варианты дома и все варианты корпуса
			Для Каждого КлючЗначениеДом Из ВариантыДома Цикл
				ВариантПодходит = Ложь;
				
				Если КорпусУстановлен Тогда
					// Проверяем все варианты второй части
					Для Каждого КлючЗначениеКорпус Из ВариантыКорпуса Цикл
						Здание = Новый Структура;
						Здание.Вставить(КлючЗначениеДом.Ключ, НомерДомаСтрокой);
						Здание.Вставить(КлючЗначениеКорпус.Ключ, НомерКорпусаСтрокой);
						Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
							ВариантПодходит = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Проверяем только дом
					Здание = Новый Структура;
					Здание.Вставить(КлючЗначениеДом.Ключ, НомерДомаСтрокой);
					Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
						ВариантПодходит = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантПодходит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			// Проверяем только все варианты корпуса
			ВариантПодходит = Ложь;
			Для Каждого КлючЗначениеКорпус Из ВариантыКорпуса Цикл
				Здание = Новый Структура;
				Здание.Вставить(КлючЗначениеКорпус.Ключ, НомерКорпусаСтрокой);
				Если ВариантДомаКорпусаПодходит(Здание, Вариант, ТипыЧастейЗдания, КэшОписанияЗданий) Тогда
					ВариантПодходит = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		
		Если Не ВариантПодходит Тогда
			ВсеВариантыЗданий.Удалить(Вариант);
		КонецЕсли;
		
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Если ВсеВариантыЗданий.Количество() = 0 Тогда
		// Не нашли ни одного варианта для здания
		Если КорпусУстановлен Тогда
			Ошибки.Вставить("Корпус", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Корпус") );
			
		ИначеЕсли ДомУстановлен Тогда
			Ошибки.Вставить("Дом", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Дом") );
			
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// 3. Проверяем индекс
	Если ПустаяСтрока(ОбъектАдреса.Индекс) Тогда
		// Нет данных для проверки
		Возврат Результат;
	КонецЕсли;
		
	// Варианты кодов будут перезаполнены по домам
	ВариантыАдреса.Очистить();
	
	// Во всех оставшихся вариантах ищем сначала точное описание дома, затем - в диапазонах
	ВсеВариантыЗданий.Сортировать("ЭтоДиапазон, Описание");
	ИндексыСуществуют = Ложь;
	ИндексНайден      = Ложь;
	Для Каждого Вариант Из ВсеВариантыЗданий Цикл
		Если Не ПустаяСтрока(Вариант.Индекс) Тогда
			ИндексыСуществуют = Истина;
		КонецЕсли;
		
		Если ОбъектАдреса.Индекс = Вариант.Индекс Тогда
			// Нашли точное соответствие по индексу
			ИндексНайден = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Вариант.КодКлассификатора) Тогда
			ВариантРезультата = ВариантыАдреса.Добавить();
			ВариантРезультата.Индекс = Вариант.Индекс;
			ВариантРезультата.Код    = Вариант.КодКлассификатора;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексыСуществуют И (Не ИндексНайден) Тогда
		// Не нашли совпадения по индексу, диагностируем ошибку
		Ошибки.Вставить("Индекс", ТекстОшибкиПоискаВИерархииКлассификатора(ОбъектАдреса, "Индекс") );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет - загружен ли адресный элемент в базу.
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//    Уровень                   - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//    Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Функция АдресныйЭлементЗагружен(Знач НазваниеРегиона, Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Родитель = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	
	Если Уровень > 1 Тогда
		Если Регион.Код > 0 Тогда
			Родитель = Регион;
		КонецЕсли;
		Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
		
		Если Уровень > 2 Тогда
			Если Район.Код > 0 Тогда
				Родитель = Район;
			КонецЕсли;
			Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
			
			Если Уровень > 3 Тогда
				Если Город.Код > 0 Тогда
					Родитель = Город;
				КонецЕсли;
				НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
				
				Если Уровень > 4 Тогда
					Если НаселенныйПункт.Код > 0 Тогда
						Родитель = НаселенныйПункт;
					КонецЕсли;
					Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Если не указан уровень или указан 1й уровень, то проверяем существование всех уровней
	Если Уровень=1 Тогда
		Запрос.Текст = "
			|               ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=2 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=3 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=4 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=5 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=6 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 2й уровень, то проверяем существование районов в регионе
	ИначеЕсли Уровень = 2 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 2
			|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 3й уровень, то проверяем существование городов в районе
	ИначеЕсли Уровень = 3 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 3
		|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И КодРайонаВКоде           = &КодРайонаВКоде
		|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",           Район.КодРайонаВКоде);
		
	// Если указан 4й уровень, то проверяем существование населенных пунктов в городе
	ИначеЕсли Уровень = 4 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 4
			|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде           = &КодРайонаВКоде
			|	И КодГородаВКоде           = &КодГородаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",           Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",           Город.КодГородаВКоде);
		
	// Если указан 5й уровень, то проверяем существование улиц в населенном пункте
	ИначеЕсли Уровень = 5 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 5
			|	И КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде            = &КодРайонаВКоде
			|	И КодГородаВКоде            = &КодГородаВКоде
			|	И КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		
	// Если указан 6й уровень, то проверяем существование домов на улице
	ИначеЕсли Уровень = 6 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 6
			|	И КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде            = &КодРайонаВКоде
			|	И КодГородаВКоде            = &КодГородаВКоде
			|	И КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|	И КодУлицыВКоде             = &КодУлицыВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде",             Улица.КодУлицыВКоде);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// По полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//    СтрокаЭлемента     - Строка - строка элемента.
//    АдресноеСокращение - Строка - адресное сокращение.
//
// Возвращаемое значение:
//    Строка - имя и адресное сокращение.
//
Функция ИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВсеСокращения.Сокращение)               КАК КоличествоСокращений,
		|	ЕСТЬNULL(СУММА(ПоискСокращения.ФлагСокращения), 0) КАК ФлагСокращения
		|ИЗ 
		|	РегистрСведений.АдресныеСокращения КАК ВсеСокращения
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ФлагСокращения
		|	ИЗ
		|		РегистрСведений.АдресныеСокращения
		|) КАК ПоискСокращения
		|ПО 
		|	Сокращение = &Сокращение
		|");
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Результат = Запрос.Выполнить().Выгрузить()[0];
	Если Результат.КоличествоСокращений > 0 И Результат.ФлагСокращения = 0 Тогда
		// Сокращения загружены, но нужного нет
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
	Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
КонецФункции

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//
// Возвращаемое значение:
//    Структура с полями:
//         Регион          - Булево - регион загружен
//         Район           - Булево - район загружен
//         Город           - Булево - город загружен
//         НаселенныйПункт - Булево - населенный пункт загружен
//         Улица           - Булево - улица загружена
//
Функция СтруктураЗагруженныхЭлементовАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода,
	Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт

	СтруктураЗагруженных = Новый Структура("Регион, Район, Город, НаселенныйПункт, Улица, Дом",
		АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 1),
		АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 2),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, , , , 3),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, , , 4),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, , 5),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, 6));
	
	Возврат СтруктураЗагруженных;
КонецФункции

// Возвращает наименование региона по коду.
//
// Параметры:
//    КодРегиона - Число - код региона.
//
// Возвращаемое значение:
//    Строка - наименование региона.
//
Функция НаименованиеРегионаПоКоду(КодРегиона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента",     1);
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодРегиона);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение   КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НазваниеЭлемента = СокрЛП(Выборка.Наименование + " " + Выборка.Сокращение);
	Возврат НазваниеЭлемента;
	
КонецФункции

// Возвращает код региона по наименованию.
//
// Параметры:
//    Регион - Строка - наименование региона.
//
// Возвращаемое значение:
//    Число - код региона.
//
Функция КодРегионаПоНаименованию(Регион) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование
		|");
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	Запрос.УстановитьПараметр("Наименование",         Регион);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Код;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции, вызываемые из формы выбора адресного классификатора

// Возвращает структуру ограничений по переданным параметрам со значениями адресных полей.
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    НазваниеУлицы             - Строка - название улицы с сокращением
//    КодРодителя               - Число  - код родительского элемента
//    Уровень                   - Число  - текущий уровень элемента
//
// Возвращаемое значение:
//    Структура - описание ограничений со следующими полями:
//        КодАдресногоОбъектаВКоде  - Строка - код региона для ограничения
//        КодРайонаВКоде            - Строка - код района для ограничения
//        КодГородаВКоде            - Строка - код города для ограничения
//        КодНаселенногоПунктаВКоде - Строка - код населенного пункта для ограничения
//        КодУлицыВКод              - Строка - код улицы для ограничения
//        ТипАдресногоЭлемента      - Число - текущий уровень элемента
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя, Уровень) Экспорт
	
	СтруктураОграничений = Новый Структура();
	
	РодительскийЭлемент = ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(
		НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	УровеньРодителя = РодительскийЭлемент.ТипАдресногоЭлемента;
	КодРодителя     = РодительскийЭлемент.Код;
	
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", Уровень);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодАдресногоОбъектаВКоде", 1, РодительскийЭлемент.КодАдресногоОбъектаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодРайонаВКоде", 2, РодительскийЭлемент.КодРайонаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодГородаВКоде", 3, РодительскийЭлемент.КодГородаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодНаселенногоПунктаВКоде", 4, РодительскийЭлемент.КодНаселенногоПунктаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодУлицыВКоде", 5, ?(Уровень<5, 0, РодительскийЭлемент.КодУлицыВКоде));
	
	Возврат СтруктураОграничений;
КонецФункции

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона с сокращением
//    НазваниеРайона            - Строка - название района с сокращением
//    НазваниеГорода            - Строка - название города с сокращением
//    НазваниеНаселенногоПункта - Строка - название населенного пункта с сокращением
//    НазваниеУлицы             - Строка - название улицы с сокращением
//
// Возвращаемое значение:
//    Структура - описание полей по найденому адресному элементу (см. функцию "АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()")
//
Функция ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
	
	РодительскийЭлемент = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1, РодительскийЭлемент);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительскийЭлемент);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительскийЭлемент);
	Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительскийЭлемент);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительскийЭлемент);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
	
КонецФункции

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//    Регион          - Строка - строка, куда будет помещено строковое представление "родительского" региона.
//    Район           - Строка - строка, куда будет помещено строковое представление "родительского" района.
//    Город           - Строка - строка, куда будет помещено строковое представление "родительского" города.
//    НаселенныйПункт - Строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//    Улица           - Строка - строка, куда будет помещено строковое представление "родительской" улицы.
//    Дом             - Строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//    Корпус          - Строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//    Квартира        - Строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//    Уровень         - Число - уровень адресного элемента.
//
Процедура ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень) Экспорт
	
	// Очистка адресного элемента и всего, что ниже него по иерархии
	Если Уровень = 1 Тогда
		Район           = "";
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 2 Тогда
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 3 Тогда
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
		
	ИначеЕсли Уровень = 4 Тогда
		Улица    = "";
		Дом      = "";
		Корпус   = "";
		Квартира = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции

// Устарела. Следует использовать ВерсииАдресныхОбъектов.
//
Функция ПолучитьВерсииАдресныхОбъектов() Экспорт
	
	Возврат ВерсииАдресныхОбъектов();
	
КонецФункции

// Устарела. Следует использовать СтруктураАдреса.
//
Функция ПолучитьСтруктуруАдреса(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	Возврат СтруктураАдреса(КодАдресногоЭлемента, Дом, Корпус, Квартира);
	
КонецФункции

// Устарела. Следует использовать ИндексАдреса.
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, 
	Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	Возврат ИндексАдреса(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, 
		НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса);
	
КонецФункции

// Устарела. Следует использовать ИмяИАдресноеСокращение.
//
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Возврат ИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	
КонецФункции

// Устарела. Следует использовать НаименованиеРегионаПоКоду.
//
Функция ПолучитьНаименованиеРегионаПоКоду(КодРегиона) Экспорт
	
	Возврат НаименованиеРегионаПоКоду(КодРегиона);
	
КонецФункции

// Устарела. Следует использовать КодРегионаПоНаименованию.
//
Функция ПолучитьКодРегионаПоНаименованию(Регион) Экспорт
	
	Возврат КодРегионаПоНаименованию(Регион);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"АдресныйКлассификатор");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"АдресныйКлассификатор");
		
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - перечень значений, возвращенных функцией
//                               РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка обновления
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(РазрешенияБезопасностиПроверкиОбновления()));
	
КонецПроцедуры

// Базовое имя события для регистрации в журнале событий
//
// Возвращаемое значение:
//     Строка - имя
//
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru='Адресный классификатор'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() );
КонецФункции

// Набор разрешений профилей безопасности для проверки наличия обновления КЛАДР на сайте 1С
//
// Возвращаемое значение:
//     Массив - необходимые разрешения
// 
Функция РазрешенияБезопасностиПроверкиОбновления() Экспорт
	
	АдресФайлаВерсий = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		АдресныйКлассификаторКлиентСервер.ПутьКФайлуОписаниюДанныхКЛАДР()
	);
	
	Протокол = ВРег(АдресФайлаВерсий.Схема);
	Адрес    = АдресФайлаВерсий.Хост;
	Порт     = АдресФайлаВерсий.Порт;
	Описание = НСтр("ru = 'Проверка обновления адресного классификатора.'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание)
	);
	
	Возврат Разрешения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение и обновление ИБ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//    Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления 
//                                    общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "АдресныйКлассификатор.ЗагрузитьАдресныеОбъектыПервогоУровня";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "АдресныйКлассификатор.РазложитьАдресныеОбъектыПоЭлементам";
	Обработчик.ОбщиеДанные = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.5";
	Обработчик.Процедура = "АдресныйКлассификатор.ЗагрузитьАдресныеОбъектыПервогоУровня";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

// Загружает адресные объекты первого уровня по макету
//
Процедура ЗагрузитьАдресныеОбъектыПервогоУровня() Экспорт
	
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставСубъектовРФПоКлассификатору();
	
КонецПроцедуры

// Раскладывает коды адресных объектов на регион, район, город, населенный пункт, город, улицу и признак актуальности
//
Процедура РазложитьАдресныеОбъектыПоЭлементам() Экспорт
	
	// Обходим все записи регистра АдресныйКлассификатор и добавляем неактуальные адреса в массив
	МассивНеактуальныхАдресов = Новый Массив;
	Выборка = РегистрыСведений.АдресныйКлассификатор.Выбрать(,"<Нет>");
	Пока Выборка.Следующий() Цикл
		СтруктураАдреса = РазобратьАдресныйОбъектПоЭлементам(Выборка.Код, Выборка.ТипАдресногоЭлемента);
		Если СтруктураАдреса.ПризнакАктуальности <> 0 Тогда
			СтруктураАдреса.Вставить("Код", Выборка.Код);
			СтруктураАдреса.Вставить("ТипАдресногоЭлемента", Выборка.ТипАдресногоЭлемента);
			МассивНеактуальныхАдресов.Добавить(СтруктураАдреса);
		КонецЕсли;
	КонецЦикла;
	
	// Исправляем записи с неактуальными адресами	
	Для Каждого СтруктураАдреса Из МассивНеактуальныхАдресов Цикл
		// Читаем для изменения запись с неактуальным адресом
		МенеджерЗаписи = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипАдресногоЭлемента = СтруктураАдреса.ТипАдресногоЭлемента;
		МенеджерЗаписи.Код = СтруктураАдреса.Код;
		МенеджерЗаписи.Прочитать();
		// Записываем запись с исправлением неактуального адреса
		МенеджерЗаписи.ТипАдресногоЭлемента = СтруктураАдреса.ТипАдресногоЭлемента;
		МенеджерЗаписи.Код = СтруктураАдреса.Код;
		МенеджерЗаписи.КодАдресногоОбъектаВКоде = СтруктураАдреса.КодАдресногоОбъектаВКоде;
		МенеджерЗаписи.КодРайонаВКоде = СтруктураАдреса.КодРайонаВКоде;
		МенеджерЗаписи.КодГородаВКоде = СтруктураАдреса.КодГородаВКоде;
		МенеджерЗаписи.КодНаселенногоПунктаВКоде = СтруктураАдреса.КодНаселенногоПунктаВКоде;
		МенеджерЗаписи.КодУлицыВКоде = СтруктураАдреса.КодУлицыВКоде;
		МенеджерЗаписи.ПризнакАктуальности = СтруктураАдреса.ПризнакАктуальности;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок сервисных функций, используются при загрузке адресного классификатора

// Загружает адресные сокращения в регистр АдресныеСокращения.
//
// Параметры:
//    ПутьКДаннымНаСервере - Строка - путь к каталогу в котором находится файл SOCRBASE.DBF
//    Версия               - Дата   - UTC версия данных
//
// Возвращаемое значение:
//    Булево - Истина, если сведения успешно записаны, ложь если ошибка при подготовке записи сведений в регистр
//
Функция ЗагрузитьАдресныеСокращения(Знач ПутьКДаннымНаСервере, Знач Версия) Экспорт
	
	ФайлАдресныхСокращений = ПутьКДаннымНаСервере + "SOCRBASE.DBF";
	
	ТаблицаАдресныеСокращения = Новый ТаблицаЗначений;
	ТаблицаАдресныеСокращения.Колонки.Добавить("Код");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Уровень");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Наименование");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Сокращение");
	
	АдресныеСокращения = РегистрыСведений.АдресныеСокращения;
	
	НаборЗаписей = АдресныеСокращения.СоздатьНаборЗаписей();
	
	xB = Новый XBase(ФайлАдресныхСокращений);
	xB.Кодировка = КодировкаXBase.OEM;
	
	// Контроль уникальности кодов в файле классификатора
	КонтрольУникальностиКодов = Новый Соответствие;
	ЕстьОшибки = Ложь;
	Если xB.Открыта() Тогда
		Пока Не xB.ВКонце() Цикл
			КодУникальности = Число(xB.level) * 10000 + Число(xB.kod_t_st);
			Если КонтрольУникальностиКодов[КодУникальности] = НеОпределено Тогда
				КонтрольУникальностиКодов[КодУникальности] = 0;
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Код           = xB.kod_t_st;
				НоваяЗапись.Уровень       = xB.level;
				НоваяЗапись.Наименование  = xB.socrname;
				НоваяЗапись.Сокращение    = xB.scname;
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
			xB.Следующая();
			
		КонецЦикла;
		xB.ЗакрытьФайл();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СтрокаОшибки = НСтр("ru = 'В файле адресного классификатора %1 есть ошибки уникальности кодов'");
		ПараметрыВСтроке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, "socrbase.dbf");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ПараметрыВСтроке);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		УстановитьВерсиюКлассификатора("SO", Версия);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Процедура загружает из файлов КЛАДР в регистр сведений данные по адресному объекту.
//
// Параметры:
//    ПараметрыЗагрузки - Структура - параметры для загрузки.
//    АдресХранилища    - Строка    - адрес внутреннего хранилища.
//
Процедура ЗагрузкаАдресныхСведенийИзФайловКЛАДРВРегистрСведений(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ПутьКДаннымНаСервере",  ПараметрыЗагрузки.ПутьКДаннымНаСервере);
	СтруктураВозврата.Вставить("СтатусВыполнения",      Истина);
	СтруктураВозврата.Вставить("СообщениеПользователю", "");
	СтруктураВозврата.Вставить("ПутьКДанным");
	
	ДоступныеВерсии = Новый Соответствие;
	
	// Флаг загрузки специальных файлов с особыми именами
	ЗагрузкаСпециальныхФайлов = ПараметрыЗагрузки.ИсточникДанныхДляЗагрузки = 1;
	
	Если ЗагрузкаСпециальныхФайлов Тогда
		Для Каждого КлючЗначение Из ПараметрыЗагрузки.ДоступныеВерсии Цикл
			АдресныйОбъект = КлючЗначение.Ключ;
			КодСтрокой = ?(ТипЗнч(АдресныйОбъект) = Тип("Число"), Формат(АдресныйОбъект, "ЧЦ=2; ЧН=; ЧВН="), АдресныйОбъект);
			ДоступныеВерсии[КодСтрокой] = КлючЗначение.Ключ
		КонецЦикла;
	Иначе
		Для Каждого АдресныйОбъект Из ПараметрыЗагрузки.АдресныеОбъекты Цикл
			КодСтрокой = ?(ТипЗнч(АдресныйОбъект) = Тип("Число"), Формат(АдресныйОбъект, "ЧЦ=2; ЧН=; ЧВН="), АдресныйОбъект);
			ДоступныеВерсии[КодСтрокой] = ПараметрыЗагрузки.ВерсияЗагружаемогоКЛАДР;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеВерсии = Новый Соответствие;
	Для Каждого ЭлементСписка Из ВерсииАдресныхОбъектов() Цикл
		ТекущиеВерсии.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	ВерсияЗагрузкиСегодня = ТекущаяУниверсальнаяДата();
	
	// Принудительная загрузка всегда
	ДоступныеВерсии.Очистить();
	
	Попытка
		
		Для Каждого АдресныйОбъект Из ПараметрыЗагрузки.АдресныеОбъекты Цикл
			
			Если АдресныйОбъект = "AL" Или АдресныйОбъект = "SO" Тогда
				// Альтернативные названия и адресные сокращения загружаются отдельно
				Продолжить;
			КонецЕсли;
			
			// Пропускаем загрузку, если адресные сведения уже актуальны.
			ДоступнаяВерсия = ДоступныеВерсии[АдресныйОбъект];
			Если ДоступнаяВерсия = Неопределено Тогда
				// Версия не указана - используем текущую и загружаем всегда
				ДоступнаяВерсия = ВерсияЗагрузкиСегодня;
				ТекущаяВерсия   = '00000000';
			Иначе
				ТекущаяВерсия = ТекущиеВерсии[АдресныйОбъект];
				Если ТекущаяВерсия = Неопределено Тогда
					ТекущаяВерсия = '00000000';
				КонецЕсли;
			КонецЕсли;
			
			Если ДоступнаяВерсия > ТекущаяВерсия Тогда
				
				ДлительныеОперации.СообщитьПрогресс( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка региона ""%1 - %2"" (осталось %3) ...'"), 
					АдресныйОбъект, РегистрыСведений.АдресныйКлассификатор.НаименованиеРегионаПоКоду(АдресныйОбъект),
					Формат(ПараметрыЗагрузки.АдресныеОбъекты.ВГраница() - ПараметрыЗагрузки.АдресныеОбъекты.Найти(АдресныйОбъект), "ЧН=")
				));
				
				ЗагрузитьКлассификаторПоАдресномуОбъекту(АдресныйОбъект, ПараметрыЗагрузки.ПутьКДаннымНаСервере, ЗагрузкаСпециальныхФайлов, ДоступнаяВерсия);
			Иначе
				
				ДлительныеОперации.СообщитьПрогресс( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для региона ""%1 - %2"" уже загружены актуальные данные (осталось %3) ...'"), 
					АдресныйОбъект, РегистрыСведений.АдресныйКлассификатор.НаименованиеРегионаПоКоду(АдресныйОбъект),
					Формат(ПараметрыЗагрузки.АдресныеОбъекты.ВГраница() - ПараметрыЗагрузки.АдресныеОбъекты.Найти(АдресныйОбъект), "ЧН=")
				));
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сокращения
		ДоступнаяВерсия = ДоступныеВерсии["SO"];
		Если ДоступнаяВерсия <> Неопределено Тогда
			ТекущаяВерсия = ТекущиеВерсии["SO"];
			Если ТекущаяВерсия = Неопределено И ДоступнаяВерсия > ТекущаяВерсия Тогда
				ЗагрузитьАдресныеСокращения(ПараметрыЗагрузки.ПутьКДаннымНаСервере, ДоступнаяВерсия);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Информация = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(Информация) );
		
		СтруктураВозврата.СтатусВыполнения = Ложь;
		СтруктураВозврата.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при загрузке адресных сведений:
				       |%1'"),
			КраткоеПредставлениеОшибки(Информация)
		);
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями сведений по адресным объектам

// Устанавливает версию адресного объекта в регистре
//
// Параметры:
//    КодРегиона   - Строка, Число - Код адресного объекта
//    Версия       - Дата          - Версия адресного объекта
//
Процедура УстановитьВерсиюКлассификатора(Знач КодРегиона, Знач Версия = '00000000') Экспорт
	
	КодСтрокой = ?(ТипЗнч(КодРегиона) = Тип("Число"), Формат(КодРегиона, ""), КодРегиона);
	
	Набор = РегистрыСведений.ВерсииОбъектовАдресногоКлассификатора.СоздатьНаборЗаписей();
	Набор.Отбор.АдресныйОбъект.Установить(КодСтрокой);
	
	Если Версия <> '00000000' Тогда
		Данные = Набор.Добавить();
		Данные.АдресныйОбъект    = КодСтрокой;
		Данные.ДатаВыпускаВерсии = Версия;
		Данные.Наименование      = РегистрыСведений.АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодСтрокой);
	КонецЕсли;
	
	Набор.Записать(Истина);
КонецПроцедуры

// Считывает с диска файл версий адресных объектов и возвращает версии сведений по адресным объектам
//
// Параметры:
//    ТекстXML - Строка - строка, содержащая текст XML.
//
// Возвращаемое значение:
//    Соответствие - описание адресных сведений. Ключ - строка адресного объекта, значение - дата актуальности адресного объекта.
//
Функция ПолучитьВерсииАдресныхСведений(Знач ТекстXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ЧтениеXML.Прочитать();
	
	Результат = Новый Соответствие;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяАтрибута = НРег(ЧтениеXML.ИмяАтрибута(0));
			Если ИмяАтрибута = "code" Или ИмяАтрибута = "name" Тогда
				ДатаВыпуска = ПолучитьАтрибут(ЧтениеXML, "date");
				Результат.Вставить( ВРег(ЧтениеXML.ЗначениеАтрибута(0)), ДатаВыпуска);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Возврат Результат;
	
КонецФункции

// Сохраняет файл архива из двоичных данных на сервере по переданному имени в переданном каталоге, и распаковывает его.
//
// Параметры:
//    ДвоичныеДанные         - ДвоичныеДанные - данные файла
//    ИмяФайлаАрхива         - Строка         - имя файла
//    ПутьККаталогуНаСервере - Строка         - путь к каталогу, в который требуется положить распакованный файл
//
Процедура СохранитьФайлНаСервереИРаспаковать(Знач ДвоичныеДанные, ИмяФайлаАрхива, ПутьККаталогуНаСервере) Экспорт
	
	Если ПутьККаталогуНаСервере = Неопределено Тогда
		ПутьККаталогуНаСервере = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
		СоздатьКаталог(ПутьККаталогуНаСервере);
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ПутьККаталогуНаСервере + ИмяФайлаАрхива);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(ПутьККаталогуНаСервере + ИмяФайлаАрхива);
	ЧтениеZIP.ИзвлечьВсе(ПутьККаталогуНаСервере, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	УдалитьФайлы(ПутьККаталогуНаСервере, ИмяФайлаАрхива);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аутентификация на пользовательском сайте 1С

// Получает и сохраняет параметры аутентификации пользователя (логин и пароль) на пользовательском сайте 1с.
//
// Параметры:
//     СохраняемыеПараметры - Структура - сохраняемые значения, если не указано, сохранение не производится
//         * Логин  - Строка - параметр авторизации
//         * Пароль - Строка - параметр авторизации
// 
// Возвращаемое значение:
//     Структура - текущие значения:
//         * Заполнено - Булево - флаг заполненности параметров
//         * Логин     - Строка - параметр авторизации
//         * Пароль    - Строка - параметр авторизации
//
Функция ПараметрыАутентификацииНаСайте(Знач СохраняемыеПараметры = Неопределено) Экспорт
	
	Если СохраняемыеПараметры = Неопределено Тогда
		// Чтение
		Логин  = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
		Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	Иначе
		// Запись
		Логин  = СохраняемыеПараметры.Логин;
		Пароль = СохраняемыеПараметры.Пароль;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "КодПользователя", Логин);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "Пароль", Пароль);
			
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Логин",  Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("Заполнено", Не ПустаяСтрока(Логин) И Не ПустаяСтрока(Пароль) );
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Возвращает ближайший по иерархии почтовый индекс в выборке с известными полями 
//
Функция ПочтовыйИндексПоИерархии(Знач Выборка)
	
	Индекс = СокрЛП(Выборка.Индекс);
	Если ПустаяСтрока(Индекс) Тогда
		Индекс = СокрЛП(Выборка.УлицаИндекс);
		Если ПустаяСтрока(Индекс) Тогда
			Индекс = СокрЛП(Выборка.НаселенныйПунктИндекс);
			Если ПустаяСтрока(Индекс) Тогда
				Индекс = СокрЛП(Выборка.ГородИндекс);
				Если ПустаяСтрока(Индекс) Тогда
					Индекс = СокрЛП(Выборка.РайонИндекс);
					Если ПустаяСтрока(Индекс) Тогда
						Индекс = СокрЛП(Выборка.РегионИндекс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Индекс;
КонецФункции

// Функция для заполнения данных с 2-го по 6-й уровень классификации:
// 2-й - районы (улусы) республик, краев, областей, автономных областей,
//       автономных округов, входящих в состав Российской Федерации.
// 3-й   города и поселки городского типа1 регионального и районного подчинения;
//       сельсоветы (сельские округа, сельские администрации, волости и т.п.).
// 4-й   города и поселки городского типа , подчиненные администрациям городов третьего уровня;
//       сельские населенные пункты
// 5-й   улицы городов, поселков городского типа и сельских населенных пунктов.
// 6-й   дома, расположенные в городах и поселках городского типа, являющихся объектами
//       третьего уровня , в т.ч. дома, непосредственно привязанные к городам и поселкам
//       городского типа
//
// Параметры:
//    КодАдресногоОбъекта    - Строка - строковое представление номера адресного объекта
//    ПутьКДаннымНаСервере   - Строка - путь к каталогу на сервере, в котором хранятся файлы кладр. 
//                             Путь заканчивается слешем (обратным или прямым)
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//    АльтернативныеНазвания - ТаблицаЗначений
//    ТипАдресногоЭлемента   - Число - уровень адресного объекта.
//
// Возвращаемое значение:
//    Булево - Истина, если адресные сведения загружены, Ложь - Иначе.
//
Функция ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, АльтернативныеНазвания, Знач ТипАдресногоЭлемента=Неопределено)
	// Имена файлов на диске уже приведены к верхнему регистру
	
	ФайлАдресногоКлассификатора = ПутьКДаннымНаСервере +  ".DBF";
	ФайлИндексаКлассификатора   = ПутьКДаннымНаСервере +  ".CDX";
	
	// Для загрузки сразу всей группы адресных сведений нужен индекс по всему поле CODE
	НужнаИндексация = Истина;
	ФайлИндекса = Новый Файл(ФайлИндексаКлассификатора);
	Если ФайлИндекса.Существует() Тогда
		ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
		Если Не ФайлДанных.Открыта() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ФайлДанных.Индексы.Найти("IDXCODE") <> Неопределено Тогда
			НужнаИндексация = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаИндексация Тогда
		ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора);
		Если Не ФайлДанных.Открыта() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Строим индекс по коду, уникальный, дубли кодов буду пропущены
		ФайлДанных.Индексы.Добавить("IDXCODE", "CODE", Истина);
		ФайлДанных.СоздатьИндексныйФайл(ФайлИндексаКлассификатора);
		ФайлДанных.ЗакрытьФайл();
	КонецЕсли;
	
	ФайлДанных = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
	ФайлДанных.Кодировка = КодировкаXBase.OEM;
	Если Не ФайлДанных.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если мы загружаем улицы или дома, то тип адресного элемента
	Если ТипАдресногоЭлемента <> Неопределено Тогда
		ТипАдресногоЭлементаУстановлен = Истина;
	Иначе
		ТипАдресногоЭлементаУстановлен = Ложь;
	КонецЕсли;
	
	// Встаем на первую запись индекса, дубли пропускаются из за уникальности индекса
	ФайлДанных.ТекущийИндекс = ФайлДанных.Индексы.Найти("IDXCODE");
	ФайлДанных.Найти(КодАдресногоОбъекта, "=");
	
	ЕстьНеуникальныеКодыФайла = Ложь;
	
	Пока Не ФайлДанных.ВКонце() Цикл
		Код = ФайлДанных.CODE;
		
		Если Лев(Код, 2) <> КодАдресногоОбъекта Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипАдресногоЭлементаУстановлен Тогда
			ПризнакАктуальности = Сред(Код, 16, 2);
		Иначе
			ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлементаПоКоду(Код);
			ПризнакАктуальности = Сред(Код, 12, 2);
		КонецЕсли;
		
		// Если это альтернативное название, то заносим сведения в отдельную таблицу
		// альтернативных наименований (для номеров домов альтернативных наименований нет)
		Если (ТипАдресногоЭлемента <> 6)
		     И (ПризнакАктуальности <> "00")
		     И (ПризнакАктуальности <> "99")
		Тогда
			
			СтрокаАльтернативныхНазваний = АльтернативныеНазвания.Добавить();
			СтрокаАльтернативныхНазваний.Код          = Код;
			СтрокаАльтернативныхНазваний.Наименование = СокрЛП(ФайлДанных.NAME);
			СтрокаАльтернативныхНазваний.Сокращение   = СокрЛП(ФайлДанных.SOCR);
			СтрокаАльтернативныхНазваний.Индекс       = СокрЛП(ФайлДанных.INDEX);
			
		Иначе
			НоваяСтрока = АдресныеСведения.Добавить();
			НоваяСтрока.Код = Код;
			
			НоваяСтрока.ТипАдресногоЭлемента      = ТипАдресногоЭлемента;
			НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 2));
			НоваяСтрока.КодРайонаВКоде            = Число(Сред(Код, 3, 3));
			НоваяСтрока.КодГородаВКоде            = Число(Сред(Код, 6, 3));
			НоваяСтрока.КодНаселенногоПунктаВКоде = Число(Сред(Код, 9, 3));
			
			Если ТипАдресногоЭлемента <= 4 Тогда
				НоваяСтрока.КодУлицыВКоде       = 0;
				НоваяСтрока.ПризнакАктуальности = Число(Сред(Код, 12, 2));
				
			ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
				НоваяСтрока.КодУлицыВКоде       = Число(Сред(Код, 12, 4));
				НоваяСтрока.ПризнакАктуальности = Число(Сред(Код, 16, 2));
				
			Иначе
				НоваяСтрока.КодУлицыВКоде       = Число(Сред(Код, 12, 4));
				НоваяСтрока.ПризнакАктуальности = 0;
				
			КонецЕсли;
			
			НоваяСтрока.Наименование = СокрЛП(ФайлДанных.NAME);
			НоваяСтрока.Индекс       = ФайлДанных.INDEX;
			НоваяСтрока.Сокращение   = СокрЛП(ФайлДанных.SOCR);
		КонецЕсли;
		
		ФайлДанных.Следующая();
	КонецЦикла;
	
	ФайлДанных.ЗакрытьФайл();
	Возврат Истина;
КонецФункции

// Дополняет адресные сведения альтернативными названиями
//
// Параметры:
//    ПутьКДаннымНаСервере   - Строка - путь к каталогу на сервере, в котором хранятся файлы КЛАДР. 
//                                    Путь заканчивается слешем (обратным или прямым)
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//    АльтернативныеНазвания - ТаблицаЗначений
//    ЗагрузкаСВеб           - Булево
//
// Возвращаемое значение:
//    Булево - Истина, если заполнились альтернативные названия, Ложь - иначе.
///
Функция ЗаполнитьАльтернативныеНазвания(ПутьКДаннымНаСервере, АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб)
	// Имена файлов на диске уже приведены к верхнему регистру
	
	Если АльтернативныеНазвания.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	БазаОткрыта = Ложь;
	
	Для Каждого АльтернативныйОбъект Из АльтернативныеНазвания Цикл
		
		ПризнакАктуальности = Прав(АльтернативныйОбъект.Код, 2);
		
		КодАктуальногоНаименования = Лев(АльтернативныйОбъект.Код, СтрДлина(АльтернативныйОбъект.Код) - 2) + "00";
		
		Если ПризнакАктуальности = "51" Тогда
			
			Если Не БазаОткрыта Тогда
				ПутьКФайлуАН        = ПутьКДаннымНаСервере + ".DBF";
				ПутьКФайлуАНИндекс	= ПутьКДаннымНаСервере + ".CDX";
				
				ФайлИндекса = Новый Файл (ПутьКФайлуАНИндекс);
				Если ФайлИндекса.Существует() Тогда
					xB = Новый XBase(ПутьКФайлуАН, ПутьКФайлуАНИндекс, Истина);
				Иначе
					xB = Новый XBase(ПутьКФайлуАН);
					xB.Индексы.Добавить("IDXCODE", "OLDCODE", Истина);
					xB.СоздатьИндексныйФайл(ПутьКФайлуАНИндекс);
				КонецЕсли;
				
				xB.Кодировка = КодировкаXBase.OEM;
				Если Не xB.Открыта() Тогда
					Возврат Ложь;
				КонецЕсли;
				
				xB.ТекущийИндекс = xB.Индексы.Найти("IDXCODE");
				БазаОткрыта = Истина;
			КонецЕсли;
			
			// адресную информацию необходимо искать в altnames.dbf
			OLDCODE = КодАктуальногоНаименования;
			Если xB.Найти (OLDCODE, "=") Тогда 
				НовыйКод = СокрЛП(xB.NewCode);
				// пытаемся найти актуальный объект в адресных сведениях
				СтрокаТаблицы = АдресныеСведения.Найти(НовыйКод, "Код");
			Иначе
				СтрокаТаблицы = Неопределено;
			КонецЕсли;
			
			Если СтрокаТаблицы = Неопределено Тогда
				
				КодУдаленногоНП = Лев(АльтернативныйОбъект.Код, СтрДлина(АльтернативныйОбъект.Код) - 2) + "99";
				
				Код = Лев(АльтернативныйОбъект.Код, СтрДлина(АльтернативныйОбъект.Код) - 2) + "00";
				
				// Если уже имеется элемент с таким кодом, то пропускаем его
				Если АдресныеСведения.Найти(Код, "Код") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = АдресныеСведения.Добавить();
				
				ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлементаПоКоду(Код);
				
				НоваяСтрока.Код = Код;
				
				НоваяСтрока.ТипАдресногоЭлемента      = ТипАдресногоЭлемента;
				НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 2));
				НоваяСтрока.КодРайонаВКоде            = Число(Сред(Код, 3, 3));
				НоваяСтрока.КодГородаВКоде            = Число(Сред(Код, 6, 3));
				НоваяСтрока.КодНаселенногоПунктаВКоде = Число(Сред(Код, 9, 3));
				
				Если ТипАдресногоЭлемента <= 4 Тогда
					НоваяСтрока.КодУлицыВКоде             = 0;
					НоваяСтрока.ПризнакАктуальности       = Число(Сред(Код, 12, 2));
				ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
					НоваяСтрока.КодУлицыВКоде             = Число(Сред(Код, 12, 4));
					НоваяСтрока.ПризнакАктуальности       = Число(Сред(Код, 16, 2));
				Иначе
					НоваяСтрока.КодУлицыВКоде             = Число(Сред(Код, 12, 4));
					НоваяСтрока.ПризнакАктуальности       = Число(Прав(Код, 2));
				КонецЕсли;
				
				НоваяСтрока.Наименование = СокрЛП(АльтернативныйОбъект.Наименование);
				НоваяСтрока.Индекс       = СокрЛП(АльтернативныйОбъект.Индекс);
				НоваяСтрока.Сокращение   = СокрЛП(АльтернативныйОбъект.Сокращение);
				
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы = АдресныеСведения.Найти(КодАктуальногоНаименования, "Код");
			
		КонецЕсли;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Если ЗначениеЗаполнено(СокрЛП(АльтернативныйОбъект.Индекс)) Тогда 
				ИндексААО = " : " + АльтернативныйОбъект.Индекс;
			Иначе
				ИндексААО = "";
			КонецЕсли;
			
			АльтернативноеНазвание = АльтернативныйОбъект.Наименование + " " + АльтернативныйОбъект.Сокращение + ИндексААО;
			
			Если СтрокаТаблицы.АльтернативныеНазвания = Неопределено Тогда
				СтрокаТаблицы.АльтернативныеНазвания = АльтернативноеНазвание;
			Иначе
				СтрокаТаблицы.АльтернативныеНазвания = СтрокаТаблицы.АльтернативныеНазвания + ", " + АльтернативноеНазвание;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы = Неопределено;
		
	КонецЦикла;
	
	Если БазаОткрыта Тогда
		xB.ЗакрытьФайл();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция получает уровень адресного элемента (всего 6 уровней) в иерархической системе классификации по его коду
// формат кода:
// _2__3___3___3___4____4____
// |СС|РРР|ГГГ|ППП|УУУУ|ДДДД|
// 
// чем глубже уровень иерархии тем более младшие разряды являются заполненными
//
// Параметры:
//    Код - Строка - код, взятый из поля записи CODE файла данных
// 
// Возвращаемое значение:
//    Число - уровень 1-6
//
Функция ПолучитьТипАдресногоЭлементаПоКоду(Знач Код)
	
	Размерность = СтрДлина(Код);
	
	// для кодов с размерностью 13 или 17 необходимо уменьшить код
	// на 2 разряда - символы актуальности адресного объекта
	Если Размерность = 13 ИЛИ Размерность = 17 Тогда
		Размерность = Размерность - 2;
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)-2));
	ИначеЕсли Размерность = 19 Тогда
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)));
	КонецЕсли;
	
	// Проверяем заполненность разрядов ДДДД
	Если Размерность = 19 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 6;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов УУУУ
	Если Размерность = 15 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 5;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов ППП
	Остаток = КодЧисло % 1000;
	Если Остаток <> 0 Тогда
		Возврат 4;
	КонецЕсли;
	
	// Проверяем заполненность разрядов ГГГ
	Остаток = КодЧисло % 1000000;
	Если Остаток <> 0 Тогда
		Возврат 3;
	КонецЕсли;
	
	// Проверяем заполненность разрядов РРР
	Остаток = КодЧисло % 1000000000;
	Если Остаток <> 0 Тогда
		Возврат 2;
	КонецЕсли;
	
	// Верхний уровень иерархии - единица
	
	Возврат 1;
	
КонецФункции

// Читает значение атрибута по имени из указанного объекта, приводит значение к указанному примитивному типу
//
// Параметры:
//    ЧтениеXML - ЧтениеXML - объект, спозиционированный на начале элемента, атрибут которого требуется получить
//    Тип       - Тип       - тип атрибута
//    Имя       - Строка    - имя атрибута
//
// Возвращаемое значение:
//    Строка - значение атрибута полученное по имени и приведенное к указанному типу
//
Функция ПолучитьАтрибут(Знач ЧтениеXML, Знач Имя)
	
	ЗначениеСтрока = СокрЛП(ЧтениеXML.ПолучитьАтрибут(Имя));
	
	Если Имя = "date" Тогда
		Возврат Дата(Сред(ЗначениеСтрока, 7, 4) + Сред(ЗначениеСтрока, 4, 2) + Лев(ЗначениеСтрока, 2));
	ИначеЕсли Имя = "code" Тогда
		Возврат Лев(ЗначениеСтрока, 2);
	КонецЕсли;
	
КонецФункции

// По коду и типу адресного элемента получает коды его составных частей
//
// Параметры:
//    КодАдресногоЭлемента - Строка, Число - код адресного объекта
//    ТипАдресногоЭлемента - Число         - уровень адресного объекта.
//
// Возвращаемое значение:
//    Структура - описание найденного элемента:
//        * КодАдресногоОбъектаВКоде  - Число - код элемента региона
//        * КодРайонаВКоде            - Число - код элемента района
//        * КодГородаВКоде            - Число - код элемента города
//        * КодНаселенногоПунктаВКоде - Число - код элемента населенного пункта
//        * КодУлицыВКоде             - Число - код элемента улицы
//        * ПризнакАктуальности       - Число - код элемента признака актуальности
//
Функция РазобратьАдресныйОбъектПоЭлементам(КодАдресногоЭлемента, ТипАдресногоЭлемента)
	
	Если ТипЗнч(КодАдресногоЭлемента) = Тип("Число") Тогда
		КодСтрокой = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Иначе
		КодСтрокой = КодАдресногоЭлемента;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("КодАдресногоОбъектаВКоде", Число(Лев(КодСтрокой, 2)));
	
	Если ТипАдресногоЭлемента > 1 Тогда
		СтруктураАдреса.Вставить("КодРайонаВКоде", Число(Сред(КодСтрокой, 3, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодРайонаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 2 Тогда
		СтруктураАдреса.Вставить("КодГородаВКоде", Число(Сред(КодСтрокой, 6, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодГородаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 3 Тогда
		СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", Число(Сред(КодСтрокой, 9, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 4 Тогда
		СтруктураАдреса.Вставить("КодУлицыВКоде", Число(Сред(КодСтрокой, 12, 4)));
		СтруктураАдреса.Вставить("ПризнакАктуальности", Число(Сред(КодСтрокой, 16, 2)));
	Иначе
		СтруктураАдреса.Вставить("КодУлицыВКоде", 0);
		СтруктураАдреса.Вставить("ПризнакАктуальности", Число(Сред(КодСтрокой, 12, 2)));
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Раскладывает данные во временные таблицы Регионы, Районы, Города, НаселенныеПункты, Улицы/
// Получаемые таблицы соответствуют адресам,полученным из временной таблицы Адреса в менеджере временных таблиц
//
// Параметры:
//    МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, в котором уже должна быть временная таблица Адреса
//
Процедура РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодРегиона,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Регионы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодРайона,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Районы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодГорода,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Города
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодНаселенногоПункта,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	НаселенныеПункты
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодУлицы,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодУлицыВКоде КАК КодУлицыВКоде,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Улицы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|	И Адреса.КодУлицыВКоде = АдресныйКлассификатор.КодУлицыВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|");

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

// Функция ищет требуемый адресный элемент по названию и типу и возвращает первый найденный. 
// В качестве дополнения может быть задан элемент "родитель"
//
// Параметры:
//    НазваниеЭлемента - Строка    - Название адресного элемента с сокращением
//    ТипЭлемента      - Число     - Тип искомого адресного элемента (1 - регион, 2 - район и т.п.)
//    ЭлементРодитель  - Структура - Описывает родительский элемент
//
// Возвращаемое значение:
//    Структура - описание адресного элемента
//
Функция ПолучитьАдресныйЭлемент(Знач НазваниеЭлемента, ТипЭлемента, ЭлементРодитель)
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);
	
	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если ЭлементРодитель.Код > 0 Тогда // проверка на соответствие подчинению родителю
		
		Если ЭлементРодитель.ТипАдресногоЭлемента <= 5 Тогда
			
			Если ЭлементРодитель.КодАдресногоОбъектаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС
				+ " И (АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде)";
				Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", ЭлементРодитель.КодАдресногоОбъектаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодРайонаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", ЭлементРодитель.КодРайонаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодГородаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", ЭлементРодитель.КодГородаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодНаселенногоПунктаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", ЭлементРодитель.КодНаселенногоПунктаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодУлицыВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", ЭлементРодитель.КодУлицыВКоде);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = " 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование "
		+ ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	РезультирующаяСтруктура = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РезультирующаяСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат РезультирующаяСтруктура;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы со строками

// Строит запрос автоподбора для регистра
//
// Параметры:
//    Текст               - Строка    - строка запроса.
//    СтруктураПараметров - Структура - структура параметров.
//    КоличествоЭлементов - Число     - количество первых элементов.
//
// Возвращаемое значение:
//    ТаблицаЗначений - результат выполнения запроса.
//
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, КоличествоЭлементов)
	
	Объект = Метаданные.РегистрыСведений.АдресныйКлассификатор;
	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + " ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + " ИЗ РегистрСведений.АдресныйКлассификатор КАК ТаблицаРегистра ГДЕ ";
	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = " (ТаблицаРегистра.Наименование ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"") ";
	
	Запрос.Текст = Запрос.Текст + " ( " + ОграничениеПоПолю + " ) " + СтрокаОтборовПоСтруктуре;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Создает объект запрос, устанавливает у него параметр ТекстАвтоПодбора и убирает лишние символы в строке поиска.
//
// Параметры:
//    СтрокаПоиска             - Строка - строка поиска в запросе.
//    СтрокаОтборовПоСтруктуре - Строка - стирка отборов по структуре.
//    СтруктураПараметров      - Структура - структура параметров для запроса.
//    ИмяТаблицыОграничений    - Строка - имя таблицы ограничений.
//
// Возвращаемое значение:
//    Строка - текст вопроса.
//
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	СтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", (СтрокаПоиска + "%"));
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
		Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + " И " + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
КонецФункции

// Формируется строка описания адреса по переданным элементам адреса
//
// Параметры:
//    ДетализацияДоУровня - Число - детализация уровня адресного объекта.
//    Регион              - Строка - регион.
//    Район               - Строка - район.
//    Город               - Строка - город.
//    НаселенныйПункт     - Строка - населенный пункт.
//    Улица               - Строка - название улицы.
//
// Возвращаемое значение:
//    Строка - описание.
//
Функция СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня, Регион = "", Район = "", Город = "", 
	НаселенныйПункт = "", Улица = "")
	
	Описание = Улица;
	
	Если ДетализацияДоУровня <= 4 Тогда // Улица, Населенный пункт
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = НаселенныйПункт;
		ИначеЕсли ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + НаселенныйПункт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 3 Тогда // Улица, Населенный пункт, Город
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Город) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Город;
		ИначеЕсли ПустаяСтрока(Город) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Город;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 2 Тогда // Улица, Населенный пункт, Город, Район
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Район) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Район;
		ИначеЕсли ПустаяСтрока(Район) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Район;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня = 1 Тогда // Улица, Населенный пункт, Город, Район, Регион
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Регион) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Регион;
		ИначеЕсли ПустаяСтрока(Регион) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Регион;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с адресным кодом

// Функция по адресу возвращает структуру ограничений
//
// Параметры:
//    ПолеРегиона           - Строка - регион.
//    ПолеРайона            - Строка - район.
//    ПолеГорода            - Строка - город.
//    ПолеНаселенногоПункта - Строка - населенный пункт.
//    ИмяУлицы              - Строка - улица.
//    УровеньЭлемента       - Число  - уровень адресного элемента.
//
// Возвращаемое значение:
//    Структура - структура ограничений.
//
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(
			ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, 
			КодРодителя, УровеньЭлемента);
		
	Иначе
		СтруктураОграничений = Новый Структура();
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
// 
// Параметры:
//    УровеньРодителя - Число - уровень родителя.
//    ДанныеСтруктуры - Структура - структура, в которую необходимо добавить данные.
//    ИмяЭлемента     - Строка - имя элемента.
//    УровеньЭлемента - Число - уровень элемента.
//    КодЭлемента     - Число - код элемента.
//
Процедура ДобавитьКодВСтруктуру(МаксимальныйУровень, УровеньРодителя, ДанныеСтруктуры, ИмяЭлемента, УровеньЭлемента, КодЭлемента)
	
	Если КодЭлемента<>0 Или УровеньРодителя>=УровеньЭлемента Тогда
		// Однозначно надо
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
	ИначеЕсли КодЭлемента=0 И МаксимальныйУровень>УровеньЭлемента Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фоновое задание загрузки данных КЛАДР
// 

// Обработчик фоновой загрузки
//
Процедура ФоновоеЗаданиеЗагрузкиКлассификатораАдресов(Знач Параметры, Знач АдресРезультата) Экспорт
	
	КодыРегионов   = Параметры[0];	// Массив кодов регионов для загрузки
	ОписаниеФайлов = Параметры[1];	// Массив структур описаний переданных файлов
	
	// Флаг того, что файлы разбиты по регионам, для каждого региона свой набор файлов
	ОтдельныеФайлыПоРегионам = Параметры.Количество() > 2 И (Параметры[2] = "КЛАДРВебСайт"); 
	
	// Извлекаем файлы, все имена файлов - в верхнем регистре
	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(РабочийКаталог);
	
	ВерсииФайлов = Новый Соответствие;
	Для Каждого Описание Из ОписаниеФайлов Цикл
		// Имена файлов должны быть всегда в верхнем  регистре
		Файл = Новый Файл(Описание.Имя);
		ИмяФайла = РабочийКаталог + ВРег(Файл.Имя);
		
		Данные = ?(ТипЗнч(Описание.Хранение) = Тип("Строка"), ПолучитьИзВременногоХранилища(Описание.Хранение), Описание.Хранение);
		Данные.Записать(ИмяФайла);
		
		Файл = Новый Файл(ИмяФайла);
		Файл.УстановитьУниверсальноеВремяИзменения(Описание.ВремяИзменения);
		
		Если Врег(Прав(ИмяФайла, 4)) = ".ZIP" Тогда
			// Распаковываем, оригинал удалится вместе с рабочим каталогом
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяФайла);
			ЧтениеZIP.ИзвлечьВсе(РабочийКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		КонецЕсли;
		
		ВерсииФайлов.Вставить(ИмяФайла, Описание.ВремяИзменения); 
	КонецЦикла;
	
	// Определяем даты - версии и формируем массив для загрузки
	АдресныеОбъекты = Новый Массив;
	ДоступныеВерсии = Новый Соответствие;
	
	// Сокращения
	АдресныеОбъекты.Добавить("SO");
	
	ЗагружаемаяВерсияСейчас = ТекущаяУниверсальнаяДата();
	
	Если ОтдельныеФайлыПоРегионам Тогда
		
		Для Каждого КодРегиона Из КодыРегионов Цикл
			АдресныйОбъект = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
			АдресныеОбъекты.Добавить(АдресныйОбъект);
			
			ИмяФайла = РабочийКаталог + "BASE" + АдресныйОбъект + ".ZIP";
			ЗагружаемаяВерсия  = ВерсииФайлов[ИмяФайла];
			Если ЗагружаемаяВерсия  = Неопределено Тогда
				ЗагружаемаяВерсия = ЗагружаемаяВерсияСейчас;
			КонецЕсли;
			
			ДоступныеВерсии.Вставить(АдресныйОбъект, ЗагружаемаяВерсия);
		КонецЦикла;
		
	Иначе
		// По файлу KLADR.DBF
		ИмяФайла = РабочийКаталог + "KLADR.DBF";
		ЗагружаемаяВерсия  = ВерсииФайлов[ИмяФайла];
		Если ЗагружаемаяВерсия  = Неопределено Тогда
			ЗагружаемаяВерсия = ЗагружаемаяВерсияСейчас;
		КонецЕсли;
		
		Для Каждого КодРегиона Из КодыРегионов Цикл
			АдресныйОбъект = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
			АдресныеОбъекты.Добавить(АдресныйОбъект);
			
			ДоступныеВерсии.Вставить(АдресныйОбъект, ЗагружаемаяВерсия);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресныеОбъекты",           АдресныеОбъекты);
	ПараметрыЗагрузки.Вставить("ПутьКДаннымНаСервере",      РабочийКаталог);
	ПараметрыЗагрузки.Вставить("ВерсияЗагружаемогоКЛАДР",   ЗагружаемаяВерсия);
	ПараметрыЗагрузки.Вставить("ИсточникДанныхДляЗагрузки", ?(ОтдельныеФайлыПоРегионам, 1, 2));
	ПараметрыЗагрузки.Вставить("ДоступныеВерсии",           ДоступныеВерсии);
	
	// Собственно загрузка
	ЗагрузкаАдресныхСведенийИзФайловКЛАДРВРегистрСведений(ПараметрыЗагрузки, Неопределено);
	
	// И чистим за собой
	Попытка
		УдалитьФайлы(РабочийКаталог);
	Исключение
		// Обработка не требуется, файлы будут удалены позднее
	КонецПопытки;
	
	// Обновляем состав регионов
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставСубъектовРФПоКлассификатору();
КонецПроцедуры

// Обработчик фоновой очистки
//
Процедура ФоновоеЗаданиеОчисткиКлассификатораАдресов(Знач Параметры, Знач АдресРезультата) Экспорт
	
	КодыРегионов = Параметры[0];	// Массив чисел - кодов регионов для загрузки
	
	КоличествоУдаляемых = КодыРегионов.Количество();
	Позиция             = 0;
	
	Удаляемые = Новый Массив(1);
	
	Пока Позиция < КоличествоУдаляемых Цикл
		КодРегиона = КодыРегионов[Позиция];
		
		КодРегионаСтрокой = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");
		
		ДлительныеОперации.СообщитьПрогресс( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очистка региона ""%1 - %2"" (осталось %3) ...'"), 
			КодРегионаСтрокой, РегистрыСведений.АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона),
			Формат(КоличествоУдаляемых - Позиция - 1, "ЧН=")
		));
		
		// Удаление одновременно с обновлением версии
		Удаляемые[0] = КодРегионаСтрокой;
		УдалитьАдресныеСведения(Удаляемые);
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	// Обновляем состав регионов
	РегистрыСведений.АдресныйКлассификатор.ОбновитьСоставСубъектовРФПоКлассификатору();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Учет изменений КЛАДР в упаковке домов по данным ФИАС
// 

// Проверяем один вариант здания
//
Функция ВариантДомаКорпусаПодходит(Знач Здание, Знач Вариант, Знач ТипыЧастейЗдания, КэшОписанийЗданий)
	
	Если Вариант.ЭтоДиапазон Тогда 
		Если ЗданиеВходитВДиапазон(Здание, Вариант.Описание) Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если ЗданиеВходитВОписание(Здание, Вариант.Описание, Ложь, ТипыЧастейЗдания, КэшОписанийЗданий) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Формирует текст ошибки с учетом указанной иерархии. Регион установлен всегда
//
Функция ТекстОшибкиПоискаВИерархииКлассификатора(Знач АдресныйОбъект, Знач ПолеОшибки)
	ТекстОшибки = "";
	
	Если ПолеОшибки = "Регион" Тогда
		ТекстОшибки = НСтр("ru = 'Регион ""%1"" не найден в адресном классификаторе.'");
	
	ИначеЕсли ПолеОшибки = "Район" Тогда
		ТекстОшибки = НСтр("ru = 'Район ""%2"" не найден в регионе ""%1"" адресного классификатора.'") 
		
	ИначеЕсли ПолеОшибки = "Город" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		Если РайонУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Город ""%3"" не найден в районе ""%2"" региона ""%1"" адресного классификатора.'");
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Город ""%3"" не найден в регионе ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "НаселенныйПункт" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		ГородУстановлен = Не ПустаяСтрока(АдресныйОбъект.Город);
		
		Если РайонУстановлен И ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в городе ""%3"" района ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в районе ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт %4 не найден в городе ""%3"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Населенный пункт ""%4"" не найден в регионе ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "Улица" Тогда
		РайонУстановлен = Не ПустаяСтрока(АдресныйОбъект.Район);
		ГородУстановлен = Не ПустаяСтрока(АдресныйОбъект.Город);
		НаселенныйПунктУстановлен = Не ПустаяСтрока(АдресныйОбъект.НаселенныйПункт);
		
		Если РайонУстановлен И ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" города ""%3"" района ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в городе ""%3"" района ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" района ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли РайонУстановлен И Не ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в районе ""%2"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" города ""%3"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в городе ""%3"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен И НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в населенном пункте ""%4"" региона ""%1"" адресного классификатора.'");
			
		ИначеЕсли Не РайонУстановлен И Не ГородУстановлен И Не НаселенныйПунктУстановлен Тогда
			ТекстОшибки = НСтр("ru = 'Улица ""%5"" не найдена в регионе ""%1"" адресного классификатора.'");
			
		КонецЕсли;
		
	ИначеЕсли ПолеОшибки = "Дом" Тогда
		ТекстОшибки = НСтр("ru = 'Дом (владение, домовладение) ""%6"" не найден в адресном классификаторе.'");
		
	ИначеЕсли ПолеОшибки = "Корпус" Тогда
		ТекстОшибки = НСтр("ru = 'Корпус (строение, литера, сооружение, участок) ""%7"" для дома (владения, домовладения) ""%6"" не найден в адресном классификаторе.'");
		
	ИначеЕсли ПолеОшибки = "Индекс" Тогда
		ТекстОшибки = НСтр("ru = 'Индекс ""%8"" не соответствует адресу.'");
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, 
		АдресныйОбъект.Регион, АдресныйОбъект.Район, АдресныйОбъект.Город, АдресныйОбъект.НаселенныйПункт, АдресныйОбъект.Улица,
		АдресныйОбъект.НомерДома, АдресныйОбъект.НомерКорпуса, АдресныйОбъект.Индекс
	);
	
КонецФункции

// Разделяет исходный текст на наименование и сокращение.
// Сокращением считается последнее слово, отделенное пробельным символом
//
// Параметры:
//     Название - Строка - Полное название, например "Москва г"
//
// Возвращаемое значение:
//     Структура - содержит поля
//       * Наименование - Строка - Наименование, например "Москва". Если сокращение выделить не удалось, то исходное название
//       * Сокращение   - Строка - Сокращение, например "г". Если сокращение выделить не удалось, то пустая строка
//
Функция НаименованиеИСокращение(Знач Название)
	ТекстПоиска = СокрП(Название);
	
	Позиция = СтрДлина(ТекстПоиска);
	Пока Позиция > 0 Цикл
		Если ПустаяСтрока(Сред(ТекстПоиска, Позиция, 1)) Тогда
			Прервать;
		КонецЕсли;
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Результат = Новый Структура("Наименование, Сокращение");
	Если Позиция = 0 Тогда
		Результат.Наименование = ТекстПоиска;
		Результат.Сокращение   = "";
	Иначе
		Результат.Наименование = СокрП(Лев(ТекстПоиска, Позиция));
		Результат.Сокращение   = Сред(ТекстПоиска, Позиция + 1);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что переданное описание - диапазон домов
//
// Параметры:
//     Описание - Строка - рассматриваемое описание диапазона
//                         Диапазоном  упрощенно считаем или буквы "Н" и "Ч" - все нечетные и четные соответственно
//                         или строку с дефисом
//
// Возвращаемое значение:
//     Булево - Истина, если переданная строка может быть рассмотрена как диапазон домов
///
Функция ЭтоДиапазон(Знач Описание)
	Возврат Описание="Н" 
	    Или Описание="Ч"
		Или Найти(Описание, "-") > 0
КонецФункции

// Проверяет на вхождение дом в диапазон
// 
// Параметры:
//     Дом      - Структура - Описание дома, содержит поля описывающие дом и корпус
//     Описание - Строка    - Одиночное описание диапазона
//
// Возвращаемые значение:
//     Булево - признак вхождения
//
Функция ЗданиеВходитВДиапазон(Знач Здание, Знач Описание)
	
	ПозицияДефиса = Найти(Описание, "-");
	Если ПозицияДефиса = 0 И Описание <> "Н" И Описание <> "Ч" Тогда
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	// Выделяем числовую часть номера
	НомерДома = ЧисловаяЧастьНомера( ОсновнойНомерЗдания(Здание) );
	Если НомерДома = 0 Тогда
		// Нет основного номера дома
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаОписания = СтрДлина(Описание);
	ТекСимвол = Лев(Описание, 1);
	Если ТекСимвол = "Н" Тогда
		// Нечетный
		Если НомерДома % 2 = 0 Тогда
			// Четный номер не может входить в нечетный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания = 1 Тогда
			// Все нечетные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ТекСимвол = "Ч" Тогда
		// Четный
		Если НомерДома % 2 = 1 Тогда
			// Нечетный номер не может входить в четный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания = 1 Тогда
			// Все четные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ЭтоЦифра(ТекСимвол) Тогда
		// Обычный
		Позиция = 1;
		
	Иначе
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем начало
	НачДиапазона = 0;
	Пока Позиция < ПозицияДефиса Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол = "(" Тогда
			// Возможное начало диапазона
			Продолжить;
			
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
			
		КонецЕсли;
		НачДиапазона = НачДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Позиция = Позиция + 1;
	// Ищем конец
	КонДиапазона = 0;
	Пока Позиция<=ДлинаОписания Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол = ")" Тогда
			// Возможный конец диапазона
			Прервать;
			
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
			
		КонецЕсли;
		КонДиапазона = КонДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
		
	Если НачДиапазона > КонДиапазона Тогда
		// Это неправильный диапазон
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерДома >= НачДиапазона И НомерДома <= КонДиапазона;
КонецФункции

// Проверяет на соответствие дома описанию
//
// Параметры:
//     Здание             - Структура       - Описание дома, содержит реквизиты Дом, Корпус или подобные
//     Описание           - Строка          - Одиночное описание здания
//     ПолноеСоответствие - Булево          - Флаг точного поиска. Если указано Ложь, то поиск происходит только по 
//                                            заполненным полям параметра Здание, например под описание
//                                            "Дом 2 корпус 1 строение 6" подойдут "Дом 2 корпус 1" и "Дом 2"
//     ТипыЧастейЗдания   - ТаблицаЗначений - Идентификаторы сокращения зданий, результат функции "ТипыЧастейЗдания"
//                                            Если указано Неопределено, то будет вычислено.
//     КэшОписанийЗданий  - Соответствие    - кэш описаний зданий, заполняется автоматически
//
// Возвращаемые значение:
//    Булево - признак вхождения
//
Функция ЗданиеВходитВОписание(Знач Здание, Знач Описание, Знач ПолноеСоответствие = Истина, ТипыЧастейЗдания = Неопределено, КэшОписанийЗданий = Неопределено)
	
	// Разбираем в структуру
	Если КэшОписанийЗданий = Неопределено Тогда
		КэшОписанийЗданий = Новый Соответствие;
	КонецЕсли;
	
	ЧастиОписания = КэшОписанийЗданий[Описание];
	Если ЧастиОписания = Неопределено Тогда
		ЧастиОписания = СтруктураОписанияЗдания(Описание, ТипыЧастейЗдания);
		КэшОписанийЗданий[Описание] = ЧастиОписания;
	КонецЕсли;
	
	// Сравниваем по частям 
	Результат = Истина;
	
	// То, что передали, должно быть в найденном всегда
	Для Каждого КлючЗначение Из Здание Цикл
		Ключ     = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		
		Если Не ЧастиОписания.Свойство(Ключ) Тогда
			Результат = Ложь;
			Прервать;
			
		ИначеЕсли Не ПустаяСтрока(Значение) И ЧастиОписания[Ключ] <> Значение Тогда
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если Результат И ПолноеСоответствие Тогда
		// Все, что нашли, должно полностью совпадать с переданным
		Для Каждого КлючЗначение Из ЧастиОписания Цикл
			Значение = КлючЗначение.Значение;
			Ключ     = КлючЗначение.Ключ;
			Если Не ПустаяСтрока(Значение) Тогда
				Если Не Здание.Свойство(Ключ) Или Здание[Ключ] <> Значение Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Выделяем числовую часть номера дома
//
// Параметры:
//     Номер - Строка, Число - полный номер дома
//
// Возвращаемое значение:
//     Число  - Числовая частью номера. Если числовой части нет, то возвращается ноль
//
Функция ЧисловаяЧастьНомера(Знач Номер)
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Если ТипЧисло.СодержитТип(ТипЗнч(Номер)) Тогда
		Возврат Номер;
	КонецЕсли;
	
	НомерДома = 0;
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		ТекСимвол = Сред(Номер, Позиция, 1);
		Если Не ЭтоЦифра(ТекСимвол) Тогда
			Прервать;
		КонецЕсли;
		НомерДома = НомерДома * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Возврат НомерДома;
КонецФункции

// Определяет тип символа
//
// Параметры:
//     Символ - Строка - анализируемый символ
//
// Возвращаемое значение:
//     Булево - Истина, если переданный символ является цифрой
//
Функция ЭтоЦифра(Знач Символ)
	
	Возврат Найти("0123456789", Символ) > 0;
	
КонецФункции

// Вычисляет основной номер здания выбором из заполненного дом, владение, домовладение
//
// Параметры:
//     Здание - Структура - Анализируемое здание с полями:
//                 * Дом          - Строка - значение соответствующего номера
//                 * Домовладение - Строка - значение соответствующего номера
//                 * Владение     - Строка - значение соответствующего номера
//
// Возвращаемое значение
//     Строка - Основной номер здания 
//
Функция ОсновнойНомерЗдания(Знач Здание)
	Результат = "";
	
	Если Здание.Свойство("Дом") Тогда
		Результат = Здание.Дом;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) И Здание.Свойство("Владение") Тогда
		Результат = Здание.Владение;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) И Здание.Свойство("Домовладение") Тогда
		Результат = Здание.Домовладение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разбирает строковое описание отдельного здания КЛАДР
//
// Параметры:
//     Описание         - Строка          - Описание одиночного здания КЛАДР 
//     ТипыЧастейЗдания - ТаблицаЗначений - Для разбора сокращений, результат функции ТипыЧастейЗдания указано Неопределено, то будет вычислено
//
// Возвращаемое значение:
//     Структура    - Ключ - идентификатор, значение - номер здания.
//                    Набор идентификаторов определяется по данным таблицы-результата ТипыЧастейЗдания
//     Неопределено - если описание не удалось распознать.
//
Функция СтруктураОписанияЗдания(Знач Описание, ТипыЧастейЗдания = Неопределено)
	
	Текст = Описание;
	Результат = Новый Структура;
	
	// Все дополнительны части здания
	Если ТипыЧастейЗдания = Неопределено Тогда
		ТипыЧастейЗдания = ТипыЧастейЗдания();
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Результат.Вставить(ТипЧасти.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// Идентификатор по умолчанию для возможно пустого первого ключа
	Идентификатор = "Дом";
	Результат.Вставить(Идентификатор);
	
	ЕстьЕщеЧасти = Истина;
	
	Пока ЕстьЕщеЧасти Цикл
		// Тип текущей части
		Позиция = 1;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Если Лев(Текст, ТипЧасти.Длина) = ТипЧасти.Префикс Тогда
				Идентификатор = ТипЧасти.Идентификатор;
				Позиция       = 1 + ТипЧасти.Длина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст = Сред(Текст, Позиция);
		
		// Значение части
		Позиция = 0;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			// Ищем ближайший следующий тип, после которого должно быть значение
			ТестПозиции = Найти(Текст, ТипЧасти.Префикс);
			Если ТестПозиции > 0                                                // Нашли
				И (Позиция = 0 Или ТестПозиции<Позиция)                         // Ближайший
				И Не ПустаяСтрока(Сред(Текст, ТестПозиции + ТипЧасти.Длина, 1)) // Со значением
			Тогда
				Позиция = ТестПозиции;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьЕщеЧасти = Позиция > 0;
		Если ЕстьЕщеЧасти Тогда
			Значение = Лев(Текст, Позиция-1);
			Текст = Сред(Текст, Позиция);
		Иначе
			Значение = Текст;
		КонецЕсли;
		
		Результат.Вставить(Идентификатор, СтрЗаменить(Значение, "_", "-"));
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

// Формирует таблицу префиксов - разделителей данных КЛАДР, типов зданий 
// Имеет неявную логическую связь с КонтактнаяИнформацияКлиентСерверПовтИсп.ТипыОбъектовАдресацииАдресаРФ()
//
// Возвращаемое значение - ТаблицаЗначений - Возможные варианты. Содержит колонки:
//     * Префикс       - Строка - префикс-разделитель
//     * Идентификатор - Строка - идентификатор для структуры
//     * Длина         - Число  - длина префикса
//
Функция ТипыЧастейЗдания()
	
	Результат = 
		НоваяСтрокаТаблицы("ВЛД",        "Владение",
		НоваяСтрокаТаблицы("ДВЛД",       "Домовладение",
		НоваяСтрокаТаблицы("КОРПУС",     "Корпус",
		НоваяСтрокаТаблицы("К",          "Корпус",
		НоваяСтрокаТаблицы("СТР",        "Строение",
		НоваяСтрокаТаблицы("СТРОЕНИЕ",   "Строение",
		НоваяСтрокаТаблицы("ЛИТЕР",      "Литер",
		НоваяСтрокаТаблицы("СООРУЖЕНИЕ", "Сооружение",
		НоваяСтрокаТаблицы("УЧАСТОК",    "Участок",
		"Префикс, Идентификатор, Длина")))))))));
		
	Результат.Сортировать("Длина УБЫВ, Префикс");
	
	Возврат Результат;
КонецФункции

Функция НоваяСтрокаТаблицы(Знач Префикс, Знач Идентификатор, Знач Таблица)
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		// Список создаваемых колонок
		Результат = Новый ТаблицаЗначений;
		Для Каждого КлючЗначение Из Новый Структура(Таблица) Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Результат.Колонки.Добавить(ИмяКолонки);
			Результат.Индексы.Добавить(ИмяКолонки);
		КонецЦикла;
	Иначе 
		Результат = Таблица;
	КонецЕсли; 
	
	Строка = Результат.Добавить();
	Строка.Префикс       = Префикс;
	Строка.Идентификатор = Идентификатор;
	Строка.Длина         = СтрДлина(Префикс);
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСтруктуруАдресаПоВыборке(Знач Приемник, Знач Источник, Знач Префикс = "")
	МассивТипов = Новый Массив(1);
	
	Для Каждого КлючЗначение Из Приемник Цикл
		
		Имя = КлючЗначение.Ключ;
		Тип = ТипЗнч(Приемник[Имя]);
		Если Тип = Неопределено Тогда
			Приемник[Имя] = Источник[Префикс + Имя];
		Иначе
			МассивТипов[0] = Тип;
			НовыйТип = Новый ОписаниеТипов(МассивТипов);
			Приемник[Имя] = НовыйТип.ПривестиЗначение(Источник[Префикс + Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Данные для подсистемы КонтактнаяИнформация -разрыв связей подсистем
//

// Возвращает строку для поиска в операторе ПОДОБНО
Функция ЗамаскироватьСпецсимволы(Текст)
	Результат = Текст;
	Спецсимвол = "\";
	Служебные  = "%_[]^" + Спецсимвол;
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗапросДесериализацияАдресаПоПредставлениюКЛАДР(Знач ИсточникСтранМира = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	ДанныеАдреса.Позиция0     КАК Позиция0,
		|	ДанныеАдреса.Позиция      КАК Позиция,
		|	ДанныеАдреса.Значение     КАК Значение,
		|	ДанныеАдреса.Наименование КАК Наименование,
		|	ДанныеАдреса.Сокращение   КАК Сокращение,
		|	ДанныеАдреса.Начало       КАК Начало,
		|	ДанныеАдреса.Длина        КАК Длина
		|ПОМЕСТИТЬ 
		|	ДанныеАдреса
		|ИЗ
		|	&ДанныеАдреса КАК ДанныеАдреса
		|ИНДЕКСИРОВАТЬ ПО
		|	Позиция0, Позиция, Наименование, Сокращение
		|;//////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ 
		|	РаспознанныеДанные.Позиция      КАК Позиция,
		|	РаспознанныеДанные.Значение     КАК Значение,
		|	РаспознанныеДанные.Наименование КАК Наименование,
		|	РаспознанныеДанные.Сокращение   КАК Сокращение,
		|	РаспознанныеДанные.Начало       КАК Начало,
		|	РаспознанныеДанные.Длина        КАК Длина,
		|	ЛОЖЬ                            КАК Обработано,
		|
		|	РаспознанныеДанные.УровеньПоКлассификатору КАК УровеньПоКлассификатору,
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.УровеньПоКлассификатору ЕСТЬ NULL ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА 
		|	КОНЕЦ КАК НайденоПоКлассификатору,
		|
		|	РаспознанныеДанные.УровеньПоСокращениям КАК УровеньПоСокращениям,
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.УровеньПоСокращениям ЕСТЬ NULL ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА 
		|	КОНЕЦ КАК НайденоПоСокращениям,
		|
		|	ВЫБОР
		|		КОГДА НЕ РаспознанныеДанные.МинимумСтранМира ЕСТЬ NULL ТОГДА ИСТИНА
		|		КОГДА РаспознанныеДанные.Значение В (&СтраныКлассификатора) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоСтранамМира,
		|
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.Значение = &НаименованиеРоссии ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоСтранаРоссия,
		|	
		|	ВЫБОР
		|		КОГДА РаспознанныеДанные.Наименование ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9]"" ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоИндексу
		|
		|ИЗ (
		|	ВЫБРАТЬ 
		|		ДанныеАдреса.Позиция      КАК Позиция,
		|		ДанныеАдреса.Значение     КАК Значение,
		|		ДанныеАдреса.Наименование КАК Наименование,
		|		ДанныеАдреса.Сокращение   КАК Сокращение,
		|
		|		ДанныеАдреса.Начало       КАК Начало,
		|		ДанныеАдреса.Длина        КАК Длина,
		|
		|		МИНИМУМ(АдресныйКлассификатор.ТипАдресногоЭлемента) КАК УровеньПоКлассификатору,
		|		МИНИМУМ(АдресныеСокращения.Уровень)                 КАК УровеньПоСокращениям,
		|	
		|		МИНИМУМ(СтраныМира.Наименование) КАК МинимумСтранМира
		|
		|	ИЗ 
		|		ДанныеАдреса КАК ДанныеАдреса
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|	ПО
		|		АдресныйКлассификатор.Наименование = ДанныеАдреса.Наименование
		|		И АдресныйКлассификатор.Сокращение = ДанныеАдреса.Сокращение
		|		И АдресныйКлассификатор.ТипАдресногоЭлемента <= 5
		|		И АдресныйКлассификатор.ТипАдресногоЭлемента >= ДанныеАдреса.Позиция0
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
		|	ПО
		|		АдресныеСокращения.Сокращение = ДанныеАдреса.Сокращение
		|		И АдресныеСокращения.Уровень <= 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		" + ?(ИсточникСтранМира = Неопределено, "( ВЫБРАТЬ &НаименованиеРоссии КАК Наименование )", ИсточникСтранМира) + " КАК СтраныМира
		|	ПО
		|		СтраныМира.Наименование = ДанныеАдреса.Значение
		|	СГРУППИРОВАТЬ ПО 
		|		ДанныеАдреса.Позиция,
		|		ДанныеАдреса.Значение,
		|		ДанныеАдреса.Наименование,
		|		ДанныеАдреса.Сокращение,
		|		ДанныеАдреса.Начало,
		|		ДанныеАдреса.Длина
		|) КАК РаспознанныеДанные
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныеДанные.Позиция УБЫВ
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросРезультатыАвтоПодбораНаселенногоПунктаКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	ОграничениеАктуальности = ?(СкрыватьНеактуальныеАдреса, "И Адреса.ПризнакАктуальности = 0", "");
	ОграничениеСтрок        = Формат(ВыбиратьСтрок, "ЧН=; ЧГ=");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ
		|	ВсеЗагруженныеРегионы
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК ЗагруженныеРегионыВнутр
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|ИНДЕКСИРОВАТЬ ПО
		|	КодАдресногоОбъектаВКоде
		|;//////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ " + ОграничениеСтрок + " 
		|	ПодобныеАдреса.Код                    КАК Код,
		|	ПодобныеАдреса.Индекс                 КАК Индекс, 
		|	ПодобныеАдреса.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|
		|	ПодобныеАдреса.Наименование             КАК АдресаНаименование,
		|	ПодобныеАдреса.Сокращение               КАК АдресаСокращение,
		|
		|	ВЫБОР 
		|		КОГДА ЗагруженныеРегионы.КодАдресногоОбъектаВКоде ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МожноЗагружатьРегион,
		|	
		|	ВЫБОР 
		|		КОГДА ПодобныеАдреса.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	НаселенныеПункты.Сокращение     КАК НаселенныеПунктыСокращение,
		|	НаселенныеПункты.Наименование   КАК НаселенныеПунктыНаименование,
		|	
		|	Города.Сокращение               КАК ГородаСокращение,
		|	Города.Наименование             КАК ГородаНаименование,
		|
		|	Районы.Сокращение               КАК РайоныСокращение,
		|	Районы.Наименование             КАК РайоныНаименование,
		|	
		|	Регионы.Сокращение              КАК РегионыСокращение,
		|	Регионы.Наименование            КАК РегионыНаименование
		|	
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК ПодобныеАдреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = ПодобныеАдреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = ПодобныеАдреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = ПодобныеАдреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = ПодобныеАдреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = ПодобныеАдреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = ПодобныеАдреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = ПодобныеАдреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = ПодобныеАдреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = ПодобныеАдреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = ПодобныеАдреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	ВсеЗагруженныеРегионы КАК ЗагруженныеРегионы
		|ПО
		|	ЗагруженныеРегионы.КодАдресногоОбъектаВКоде  = ПодобныеАдреса.КодАдресногоОбъектаВКоде
		|	
		|ГДЕ
		|	ПодобныеАдреса.ТипАдресногоЭлемента <= 4
		|	И ПодобныеАдреса.Наименование ПОДОБНО &НачалоТекста СПЕЦСИМВОЛ ""\""
		|	" + ОграничениеАктуальности + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодобныеАдреса.Наименование,
		|	ПодобныеАдреса.ТипАдресногоЭлемента,
		|
		|	Регионы.Наименование,
		|	Регионы.Сокращение,
		|
		|	Районы.Наименование,
		|	Районы.Сокращение,
		|	
		|	Города.Наименование,
		|	Города.Сокращение,
		|	
		|	НаселенныеПункты.Наименование,
		|	НаселенныеПункты.Сокращение
		|
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросРезультатыАвтоПодбораУлицыКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Улицы.Индекс                 КАК Индекс,
		|	Улицы.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|
		|	Улицы.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Улицы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Улицы.Наименование КАК Наименование,
		|	Улицы.Сокращение   КАК Сокращение
		|	
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО
		|	Улицы.ТипАдресногоЭлемента = 5
		|	И Улицы.КодАдресногоОбъектаВКоде  = НаселенныйПункт.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = НаселенныйПункт.КодРайонаВКоде 
		|	И Улицы.КодГородаВКоде            = НаселенныйПункт.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
		|   " + ?(СкрыватьНеактуальныеАдреса, "И Улицы.ПризнакАктуальности = 0","") + "
		|
		|ГДЕ
		|	НаселенныйПункт.Код = &Код
		|	И (
		|		Улицы.Наименование ПОДОБНО &НачалоСтроки СПЕЦСИМВОЛ ""\""
		|		ИЛИ 
		|		Улицы.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\""
		|	)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Неактуален,
		|	ЕСТЬNULL(Улицы.Наименование, """") + ЕСТЬNULL(Улицы.Сокращение, """")
		|");
		
	Возврат Запрос;
КонецФункции

// Парсинг из строки текста
Функция ЗапросНаселенныеПунктыПоПредставлениюКЛАДР(Знач ЧастиАдреса, Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	ДополнительныхСтрокПоиска = ЧастиАдреса.ВГраница();
	
	Запрос = Новый Запрос;
	ОграничительСверху = "яяяяя";
	
	Наименование = ЧастиАдреса[0].Наименование;
	Сокращение   = ЧастиАдреса[0].Сокращение;
	Если ДополнительныхСтрокПоиска = 0 И ПустаяСтрока(Сокращение) Тогда
		УсловиеНаименования = "(Адреса.Наименование >= &НаименованиеПоиска0 И Адреса.Наименование < &ОграничительПоиска0)";
	Иначе
		УсловиеНаименования = "(Адреса.Наименование = &НаименованиеПоиска0 И Адреса.Сокращение = &СокращениеПоиска0)";
	КонецЕсли;
	Запрос.УстановитьПараметр("НаименованиеПоиска0", Наименование);
	Запрос.УстановитьПараметр("ОграничительПоиска0", Наименование + ОграничительСверху);
	Запрос.УстановитьПараметр("СокращениеПоиска0",   Сокращение);
	
	Для Позиция = 1 По ДополнительныхСтрокПоиска Цикл
		НомерПозиции = Формат(Позиция, "ЧН=; ЧГ=");
		ИмяПараметраНаименование = "НаименованиеПоиска" + НомерПозиции;
		ИмяПараметраСокращение   = "СокращениеПоиска"   + НомерПозиции;
		ИмяПараметраОграничитель = "ОграничительПоиска" + НомерПозиции;
		
		Наименование = ЧастиАдреса[Позиция].Наименование;
		Сокращение   = ЧастиАдреса[Позиция].Сокращение;
		Если ПустаяСтрока(Сокращение) Тогда
			УсловиеНаименования = УсловиеНаименования + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|И (
				|	    (НаселенныеПункты.Наименование >= &%1 И НаселенныеПункты.Наименование < &%2)
				|	ИЛИ (Города.Наименование  >= &%1 И Города.Наименование < &%2)
				|	ИЛИ (Районы.Наименование  >= &%1 И Районы.Наименование < &%2)
				|	ИЛИ (Регионы.Наименование >= &%1 И Регионы.Наименование < &%2)
				|)",
				ИмяПараметраНаименование, ИмяПараметраОграничитель);
		Иначе
			УсловиеНаименования = УсловиеНаименования + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|И (
				|	    (НаселенныеПункты.Наименование = &%1 И НаселенныеПункты.Сокращение = &%2)
				|	ИЛИ (Города.Наименование  = &%1 И Города.Сокращение = &%2)
				|	ИЛИ (Районы.Наименование  = &%1 И Районы.Сокращение = &%2)
				|	ИЛИ (Регионы.Наименование = &%1 И Регионы.Сокращение = &%2)
				|)",
				ИмяПараметраНаименование, ИмяПараметраСокращение);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметраНаименование, Наименование);
		Запрос.УстановитьПараметр(ИмяПараметраОграничитель, Наименование + ОграничительСверху);
		Запрос.УстановитьПараметр(ИмяПараметраСокращение,   Сокращение);
	КонецЦикла;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Адреса.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Адреса.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Регионы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Районы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Города.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА НаселенныеПункты.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Регионы.Код          КАК РегионыКод,
		|	Регионы.Сокращение   КАК РегионыСокращение,
		|	Регионы.Наименование КАК РегионыНаименование,
		|
		|	Районы.Код          КАК РайоныКод,
		|	Районы.Сокращение   КАК РайоныСокращение,
		|	Районы.Наименование КАК РайоныНаименование,
		|
		|	Города.Код          КАК ГородаКод,
		|	Города.Сокращение   КАК ГородаСокращение,
		|	Города.Наименование КАК ГородаНаименование,
		|
		|	НаселенныеПункты.Код          КАК НаселенныеПунктыКод,
		|	НаселенныеПункты.Сокращение   КАК НаселенныеПунктыСокращение,
		|	НаселенныеПункты.Наименование КАК НаселенныеПунктыНаименование
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Регионы.ПризнакАктуальности = 0","") + "
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Районы.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Города.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО	
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И НаселенныеПункты.ПризнакАктуальности = 0","") + "
		|
		|ГДЕ
		|	Адреса.ТипАдресногоЭлемента <= 4
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Адреса.ПризнакАктуальности = 0","") + "
		|	И (" + УсловиеНаименования + ")
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Адреса.ПризнакАктуальности,  // Актуальные - вперед
		|
		|	  ЕСТЬNULL(Адреса.Наименование, """")           + ЕСТЬNULL(Адреса.Сокращение, """")
		|	+ ЕСТЬNULL(НаселенныеПункты.Наименование, """") + ЕСТЬNULL(НаселенныеПункты.Сокращение, """")
		|	+ ЕСТЬNULL(Города.Наименование, """")           + ЕСТЬNULL(Города.Сокращение, """")
		|	+ ЕСТЬNULL(Районы.Наименование, """")           + ЕСТЬNULL(Районы.Сокращение, """")
		|	+ ЕСТЬNULL(Регионы.Наименование, """")          + ЕСТЬNULL(Регионы.Сокращение, """")
		|";

	Возврат Запрос;
КонецФункции

// Парсинг из строки текста
Функция ЗапросУлицыПоПредставлениюКЛАДР(Знач ЧастиАдреса, Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	НаименованиеПоиска = ЧастиАдреса[0].Наименование;
	СокращениеПоиска   = ЧастиАдреса[0].Сокращение;
	Если ПустаяСтрока(СокращениеПоиска) Тогда
		УсловиеНаименования = "Улицы.Наименование ПОДОБНО &НачалоСтроки СПЕЦСИМВОЛ ""\"" ИЛИ  Улицы.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\"" ";
	Иначе
		УсловиеНаименования = "Улицы.Наименование = &НаименованиеПоиска И Улицы.Сокращение = &СокращениеПоиска"
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Улицы.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Улицы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Улицы.Наименование КАК Наименование,
		|	Улицы.Сокращение   КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО
		|	Улицы.ТипАдресногоЭлемента = 5
		|	И Улицы.КодАдресногоОбъектаВКоде  = НаселенныйПункт.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = НаселенныйПункт.КодРайонаВКоде
		|	И Улицы.КодГородаВКоде            = НаселенныйПункт.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
		|
		|ГДЕ
		|	НаселенныйПункт.Код = &КодНаселенногоПункта
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Улицы.ПризнакАктуальности = 0","") + "
		|	И (" + УсловиеНаименования + ")
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Улицы.ПризнакАктуальности,
		|
		|	ЕСТЬNULL(Улицы.Наименование, """") + ЕСТЬNULL(Улицы.Сокращение, """")
		|");
		
	// Частично известные параметры
	Запрос.УстановитьПараметр("НаименованиеПоиска", НаименованиеПоиска);
	Запрос.УстановитьПараметр("СокращениеПоиска",   СокращениеПоиска);
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокРеквизитовНаселенныйПунктКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НаселенныеПункты.Код          КАК НаселенныеПунктыКод,
		|	НаселенныеПункты.Наименование КАК НаселенныеПунктыНаименование,
		|	НаселенныеПункты.Сокращение   КАК НаселенныеПунктыСокращение,
		|	Города.Код                    КАК ГородаКод,
		|	Города.Наименование           КАК ГородаНаименование,
		|	Города.Сокращение             КАК ГородаСокращение,
		|	Районы.Код                    КАК РайоныКод,
		|	Районы.Наименование           КАК РайоныНаименование,
		|	Районы.Сокращение             КАК РайоныСокращение,
		|	Регионы.Код                   КАК РегионыКод,
		|	Регионы.Наименование          КАК РегионыНаименование,
		|	Регионы.Сокращение            КАК РегионыСокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|
		|ГДЕ
		|	Адреса.Код = &Код
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокРеквизитовУлицаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Улицы.Код          КАК УлицыКод,
		|	Улицы.Наименование КАК УлицыНаименование,
		|	Улицы.Сокращение   КАК УлицыСокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ГДЕ
		|	Улицы.Код = &Код
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокАнализаЭлементаАдресаКЛАДР(Знач ЧастиАдреса, Знач Уровень, Знач Наименование, Знач Сокращение, Знач ПоискПоПодобию, Знач ВыбиратьСтрок) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|
		|	Адреса.Код                    КАК Код,
		|	Адреса.Индекс                 КАК Индекс,
		|	Адреса.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|	Адреса.ПризнакАктуальности    КАК ПризнакАктуальности,
		|	Адреса.Наименование           КАК АдресаНаименование,
		|	Адреса.Сокращение             КАК АдресаСокращение,
		|
		|	ВЫБОР 
		|		КОГДА Адреса.ПризнакАктуальности > 0 ТОГДА ИСТИНА 
		|		ИНАЧЕ ЛОЖЬ 
		|	КОНЕЦ КАК Неактуален,
		|
		|	" + ?(Уровень = 1, "
		|	ВЫБОР КОГДА РегионЗагружен.Код ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
		|	", "
		|	ЛОЖЬ
		|	") + " КАК МожноЗагружатьРегион
		|
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|");
	
	// Добавляем информацию о загруженности региона
	Если Уровень = 1 Тогда
		Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК РегионЗагружен
			|ПО
			|	РегионЗагружен.КодАдресногоОбъектаВКоде = Адреса.КодАдресногоОбъектаВКоде
			|	И РегионЗагружен.ТипАдресногоЭлемента = 1
			|	И 1 В (
			|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
			|   )
			|";
	КонецЕсли;
	Если Уровень > 1 Тогда
		// Район, опираемся на регион
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Регионы
			|ПО
			|	Регионы.ТипАдресногоЭлемента = 1
			|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Регионы.КодРайонаВКоде            = 0
			|	И Регионы.КодГородаВКоде            = 0
			|	И Регионы.КодНаселенногоПунктаВКоде = 0
			|	И Регионы.КодУлицыВКоде             = 0
			|	И Регионы.Наименование = &Регион
			|	И Регионы.Сокращение   = &РегионСокращение
			|";
		Запрос.УстановитьПараметр("Регион",           ЧастиАдреса.Регион.Наименование);
		Запрос.УстановитьПараметр("РегионСокращение", ЧастиАдреса.Регион.Сокращение);
		
		Если ЧастиАдреса.Регион.Свойство("КодКлассификатора") И Не ПустаяСтрока(ЧастиАдреса.Регион.КодКлассификатора) Тогда
			Запрос.УстановитьПараметр("РегионКодКлассификатора", ЧастиАдреса.Регион.КодКлассификатора);
			Запрос.Текст = Запрос.Текст + "И Регионы.Код = &РегионКодКлассификатора
				|";
		КонецЕсли;
			
	КонецЕсли;
	Если Уровень > 2 И (Не ПустаяСтрока(ЧастиАдреса.Район.Наименование)) Тогда
		// Город, опираемся на район + регион, район возможно пуст
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Районы
			|ПО
			|	Районы.ТипАдресногоЭлемента = 2
			|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И Районы.КодГородаВКоде            = 0
			|	И Районы.КодНаселенногоПунктаВКоде = 0
			|	И Районы.КодУлицыВКоде             = 0
			|	И Районы.Наименование = &Район
			|	И Районы.Сокращение   = &РайонСокращение
			|";
		Запрос.УстановитьПараметр("Район",            ЧастиАдреса.Район.Наименование);
		Запрос.УстановитьПараметр("РайонСокращение",  ЧастиАдреса.Район.Сокращение);
		
		Если ЧастиАдреса.Район.Свойство("КодКлассификатора") И Не ПустаяСтрока(ЧастиАдреса.Район.КодКлассификатора) Тогда
			Запрос.УстановитьПараметр("РайонКодКлассификатора", ЧастиАдреса.Район.КодКлассификатора);
			Запрос.Текст = Запрос.Текст + "И Районы.Код = &РайонКодКлассификатора
				|";
		КонецЕсли;
		
	КонецЕсли;
	Если Уровень > 3 И (Не ПустаяСтрока(ЧастиАдреса.Город.Наименование)) Тогда
		// Населенный пункт, опираемся на регион + район + город, район возможно пуст, город возможно пуст
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Города
			|ПО
			|	Города.ТипАдресногоЭлемента = 3
			|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
			|	И Города.КодНаселенногоПунктаВКоде = 0
			|	И Города.КодУлицыВКоде            = 0
			|	И Города.Наименование = &Город
			|	И Города.Сокращение   = &ГородСокращение
			|";
		Запрос.УстановитьПараметр("Город",           ЧастиАдреса.Город.Наименование);
		Запрос.УстановитьПараметр("ГородСокращение", ЧастиАдреса.Город.Сокращение);
		
		Если ЧастиАдреса.Город.Свойство("КодКлассификатора") И Не ПустаяСтрока(ЧастиАдреса.Город.КодКлассификатора) Тогда
			Запрос.УстановитьПараметр("ГородКодКлассификатора", ЧастиАдреса.Город.КодКлассификатора);
			Запрос.Текст = Запрос.Текст + "И Города.Код = &ГородКодКлассификатора
				|";
		КонецЕсли;
		
	КонецЕсли;
	Если Уровень > 4 И (Не ПустаяСтрока(ЧастиАдреса.НаселенныйПункт.Наименование)) Тогда
		// Улица, опираемся на регион + район + город + населенный пункт, возможно пустые
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
			|ПО
			|	НаселенныеПункты.ТипАдресногоЭлемента = 4
			|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
			|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
			|	И НаселенныеПункты.КодУлицыВКоде             = 0
			|
			|	И НаселенныеПункты.Наименование = &НаселенныйПункт
			|	И НаселенныеПункты.Сокращение   = &НаселенныйПунктСокращение
			|";
		Запрос.УстановитьПараметр("НаселенныйПункт",           ЧастиАдреса.НаселенныйПункт.Наименование);
		Запрос.УстановитьПараметр("НаселенныйПунктСокращение", ЧастиАдреса.НаселенныйПункт.Сокращение);
		
		Если ЧастиАдреса.НаселенныйПункт.Свойство("КодКлассификатора") И Не ПустаяСтрока(ЧастиАдреса.НаселенныйПункт.КодКлассификатора) Тогда
			Запрос.УстановитьПараметр("НаселенныйПунктКодКлассификатора", ЧастиАдреса.НаселенныйПункт.КодКлассификатора);
			Запрос.Текст = Запрос.Текст + "И НаселенныеПункты.Код = &НаселенныйПунктКодКлассификатора
				|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Сокращение) Тогда
		УсловиеСокращения = "";
	Иначе
		Если ПоискПоПодобию Тогда
			УсловиеСокращения = "И Адреса.Сокращение ПОДОБНО &Сокращение СПЕЦСИМВОЛ ""\"" ";
			Запрос.УстановитьПараметр("Сокращение", ЗамаскироватьСпецсимволы(Сокращение) + "%");
		Иначе
			УсловиеСокращения = "И Адреса.Сокращение = &Сокращение";
			Запрос.УстановитьПараметр("Сокращение", Сокращение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоПодобию Тогда
		УсловиеНаименования = "И Адреса.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""\"" ";
		Запрос.УстановитьПараметр("Наименование", ЗамаскироватьСпецсимволы(Наименование) + "%");
	Иначе
		УсловиеНаименования = "И Адреса.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Наименование);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Адреса.ТипАдресногоЭлемента = &Уровень
		|	" + УсловиеНаименования + "
		|	" + УсловиеСокращения + "
		|УПОРЯДОЧИТЬ ПО 
		|	Адреса.ПризнакАктуальности,
		|
		|	Адреса.Наименование
		|";
		
	Возврат Запрос;
КонецФункции

Функция ЗапросАдресаПоИндексуКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальные) Экспорт
	ФрагментПервые = ?(ВыбиратьСтрок > 0, "ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ="), "");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ " + ФрагментПервые + "
		|
		|	ВЫБОР 
		|		КОГДА ПочтовыеИндексы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	ПочтовыеИндексы.Индекс КАК Индекс,
		|	ПочтовыеИндексы.Код    КАК Код,
		|	
		|	// Остальные колонки - вспомогательные, будут удалены из результата
		|	Улицы.Наименование КАК УлицаНаименование,
		|	Улицы.Сокращение   КАК УлицаСокращение,
		|	Улицы.Наименование + "" "" + Улицы.Сокращение КАК ПредставлениеУлица,
		|
		|	НаселенныеПункты.Наименование КАК НаселенныйПунктНаименование,
		|	НаселенныеПункты.Сокращение   КАК НаселенныйПунктСокращение,
		|	НаселенныеПункты.Наименование + "" "" + НаселенныеПункты.Сокращение КАК ПредставлениеНаселенныйПункт,
		|	
		|	Города.Наименование КАК ГородНаименование,
		|	Города.Сокращение   КАК ГородСокращение,
		|	Города.Наименование + "" "" + Города.Сокращение КАК ПредставлениеГород,
		|	
		|	Районы.Наименование КАК РайонНаименование,
		|	Районы.Сокращение   КАК РайонСокращение,
		|	Районы.Наименование + "" "" + Районы.Сокращение КАК ПредставлениеРайон,
		|	
		|	Регионы.Наименование КАК РегионНаименование,
		|	Регионы.Сокращение   КАК РегионСокращение,
		|	Регионы.Наименование + "" "" + Регионы.Сокращение КАК ПредставлениеРегион
		|	
		|ПОМЕСТИТЬ 
		|	АдресаПоПочтовымИндексам
		|
		|ИЗ	
		|	РегистрСведений.АдресныйКлассификатор КАК ПочтовыеИндексы
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО	
		|	Улицы.ТипАдресногоЭлемента = 5
		|	" + ?(СкрыватьНеактуальные, "И Улицы.ПризнакАктуальности = 0","") + "
		|	И Улицы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Улицы.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = ПочтовыеИндексы.КодНаселенногоПунктаВКоде
		|	И Улицы.КодУлицыВКоде             = ПочтовыеИндексы.КодУлицыВКоде
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО	
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	" + ?(СкрыватьНеактуальные, "И НаселенныеПункты.ПризнакАктуальности = 0","") + "
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И НаселенныеПункты.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = ПочтовыеИндексы.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО	
		|	Города.ТипАдресногоЭлемента = 3
		|	" + ?(СкрыватьНеактуальные, "И Города.ПризнакАктуальности = 0","") + "
		|	И Города.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Города.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО	
		|	Районы.ТипАдресногоЭлемента = 2
		|	" + ?(СкрыватьНеактуальные, "И Районы.ПризнакАктуальности = 0","") + "
		|	И Районы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО	
		|	Регионы.ТипАдресногоЭлемента = 1
		|	" + ?(СкрыватьНеактуальные, "И Регионы.ПризнакАктуальности = 0","") + "
		|	И Регионы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	
		|ГДЕ
		|	ПочтовыеИндексы.Индекс = &ПочтовыйИндекс
		|	" + ?(СкрыватьНеактуальные, "И ПочтовыеИндексы.ПризнакАктуальности = 0","") + "
		|
		|" + ?(ПустаяСтрока(ФрагментПервые), "", "
		|УПОРЯДОЧИТЬ ПО
		|	Индекс, 
		|	УлицаНаименование, УлицаСокращение,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение,
		|	ГородНаименование, ГородСокращение,
		|	РайонНаименование, РайонСокращение,
		|	РегионНаименование, РегионСокращение
		|") + "
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|
		|// Основной результат
		|ВЫБРАТЬ 
		|	Неактуален, Индекс, Код,
		|	УлицаНаименование, УлицаСокращение, ПредставлениеУлица,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение, ПредставлениеНаселенныйПункт,
		|	ГородНаименование, ГородСокращение, ПредставлениеГород,
		|	РайонНаименование, РайонСокращение, ПредставлениеРайон,
		|	РегионНаименование, РегионСокращение, ПредставлениеРегион
		|ИЗ 
		|	АдресаПоПочтовымИндексам
		|УПОРЯДОЧИТЬ ПО
		|	Индекс, 
		|	УлицаНаименование, УлицаСокращение,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение,
		|	ГородНаименование, ГородСокращение,
		|	РайонНаименование, РайонСокращение,
		|	РегионНаименование, РегионСокращение
		|;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|
		|// Вспомогательный результат
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА КоличествоУлица = 1 ТОГДА МинимумНаименованиеУлица ИНАЧЕ """" КОНЕЦ КАК УлицаНаименование,
		|	ВЫБОР КОГДА КоличествоУлица = 1 ТОГДА МинимумСокращениеУлица   ИНАЧЕ """" КОНЕЦ КАК УлицаСокращение,
		|
		|	ВЫБОР КОГДА КоличествоНаселенныйПункт = 1 ТОГДА МинимумНаименованиеНаселенныйПункт ИНАЧЕ """" КОНЕЦ КАК НаселенныйПунктНаименование,
		|	ВЫБОР КОГДА КоличествоНаселенныйПункт = 1 ТОГДА МинимумСокращениеНаселенныйПункт   ИНАЧЕ """" КОНЕЦ КАК НаселенныйПунктСокращение,
		|
		|	ВЫБОР КОГДА КоличествоГород = 1 ТОГДА МинимумНаименованиеГород ИНАЧЕ """" КОНЕЦ КАК ГородНаименование,
		|	ВЫБОР КОГДА КоличествоГород = 1 ТОГДА МинимумСокращениеГород   ИНАЧЕ """" КОНЕЦ КАК ГородСокращение,
		|
		|	ВЫБОР КОГДА КоличествоРайон = 1 ТОГДА МинимумНаименованиеРайон ИНАЧЕ """" КОНЕЦ КАК РайонНаименование,
		|	ВЫБОР КОГДА КоличествоРайон = 1 ТОГДА МинимумСокращениеРайон   ИНАЧЕ """" КОНЕЦ КАК РайонСокращение,
		|
		|	ВЫБОР КОГДА КоличествоРегион = 1 ТОГДА МинимумНаименованиеРегион ИНАЧЕ """" КОНЕЦ КАК РегионНаименование,
		|	ВЫБОР КОГДА КоличествоРегион = 1 ТОГДА МинимумСокращениеРегион   ИНАЧЕ """" КОНЕЦ КАК РегионСокращение
		|
		|ИЗ (
		|	ВЫБРАТЬ 
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеУлица, """")) КАК КоличествоУлица,
		|		МИНИМУМ(УлицаНаименование)                               КАК МинимумНаименованиеУлица,
		|		МИНИМУМ(УлицаСокращение)                                 КАК МинимумСокращениеУлица,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеНаселенныйПункт, """")) КАК КоличествоНаселенныйПункт,
		|		МИНИМУМ(НаселенныйПунктНаименование)                               КАК МинимумНаименованиеНаселенныйПункт,
		|		МИНИМУМ(НаселенныйПунктСокращение)                                 КАК МинимумСокращениеНаселенныйПункт,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеГород, """")) КАК КоличествоГород,
		|		МИНИМУМ(ГородНаименование)                               КАК МинимумНаименованиеГород,
		|		МИНИМУМ(ГородСокращение)                                 КАК МинимумСокращениеГород,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеРайон, """")) КАК КоличествоРайон,
		|		МИНИМУМ(РайонНаименование)                               КАК МинимумНаименованиеРайон,
		|		МИНИМУМ(РайонСокращение)                                 КАК МинимумСокращениеРайон,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеРегион, """")) КАК КоличествоРегион,
		|		МИНИМУМ(РегионНаименование)                               КАК МинимумНаименованиеРегион,
		|		МИНИМУМ(РегионСокращение)                                 КАК МинимумСокращениеРегион
		|	ИЗ
		|		АдресаПоПочтовымИндексам
		|) Подзапрос
		|");
	
	Возврат Запрос;
КонецФункции

Функция ЗапросКодРегионаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КодАдресногоОбъектаВКоде КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|
		|	И Наименование = &Наименование
		|	И Сокращение   = &Сокращение
		|");

	Возврат Запрос;
КонецФункции

Функция ЗапросРегионКодаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Наименование + "" "" + Сокращение КАК Регион
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодАдресногоОбъектаВКоде  = &Код
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросВсеРегионыКЛАДР() Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	КодАдресногоОбъектаВКоде          КАК Код,
		|	Наименование                      КАК Наименование,
		|	Сокращение                        КАК Сокращение,
		|	Наименование + "" "" + Сокращение КАК Представление
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|");
	
	Возврат Запрос;
КонецФункции

#КонецОбласти
