#Область ПрограммныйИнтерфейс

// Возвращает структуру с границами рабочего дня по заданным календарям.
// Если пользовательский вариант заполнения не обработан, тогда 0 - 24
//
// Параметры:
//	Пользователь - Тип: СправочникСсылка.Пользователи
//	Календари - Тип: Массив[СправочникСсылка.КалендариПланировщика]
//
// Возвращаемое значение:
//	Структура
//		Начало - Тип: Число (0-24)
//		Конец - Тип: Число (0-24)
//
Процедура УстановитьРабочееВремя(Форма, НачалоРабочегоВремени = 0, ОкончаниеРабочегоВремени = 24) Экспорт
	
	Пользователь	= Форма.Объект.ТекущийПользователь;
	Календари		= Форма.Объект.Календари.НайтиСтроки(Новый Структура("Использование", Истина));
	ОбщиеКалендари	= Форма.Объект.ОбщиеКалендари.НайтиСтроки(Новый Структура("Использование", Истина));
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	ИначеЕсли НЕ ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// здесь можно выполнить расчет границ рабочего времени в зависимости от указанных календарей
	МассивКалендарей = Новый Массив;
	Для Каждого СтрокаКалендари Из Календари Цикл
		МассивКалендарей.Добавить(СтрокаКалендари.Календарь);
	КонецЦикла;
	Для Каждого СтрокаКалендари Из ОбщиеКалендари Цикл
		МассивКалендарей.Добавить(СтрокаКалендари.Календарь);
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанные");
		ОбщийМодульДанные.ПолучитьРабочееВремя(Пользователь, МассивКалендарей, НачалоРабочегоВремени, ОкончаниеРабочегоВремени);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив календарей для которых пользователь является владельцем,
// а также общественные календари, если указан соответствующий параметр
//
// Параметры:
//	Пользователь - Тип: СправочникСсылка.Пользователь
//	ВключаяОбщественные - Тип: Булево
//
// Возвращаемое значение:
//	Массив[Структура]
//		Календарь - Тип: СправочникСсылка.КалендариПланировщика
//		Пользователь - Тип: СправочникСсылка.Пользователи
//		КалендарьПредставление - Тип: Строка
//		ПользовательПредставление - Тип: Строка
//		Вид - Тип: Число. 1 - собственный, 2 - общественный
//
Функция ПолучитьКалендариПользователя(ПользовательСсылка, ОбщиеКалендари = Истина) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанные");
	Возврат ОбщийМодульДанные.ПолучитьКалендариПользователя(ПользовательСсылка, ОбщиеКалендари);
	
КонецФункции

// Возвращает события планировщика с данными
//
// Параметры:
//	Форма - Тип: УправляемаяФорма
//
// Возвращаемое значение:
//	ТаблицаЗначений. Перечень колонок определяется источником данных для планировщика
//
Функция ПолучитьСобытия(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанные");
		Возврат ОбщийМодульДанные.ПолучитьСобытия(Форма);
	КонецЕсли;
	
КонецФункции

// Создает запись о событии на основании объекта и доп. данных
//
// Параметры:
//	ОбъектОснование - Тип: ЛюбаяСсылка, Структура
//	ДополнительныеСвойства - Тип: Структура
//
// Возвращаемое значение:
//	ЛюбаяСсылка, Неопределено
//
Функция СоздатьСобытиеНаОсновании(ОбъектОснование, ДополнительныеСвойства) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанныеВызовСервера");
		Возврат ОбщийМодульДанные.СоздатьСобытиеНаОсновании(ОбъектОснование, ДополнительныеСвойства);
	КонецЕсли;
	
КонецФункции

// Возвращает имя расширения для интерфейса календаря
// 
// Возвращаемое значение:
//	DHTMLX, Fullcalendar, 1С (кириллица)
//
Функция ИмяРасширенияИнтерфейса() Экспорт
	ИспользоватьDHTMLX = РегистрыСведений.НастройкиПланировщика.ПолучитьЗначениеНастройки(Перечисления.ВидыНастроекПланировщика.ИспользоватьDHTMLX, Неопределено);
	Если ИспользоватьDHTMLX Тогда
		Возврат "DHTMLX";
	Иначе 
		Возврат "Fullcalendar";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийМодуля

// Обработка события модуля формы ПриСозданииНаСервере. Выполняется после первичной инициализации
// формы, но до заполнения данными
//		
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанные");
		ОбщийМодульДанные.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заполнении данных для вывода в планировщике
// Сбор данных осуществляется при следующих событиях:
//	- обновление, изменение периода, изменение вида (день, месяц и т.д.),
//	- оповещения об изменениях данных
//
// Параметры:
//	Форма - Тип: УправляемаяФорма.
//
Процедура ПриОбновленииДанныхПланировщика(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемыПТБ.ПланировщикДанные") Тогда
		ОбщийМодульДанные = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПланировщикДанные");
		ОбщийМодульДанные.ПриОбновленииДанныхПланировщика(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заполнении данных для вывода в планировщике
// Сбор данных осуществляется при следующих событиях:
//	- обновление, изменение периода, изменение вида (день, месяц и т.д.),
//	- оповещения об изменениях данных
//
// Параметры:
//	Форма - Тип: УправляемаяФорма.
//
Процедура ПриПолученииДанныхПланировщика(Форма) Экспорт
	
	ТекПользователь	= Пользователи.ТекущийПользователь();
	
	КэшСобытий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Форма.Объект.ТаблицаСобытий Цикл
		ЕстьНапоминания = КэшСобытий.Получить(СтрокаТаблицы.Ссылка);
		Если ЕстьНапоминания = Неопределено Тогда
			ЕстьНапоминания = ЕстьНапоминанияПоСобытию(СтрокаТаблицы.Ссылка, ТекПользователь);
			КэшСобытий.Вставить(СтрокаТаблицы.Ссылка, ЕстьНапоминания);
		КонецЕсли;
		
		Если НЕ ЕстьНапоминания Тогда
			Продолжить;
		КонецЕсли;
		
		// Желательно иметь две картинки черную и белую, в зависимости от шрифта выводить под цвет
		// для демонстрации выводим всегда черную
		СтрокаТаблицы.Картинка = "http://icons.iconarchive.com/icons/iconsmind/outline/16/Clock-icon.png";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьНапоминанияПоСобытию(СобытиеСсылка, ПользовательСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Событие"			, СобытиеСсылка);
	Запрос.УстановитьПараметр("Пользователь"	, ПользовательСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияСобытийПланировщика.Идентификатор
	|ИЗ
	|	РегистрСведений.НапоминанияСобытийПланировщика КАК НапоминанияСобытийПланировщика
	|ГДЕ
	|	НапоминанияСобытийПланировщика.Событие = &Событие
	|	И НапоминанияСобытийПланировщика.Пользователь = &Пользователь";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой(); 
	
КонецФункции

#КонецОбласти
