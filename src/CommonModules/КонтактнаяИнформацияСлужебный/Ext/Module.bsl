////////////////////////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация"
// 
////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устарело. Необходимо использовать УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СтарыйСоставПолей = Ложь) Экспорт
	Возврат УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(Данные, СтарыйСоставПолей);
КонецФункции

// Устарело. Необходимо использовать УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Данные, ВидКонтактнойИнформации);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//  Возвращает структуру с полем "ДанныеВыбора", содержащую список для автоподбора населенного пункта 
//  по иерархическому представлению младший-старший
//
//  Параметры:
//      Текст                      - Строка - текст автоподбора
//      СкрыватьНеактуальныеАдреса - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор
//      ПредупреждатьОНеактуальных - Булево - флаг структуры результата. Истина - возвращаемый список значений 
//                                            состоит из структур с предупреждением о неактуальности. 
//                                            Ложь - обычный список значений.
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора
//
Функция РезультатыАвтоПодбораНаселенногоПункта(Текст, СкрыватьНеактуальныеАдреса = Ложь, ПредупреждатьОНеактуальных = Истина) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат РезультатыАвтоПодбораНаселенногоПунктаКЛАДР(Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных, 20);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Ложь, Новый СписокЗначений);
КонецФункции

//  Возвращает структуру с полем "ДанныеВыбора", содержащую список для автоподбора улиц
//  по иерархическому представлению младший-старший
//
//  Параметры:
//      КодНаселенногоПункта       - Число  - код классификатора для ограничения подбора
//      Текст                      - Строка - текст автоподбора
//      СкрыватьНеактуальныеАдреса - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор
//      ПредупреждатьОНеактуальных - Булево - флаг структуры результата. Истина - возвращаемый список значений 
//                                            состоит из структур с предупреждением о неактуальности. 
//                                            Ложь - обычный список значений.
//
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора
//
Функция РезультатыАвтоПодбораУлицы(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса = Ложь, ПредупреждатьОНеактуальных = Истина) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат РезультатыАвтоПодбораУлицыКЛАДР(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных, 50);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Ложь, Новый СписокЗначений);
КонецФункции

//  Возвращает структуру с полем "ДанныеВыбора", содержащую список вариантов населенных пунктов 
//  по иерархическому представлению младший-старший
//
//  Параметры:
//      Текст                      - Строка - текст автоподбора
//      СкрыватьНеактуальныеАдреса - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор
//      ВыбиратьСтрок              - Число  - ограничение на количество результатов
//      УточняющаяУлица            - Строка - уточняющее представление улицы
//
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора
//
Функция НаселенныеПунктыПоПредставлению(Знач Текст, Знач СкрыватьНеактуальныеАдреса = Ложь, Знач ВыбиратьСтрок = 50, Знач УточняющаяУлица = "") Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат НаселенныеПунктыПоПредставлениюКЛАДР(Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок, УточняющаяУлица);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Ложь, Новый СписокЗначений);
КонецФункции

//  Возвращает структуру с полем "ДанныеВыбора", содержащую список вариантов населенных пунктов 
//  по иерархическому представлению младший-старший
//
//  Параметры:
//      КодНаселенногоПункта       - Число  - код классификатора для ограничения подбора
//      Текст                      - Текст  - строка автоподбора
//      СкрыватьНеактуальныеАдреса - Булево - флаг того, что неактуальные адреса не должны попадать в автоподбор
//      ВыбиратьСтрок              - Число  - ограничение на количество результатов
//
// Возвращаемое значение:
//      Структура - результат поиска данных. Содержит поля:
//         * СлишкомМногоДанных - Булево - признак того, что результирующий список не полон
//         * ДанныеВыбора       - СписокЗначений - данные для автоподбора
//
Функция УлицыПоПредставлению(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса = Ложь, ВыбиратьСтрок = 50) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат УлицыПоПредставлениюКЛАДР(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Ложь, Новый СписокЗначений);    
КонецФункции

//  Возвращает варианты типов домов (по признаку владения)
Функция ВариантыДанныхДом() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		КонтактнаяИнформацияКлиентСерверПовтИсп.НаименованияОбъектовАдресацииПоТипу(1), Ложь);
		
КонецФункции

//  Возвращает варианты типов домов (по признаку строения)
Функция ВариантыДанныхСтроение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		КонтактнаяИнформацияКлиентСерверПовтИсп.НаименованияОбъектовАдресацииПоТипу(2), Ложь);
		
КонецФункции

//  Возвращает варианты типов помещений
Функция ВариантыДанныхПомещение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		КонтактнаяИнформацияКлиентСерверПовтИсп.НаименованияОбъектовАдресацииПоТипу(3, Ложь), Ложь);
		
КонецФункции

//  Возвращает флаг вхождения объекта в состав родителя
//
//  Параметры:
//      КодОбъекта  - Число - код классификатора проверяемого объекта
//      КодРодителя - Число - код классификатора родителя
//
// Возвращаемое значение:
//      Булево - результат проверки
//
Функция ЯвляетсяПотомком(КодОбъекта, КодРодителя) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат ЯвляетсяПотомкомКЛАДР(КодОбъекта, КодРодителя);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Возвращает код региона по его полному наименованию
//
//  Параметры:
//      НаименованиеРегиона - Строка - полное наименование региона с сокращением
//
// Возвращаемое значение:
//      Строка - код региона из двух цифр. Пустая строка, если наименование определить не удалось
//      Неопределено - если нет ни одной подсистемы адресного классификатора
// 
Функция КодРегиона(Знач ПолноеНаименование) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат КодРегионаКЛАДР(ПолноеНаименование);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Возвращает наименование региона по его коду
//
//  Параметры:
//      Код - Строка, Число - код региона
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением
//      Неопределено - если нет ни одной подсистемы адресного классификатора
// 
Функция РегионКода(Знач Код) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат РегионКодаКЛАДР(Код);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Получает список всех регионов.
//
// Возвращаемое значение:
//      ТаблицаЗначений - все регионы. Содержит колонки:
//          * Код           - Число  - код региона
//          * Наименование  - Строка - часть описания региона
//          * Сокращение    - Строка - часть описания региона
//          * Представление - Строка - описание региона
//      Неопределено - если нет ни одной подсистемы адресного классификатора
// 
Функция ВсеРегионы() Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат ВсеРегионыКЛАДР();
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Возвращает структуру, описывающую населенный пункт в иерархии младший-старший
//  для текущего адресного классификатора. Имена ключей структуры зависят от 
//  классификатора
//
//  Параметры:
//      Код - Число - необязательный код классификатора объекта. Если указан, то структура 
//            заполняется данными для этого объекта
//
// Возвращаемое значение:
//      Структура - описание населенного пункта
//
Функция СписокРеквизитовНаселенныйПункт(Код = Неопределено) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат СписокРеквизитовНаселенныйПунктКЛАДР(Код);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура;
КонецФункции

//  Возвращает структуру, описывающую улицу в иерархии младший-старший
//  для текущего адресного классификатора. Имена ключей структуры зависят от 
//  классификатора
//
//  Параметры:
//      Код - Число - необязательный код классификатора объекта. Если указан, то структура 
//            заполняется данными для этого объекта
//
// Возвращаемое значение:
//      Структура - описание населенного пункта

Функция СписокРеквизитовУлица(Код = Неопределено) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат СписокРеквизитовУлицаКЛАДР(Код);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура;
КонецФункции

//  Возвращает код классификатора для объекта, представленного в полях.
//
//  Параметры:
//      ЧастиАдреса          - Структура - описание частей адреса?
//      СкрыватьНеактуальные - Булево - флаг скрытия актуальных
//
// Возвращаемое значение:
//      Число - код классификатора
//
Функция КодНаселенногоПунктаПоЧастямАдреса(ЧастиАдреса, СкрыватьНеактуальные = Ложь) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат КодОбъектаПоЧастямАдресаКЛАДР(ЧастиАдреса, СкрыватьНеактуальные);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Возвращает список для автоподбора элемента адреса, поиск по подобию. Список ограничен 50 записями
//
//  Параметры:
//      Текст          - Строка       - текст, введенный в поле
//      КодЧастиАдреса - Произвольный - идентификатор обрабатываемой части адреса, зависит от классификатора
//      ЧастиАдреса    - Произвольный - значения для других частей адреса, зависит от классификатора
//      ПредупреждатьОНеактуальных - Булево - флаг структуры списка. 
//                                            Истина - в списке содержатся структуры с предупреждением о неактуальности
//                                            Ложь - обычный список значений
//
// Возвращаемое значение:
//     СписокЗначений - результат для автоподбора
//
Функция СписокАвтоПодбораЭлементаАдреса(Текст, КодЧастиАдреса, ЧастиАдреса, ПредупреждатьОНеактуальных) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат СписокАвтоПодбораЭлементаАдресаКЛАДР(Текст, КодЧастиАдреса, ЧастиАдреса, ПредупреждатьОНеактуальных, 50);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый СписокЗначений;
КонецФункции

//  Возвращает список вариантов для окончательно введенного текста элемента адреса
//
//  Параметры:
//      Текст          - Строка       - текст, введенный в поле
//      КодЧастиАдреса - Произвольный - идентификатор обрабатываемой части адреса, зависит от классификатора
//      ЧастиАдреса    - Произвольный - значения для других частей адреса, зависит от классификатора
//      ВыбиратьСтрок  - Число        - ограничитель на возвращаемое число строк
//
// Возвращаемое значение:
//     СписокЗначений - результат для автоподбора
//
Функция СписокВариантовЭлементаАдресаПоТексту(Текст, КодЧастиАдреса, ЧастиАдреса, ВыбиратьСтрок = 50) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат СписокВариантовЭлементаАдресаПоТекстуКЛАДР(Текст, КодЧастиАдреса, ЧастиАдреса, ВыбиратьСтрок);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый СписокЗначений;
КонецФункции

// Возвращает коды классификатора по почтовому индексу
//
// Параметры:
//     Индекс - Строка - почтовый индекс, для которого необходимо получать данные.
//
//     ДополнительныеПараметрыПоиска  - Структура - Описывает настройки поиска. Состоит из необязательных полей:
//         СкрыватьНеактуальные       - Булево - Флаг исключения из выборки неактуальных адресов. По умолчанию Ложь
//         ВыбиратьСтрок              - Число  - Ограничение на количество возвращаемых строк, 0 - без ограничения. По умолчанию 0
//
// Возвращаемое значение:
//     Структура -  найденные варианты. Содержит поля:
//         * СлишкомМногоДанных      - Булево         - Истина, если в базе найдено больше записей, чем ограничено параметром ВыбиратьСтрок
//         * ОбщаяЧастьПредставления - Строка         - Общая часть представлений адреса.
//         * Данные                  - ТаблицаЗначений - Содержит данные для выбора. Колонки:
//                                         ** Неактуален     - Булево - Флаг неактуальности строки данных
//                                         ** Индекс         - Строка - Почтовый индекс, соответствующей адресу
//                                         ** Код            - Число  - Код классификатора для поиска вариантов по индексу
//                                         ** Представление  - Строка - Представление варианта
//
Функция АдресаКлассификатораПоИндексу(Знач Индекс, Знач ДополнительныеПараметрыПоиска = Неопределено) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат АдресаПоИндексуКЛАДР(Индекс, ДополнительныеПараметрыПоиска);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Новый Структура("Данные, ОбщаяЧастьПредставления, СлишкомМногоДанных", Новый ТаблицаЗначений, "", Ложь);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// Общее служебное
//

// Преобразует контактную информацию XDTO в XML
//
//  Параметры:
//      ОбъектXDTOИнформации - ОбъектXDTO - контактная информация
//
// Возвращаемое значение:
//      Строка - результат преобразования
//
Функция СериализацияКонтактнойИнформации(ОбъектXDTOИнформации) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	
	Если ОбъектXDTOИнформации <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
КонецФункции

// Преобразует XML в объект XDTO контактной информации
//
//  Параметры:
//      Текст            - Строка - строка XML
//      ОжидаемыйВид     - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//      РезультатыЧтения - Структура - приемник для дополнительных полей:
//                             * ТекстОшибки - Строка - описание ошибок процесса чтения. Возвращаемый функцией результат будет 
//                                                      корректного типа, но не заполнен.
//
Функция ДесериализацияКонтактнойИнформации(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатыЧтения = Неопределено) Экспорт
	
	ОжидаемыйТип = УправлениеКонтактнойИнформацией.ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеФакс                  = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ТекстОшибки = Неопределено;
		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		Исключение
			// Некорректный формат XML
			ЗаписьЖурналаРегистрации(КонтактнаяИнформацияСлужебныйПовтИсп.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , Текст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
			Если ТипЗнч(ОжидаемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				ТекстОшибки = СтрЗаменить(НСтр("ru = 'Некорректный формат XML контактной информации для ""%1"", значения полей были очищены.'"),
					"%1", Строка(ОжидаемыйВид));
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректный формат XML контактной информации, значения полей были очищены.'");
			КонецЕсли;
		КонецПопытки;
		
		Если ТекстОшибки = Неопределено Тогда
			// Контролируем соответствие типов
			НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());
			Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается веб-страница'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеФакс И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается ""другое""'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;
		
		// Проверим ошибку и вернем расширенную информацию
		Если РезультатыЧтения = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ТипЗнч(РезультатыЧтения) <> Тип("Структура") Тогда
			РезультатыЧтения = Новый Структура;
		КонецЕсли;
		РезультатыЧтения.Вставить("ТекстОшибки", ТекстОшибки);
		
		// Будет возвращен пустой объект
		Текст = "";
	КонецЕсли;
	
	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	Иначе
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = ДесериализацияАдреса(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеФакс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = ДесериализацияФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, не указан ожидаемый тип'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разбирает представление КИ и возвращает XDTO
//
//  Параметры:
//      Текст        - Строка  - XML
//      ОжидаемыйВид - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация
//
Функция ПарсингКонтактнойИнформации(Текст, ОжидаемыйВид) Экспорт
	
	ОжидаемыйТип = УправлениеКонтактнойИнформацией.ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат ДесериализацияАдреса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат ДесериализацияТелефона("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат ДесериализацияФакса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Разбирает представление КИ и возвращает строку XML
//
//  Параметры:
//      Текст        - Строка  - XML
//      ОжидаемыйВид - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//
// Возвращаемое значение:
//      Строка - контактная информация в XML
//
Функция ПарсингКонтактнойИнформацииXML(Текст, ОжидаемыйВид) Экспорт
	Возврат СериализацияКонтактнойИнформации(
		ПарсингКонтактнойИнформации(Текст, ОжидаемыйВид));
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияАдреса(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ЗначенияПолей);
	
	РазбиратьПоПолям = ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура") 
	                   Или ( ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей) );
	
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
	// Разбираем из представления по классификаторам
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат ДесериализацияАдресаПоПредставлениюКЛАДР(Представление);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	
	// Пустой объект с представлением
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	Возврат Результат;
КонецФункции  

// Преобразует строку в XDTO контактную информацию телефона
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO контактную информацию Факса
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию 
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

//  Читает и устанавливает представление для контактной информации. Объект может измениться.
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO, Строка - Контактная информация
//      НовоеЗначение  - Строка - необязательное устанавливаемое новое представление в XDTOИнформация
//
//  Возвращаемое значение:
//      Строка - новое значение

Функция ПредставлениеКонтактнойИнформации(XDTOИнформация, НовоеЗначение = Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация) = Тип("Строка");
	Если НадоСериализовать И Не КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOИнформация) Тогда
		// Старая версия значений полей, возвращаем саму строку
		Возврат XDTOИнформация;
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, ДесериализацияКонтактнойИнформации(XDTOИнформация), XDTOИнформация);
	Если НовоеЗначение <> Неопределено Тогда
		ОбъектXDTO.Представление = НовоеЗначение;
		Если НадоСериализовать Тогда
			XDTOИнформация = СериализацияКонтактнойИнформации(ОбъектXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектXDTO.Представление
КонецФункции

//  Читает и устанавливает комментарий для контактной информации
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO, Строка - Контактная информация
//      НовоеЗначение  - Строка - необязательное устанавливаемое новый комментарий в XDTOИнформация
//
//  Возвращаемое значение:
//      Строка - новое значение
//
Функция КомментарийКонтактнойИнформации(XDTOИнформация, НовоеЗначение = Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация) = Тип("Строка");
	Если НадоСериализовать И Не КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOИнформация) Тогда
		// Старая версия значений полей, комментарий не поддерживается
		Возврат "";
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, ДесериализацияКонтактнойИнформации(XDTOИнформация), XDTOИнформация);
	Если НовоеЗначение <> Неопределено Тогда
		ОбъектXDTO.Комментарий = НовоеЗначение;
		Если НадоСериализовать Тогда
			XDTOИнформация = СериализацияКонтактнойИнформации(ОбъектXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектXDTO.Комментарий;
КонецФункции

//  Вычисляет и устанавливает флаг того, что адрес был введен в свободной форме
//  В качестве флага используется не пустота значения поля "Адрес_по_документу"
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO, Строка - Контактная информация
//      НовоеЗначение  - Булево - необязательное устанавливаемое новое значение
//
//  Возвращаемое значение:
//      Булево - новое значение
//
Функция АдресВведенВСвободнойФорме(XDTOИнформация, НовоеЗначение = Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация) = Тип("Строка");
	Если НадоСериализовать И Не КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOИнформация) Тогда
		// Старая версия значений полей, не поддерживается
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, ДесериализацияКонтактнойИнформации(XDTOИнформация), XDTOИнформация);
	Если Не ЭтоРоссийскийАдрес(ОбъектXDTO) Тогда
		// Не поддерживаем
		Возврат Ложь;
	КонецЕсли;
	
	АдресРФ = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(НовоеЗначение) <> Тип("Булево") Тогда
		// Читаем
		Возврат Не ПустаяСтрока(АдресРФ.Адрес_по_документу);
	КонецЕсли;
		
	// Устанавливаем
	Если НовоеЗначение Тогда
		АдресРФ.Адрес_по_документу = ОбъектXDTO.Представление;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
	КонецЕсли;
	
	Если НадоСериализовать Тогда
		XDTOИнформация = СериализацияКонтактнойИнформации(ОбъектXDTO);
	КонецЕсли;
	Возврат НовоеЗначение;
КонецФункции

//  Формирует и возвращает представление контактной информации
//
//  Параметры:
//      Информация - ОбъектXDTO, Строка - Контактная информация
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления
//
//  Возвращаемое значение:
//      Строка - сформированное представление
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			// Что было, то и будет
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав, ВидИнформации);
			
		КонецЕсли;
		
		// Заглушка на другие типы
		Если ТипЗнч(ТипИнформации) = Тип("ОбъектXDTO") И ТипИнформации.Свойства.Получить("Значение") <> Неопределено Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		Возврат Строка(Информация.Состав);
	КонецЕсли;
	
	// Старый формат или новый десериализованный
	Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НоваяИнфо = ДесериализацияАдреса(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
		Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	КонецЕсли;
	
	Возврат СокрЛП(Информация);
КонецФункции

//  Возвращает флаг того, что переданный адрес - российский
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса
//
//  Возвращаемое значение:
//      Булево - результат проверки
//
Функция ЭтоРоссийскийАдрес(XDTOАдрес) Экспорт
	Возврат РоссийскийАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

//  Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес
//      Неопределено - нет российского адреса
//
Функция РоссийскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Читает и устанавливает почтовый индекс адреса
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса
//      НовоеЗначение - Строка     - устанавливаемое значение
//
//  Возвращаемое значение:
//      Строка - почтовый индекс
//
Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить( КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса() );
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Запись
	КодИндекса = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииПочтовогоИндекса();
	
	ЗаписьИндекса = АдресРФ.Получить( КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса() );
	Если ЗаписьИндекса = Неопределено Тогда
		ЗаписьИндекса = АдресРФ.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		ЗаписьИндекса.ТипАдрЭл = КодИндекса;
	КонецЕсли;
	
	ЗаписьИндекса.Значение = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

//  Возвращает почтовый индекс для адреса по данным классификатора
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса
//
//  Возвращаемое значение:
//      Строка - почтовый индекс
//      Неопределено - индекс не найден или адрес иностранный
//
Функция ОпределитьПочтовыйИндексАдреса(XDTOАдрес) Экспорт
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Если XDTOАдрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		XDTOАдресРФ = XDTOАдрес.Состав;
	Иначе 
		XDTOАдресРФ = XDTOАдрес;
	КонецЕсли;
	
	Если XDTOАдресРФ = Неопределено Или XDTOАдресРФ.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		Возврат Неопределено;	// Иностранный или пустой адрес
	КонецЕсли;
	
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		Возврат ОпределитьПочтовыйИндексАдресаКЛАДР(XDTOАдресРФ);
	КонецЕсли;
	
	// Нет подсистемы классификатора
	Возврат Неопределено;
КонецФункции

//  Читает и устанавливает район адреса
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса
//      НовоеЗначение - Строка - устанавливаемое значение
//
//  Возвращаемое значение:
//      Строка - новое значение
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ЗначениеСвойстваПоXPath(АдресРФ, КонтактнаяИнформацияКлиентСерверПовтИсп.XPathРайона() );
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

//  Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классифатора дополнительных адресных объектов. Например "Корпус"
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классифатора дополнительных адресных объектов. Например "Корпус"
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п
//                        ** ПутьXPath  - Строка - путь к значению объекта
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;
	
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = КонтактнаяИнформацияКлиентСерверПовтИсп.ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

//  Устанавливает значения полей населенного пункта в адресе
//  
//  Параметры:
//      XDTOАдрес         - ОбъектXDTO  - адрес РФ
//      КодКлассификатора - Число - полный код, зависит от классификатора
//
Процедура УстановитьНаселенныйПунктАдресаПоКоду(XDTOАдрес, КодКлассификатора) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		УстановитьНаселенныйПунктАдресаПоКодуКЛАДР(XDTOАдрес, КодКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

//  Устанавливает значения полей улицы
//  
//  Параметры:
//      XDTOАдрес         - ОбъектXDTO  - адрес РФ
//      КодКлассификатора - Число - полный код, зависит от классификатора
//
Процедура УстановитьУлицуАдресаПоКоду(XDTOАдрес, КодКлассификатора) Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	
	Если Вариант = "КЛАДР" Тогда
		УстановитьУлицуАдресаПоКодуКЛАДР(XDTOАдрес, КодКлассификатора);
	КонецЕсли;
	
	// Нет подсистемы классификатора
КонецПроцедуры

//  Возвращает представление младший-старший для населенного пункта
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ
//
//  Возвращаемое значение:
//      Строка - представление
//
Функция ПредставлениеНаселенногоПункта(ОбъектАдреса) Экспорт
	
	АдресРФ = РоссийскийАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если АдресРФ.СвРайМО = Неопределено Тогда
		Район = "";
	ИначеЕсли АдресРФ.СвРайМО.Район <> Неопределено Тогда
		Район = АдресРФ.СвРайМО.Район;
	ИначеЕсли АдресРФ.СвРайМО.СвМО <> Неопределено Тогда
		Район = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			АдресРФ.СвРайМО.СвМО.МунОбр2, "",
			АдресРФ.СвРайМО.СвМО.МунОбр1, "");
	Иначе
		Район = "";;
	КонецЕсли;
	
	Возврат КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
		АдресРФ.НаселПункт, "",
		АдресРФ.Город,  "",
		Район, "",
		АдресРФ.Округ, "",
		АдресРФ.СубъектРФ, "");
	
КонецФункции    

//  Возвращает представление младший-старший для населенного пункта
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес РФ
//
//  Возвращаемое значение:
//      Строка - представление
//
Функция ПредставлениеУлицы(ОбъектАдреса) Экспорт
	
	АдресРФ = РоссийскийАдрес(ОбъектАдреса);
	Если АдресРФ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
		АдресРФ.Улица, "");
	
КонецФункции

//  Возвращает представление адреса
//
//  Параметры:
//      ОбъектАдреса - ОбъектXDTO - адрес
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание для формирования представления
//
//  Возвращаемое значение:
//      Строка - представление
//
Функция ПредставлениеАдреса(XDTOАдрес, ВидИнформации) Экспорт
	
	// 1) Страна, если надо.
	// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица
	// 3) Здания, помещения
	
	ПараметрыФормирования = Новый Структура("ВключатьСтрануВПредставление", Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ВидИнформации);
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	АдресРФ          = XDTOАдрес.Состав;
	Страна           = СокрЛП(XDTOАдрес.Страна);
	Если ЭтоРоссийскийАдрес(АдресРФ) Тогда
		// Это российский адрес, смотрим на настройки
		Если Не ПараметрыФормирования.ВключатьСтрануВПредставление Тогда
			Страна = "";
		КонецЕсли;
		
		// Значимые части
		Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			ПочтовыйИндексАдреса(АдресРФ), "",
			АдресРФ.СубъектРФ, "",
			АдресРФ.Округ, "",
			РайонАдреса(АдресРФ), "",
			АдресРФ.Город, "",
			АдресРФ.ВнутригРайон, "",
			АдресРФ.НаселПункт, "",
			АдресРФ.Улица, "");
			
		// Строения и помещения
		НомерНеВыведен = Истина;
		Данные = ЗданияИПомещенияАдреса(АдресРФ);
		Для Каждого Строка Из Данные.Здания Цикл
			Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
				Представление, "",
				СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение), "");
			НомерНеВыведен = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из Данные.Помещения Цикл
			Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
				Представление, "",
				СокрЛП(Строка.Сокращение + " " + Строка.Значение), "");
		КонецЦикла;
			
		// При пустом представлении страну нет смысла выводить
		Если ПустаяСтрока(Представление) Тогда
			Страна = "";
		КонецЕсли;
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(АдресРФ);
	КонецЕсли;
	
	Возврат КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Страна, "", Представление, "");
КонецФункции

//  Возвращает перечень ошибок для адреса.
//
// Параметры:
//     XDTOАдрес         - ОбъектXDTO, СписокЗначений, Строка - описание адреса
//     ВидИнформации     - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание соответствующего вида контактной информации 
//                         для получения флагов, влияющих на проверку: АдресТолькоРоссийский, ОбязательноеЗаполнение, ВключатьСтрануВПредставление.
//                         Если не указан, то будут использованы установки по умолчанию - значение Ложь для всех флагов
//     РезультатГруппами - Булево - если указана Истина, то будет возвращен массив групп ошибок, иначе - список значений.
//
// Возвращаемое значение:
//     СписокЗначений - если параметр РезультатГруппами равен Ложь. Внутри представление - текст ошибки, значение - XPath ошибочного поля
//     Массив         - если параметр РезультатГруппами равен Истина. Содержит структуры с полями:
//                         ** ТипОшибки - Строка - наименование группы (типа) ошибки. Возможные значения:
//                               "ПредставлениеНеСоответствуетНаборуПолей"
//                               "НеЗаполненыОбязательныеПоля"
//                               "НеУказаныСокращенияПолей"
//                               "НедопустимыеСимволыПолей"
//                               "НеСоответствуетДлинаПолей"
//                               "ОшибкиПоКлассификатору"
//                         ** Сообщение - Строка - подробный текст ошибки
//                         ** Поля      - Массив - содержит структуры описания ошибочных полей. Каждая структура имеет реквизиты:
//                               *** ИмяПоля   - Строка - внутренний идентификатор ошибочного элемента адреса 
//                               *** Сообщение - Строка - подробный текст ошибки для этого поля
//
Функция ОшибкиЗаполненияАдреса(Знач XDTOАдрес, Знач ВидИнформации = Неопределено, Знач РезультатГруппами = Ложь) Экспорт
	
	Если ТипЗнч(XDTOАдрес) = Тип("ОбъектXDTO") Тогда
		АдресРФ = XDTOАдрес.Состав;
	Иначе
		XTDOКонтактная = ДесериализацияАдреса(XDTOАдрес);
		Адрес = XTDOКонтактная.Состав;
		АдресРФ = ?(Адрес = Неопределено, Неопределено, Адрес.Состав);
	КонецЕсли;
	
	// Флаги проверки
	Если ВидИнформации = Неопределено Тогда
		// Проверка с установками по умолчанию
		ФлагиПроверки = УправлениеКонтактнойИнформацией.СтруктураВидаКонтактнойИнформации();
		
	ИначеЕсли ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		// Проверка с установками по виду
		ФлагиПроверки = УправлениеКонтактнойИнформацией.СтруктураВидаКонтактнойИнформации(ВидИнформации);
		
	Иначе
		// Проверка по переданным флагам
		ФлагиПроверки = ВидИнформации;
		
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если ТипЗнч(АдресРФ) <> Тип("ОбъектXDTO") Или АдресРФ.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		// Адрес за пределами РФ
		Результат = ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
		
		Если ФлагиПроверки.АдресТолькоРоссийский Тогда
			ТекстОшибки = НСтр("ru = 'Адрес должен быть только российским.'");
			Если РезультатГруппами Тогда
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки
				)); 
			Иначе
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Отдельно проверяем пустой адрес, если необходимо его заполнение
	Если Не XDTOКонтактнаяИнформацияЗаполнена(АдресРФ) Тогда
		// Адрес пуст
		Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
			// Но должен быть заполнен
			ТекстОшибки = НСтр("ru = 'Адрес не заполнен.'");
			
			Если РезультатГруппами Тогда
				Результат = Новый Массив;
				Результат.Добавить(Новый Структура("Поля, ТипОшибки, Сообщение", Новый Массив,
					"НеЗаполненыОбязательныеПоля", ТекстОшибки
				)); 
			Иначе
				Результат = Новый СписокЗначений;
				Результат.Добавить("/", ТекстОшибки);
			КонецЕсли;
			
			Возврат Результат
		КонецЕсли;
		
		// Адрес пуст и не должен быть заполнен - считаем его корректным
		Возврат ?(РезультатГруппами, Новый Массив, Новый СписокЗначений);
	КонецЕсли;
	
	ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(АдресРФ, ФлагиПроверки);
	ПроверятьКлассификатор = Истина;
	
	Для Каждого Группа Из ВсеОшибки Цикл
		Если Найти("НеУказаныСокращенияПолей, НедопустимыеСимволыПолей", Группа.ТипОшибки) > 0 Тогда
			// Некорректные данные в полях, проверять их по классификатору нет смысла
			ПроверятьКлассификатор = Ложь;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	ОшибкиКлассификатора = Новый СписокЗначений;
	Если ПроверятьКлассификатор Тогда
		Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
		
		Если Вариант = "КЛАДР" Тогда
			ЗаполнитьОшибкиАдресаКЛАДР(АдресРФ, ОшибкиКлассификатора);
		Иначе
			// Нет подсистемы классификатора
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатГруппами Тогда
		НаименованиеГруппыОшибки = "ОшибкиПоКлассификатору";
		КоличествоОшибок = ОшибкиКлассификатора.Количество();
		
		Если КоличествоОшибок = 1 И ОшибкиКлассификатора[0].Значение <> Неопределено
			И ОшибкиКлассификатора[0].Значение.ПутьXPath = Неопределено 
		Тогда
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки,
				ОшибкиКлассификатора[0].Представление));
			
		ИначеЕсли КоличествоОшибок > 0 Тогда
			// Подробное описание ошибок
			ВсеОшибки.Добавить(ГруппаОшибокАдреса(НаименованиеГруппыОшибки,
				НСтр("ru = 'Части адреса не соответствуют адресному классификатору:'")));
				
			ГруппаОшибокКлассификатора = ВсеОшибки[ВсеОшибки.ВГраница()];
			
			СписокСущностей = "";
			Для Каждого Элемент Из ОшибкиКлассификатора Цикл
				ЭлементОшибки = Элемент.Значение;
				Если ЭлементОшибки = Неопределено Тогда
					// Абстрактная ошибка
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, 
						"", Элемент.Представление);
				Иначе
					ДобавитьОшибкуЗаполненияАдреса(ГруппаОшибокКлассификатора, 
						ЭлементОшибки.ПутьXPath, Элемент.Представление);
					СписокСущностей = СписокСущностей + ", " + ЭлементОшибки.СущностьПоля;
				КонецЕсли;
			КонецЦикла;
			
			ГруппаОшибокКлассификатора.Сообщение = ГруппаОшибокКлассификатора.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
		
		Возврат ВсеОшибки;
	КонецЕсли;
	
	// Объединяем все в список
	Результат = Новый СписокЗначений;
	Для Каждого Группа Из ВсеОшибки Цикл
		Для Каждого Поле Из Группа.Поля Цикл
			Результат.Добавить(Поле.ИмяПоля, Поле.Сообщение);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ЭлементСписка Из ОшибкиКлассификатора Цикл
		Результат.Добавить(ЭлементСписка.Значение.ПутьXPath, ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Общие проверки на корректность адреса
//
//  Параметры:
//      ДанныеАдреса  - Строка, СписокЗначений - XML, XDTO с данными адреса РФ
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - ссылка на соответствующий вид контактной информации 
//
// Возвращаемое значение:
//      Массив - содержит структуры с полями:
//         * ТипОшибки - Строка - идентификатор группы ошибки. Может принимать значение:
//              "ПредставлениеНеСоответствуетНаборуПолей",
//              "НеЗаполненыОбязательныеПоля"
//              "НеУказаныСокращенияПолей"
//              "НедопустимыеСимволыПолей"
//              "НеСоответствуетДлинаПолей"
//         * Сообщение - Строка - Подробный текст ошибки
//         * Поля - Массив структур с полями:
//             ** ИмяПоля - внутренний идентификатор ошибочного поля
//             ** Сообщение - подробный текст ошибки для поля
//
Функция ОбщиеГруппыОшибокЗаполненияАдреса(Знач ДанныеАдреса, Знач ВидИнформации) Экспорт
	Результат = Новый Массив;
	
	Если ТипЗнч(ДанныеАдреса) = Тип("ОбъектXDTO") Тогда
		АдресРФ = ДанныеАдреса;
		
	Иначе
		XTDOКонтактная = ДесериализацияАдреса(ДанныеАдреса);
		Адрес = XTDOКонтактная.Состав;
		Если Не ЭтоРоссийскийАдрес(Адрес) Тогда
			Возврат Результат;
		КонецЕсли;
		АдресРФ = Адрес.Состав;
		
		// 1) совпадение представления и набора данных
		Представление = ПредставлениеАдреса(АдресРФ, ВидИнформации);
		Если XTDOКонтактная.Представление <> Представление Тогда
			Результат.Добавить(ГруппаОшибокАдреса("ПредставлениеНеСоответствуетНаборуПолей",
				НСтр("ru = 'Адрес не соответствует значениям в наборе полей.'")));
			ДобавитьОшибкуЗаполненияАдреса(Результат[0], "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Представление адреса для вида контактной информации ""%1"" отличается от данных в адресе.'"),
					Строка(ВидИнформации.Наименование)));
		КонецЕсли;
	КонецЕсли;
	
	НеЗаполненыОбязательныеПоля = ГруппаОшибокАдреса("НеЗаполненыОбязательныеПоля",
		НСтр("ru = 'Не заполнены обязательные поля:'"));
	Результат.Добавить(НеЗаполненыОбязательныеПоля);
	
	НеУказаныСокращенияПолей = ГруппаОшибокАдреса("НеУказаныСокращенияПолей",
		НСтр("ru = 'Не указано сокращение для полей:'"));
	Результат.Добавить(НеУказаныСокращенияПолей);
	
	НедопустимыеСимволыПолей = ГруппаОшибокАдреса("НедопустимыеСимволыПолей",
		НСтр("ru = 'Найдены недопустимые символы в полях:'"));
	Результат.Добавить(НедопустимыеСимволыПолей);
	
	НеСоответствуетДлинаПолей = ГруппаОшибокАдреса("НеСоответствуетДлинаПолей",
		НСтр("ru = 'Не соответствует установленной длина полей:'"));
	Результат.Добавить(НеСоответствуетДлинаПолей);
	
	// 2) Индекс, Регион, Дом должны быть заполнены
	Индекс = ПочтовыйИндексАдреса(АдресРФ);
	Если ПустаяСтрока(Индекс) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса(),
			НСтр("ru = 'Не указан почтовый индекс.'"), "Индекс");
	КонецЕсли;
	
	Регион = АдресРФ.СубъектРФ;
	Если ПустаяСтрока(Регион) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "СубъектРФ",
			НСтр("ru = 'Не указан регион.'"), "Регион");
	КонецЕсли;
	
	ЗданияПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	Если ИсключатьПроверкуДомаВАдресе(АдресРФ) Тогда
		// Должно быть заполнено хоть какое-нибудь здание
		
		ЗданиеНеУказано = Истина;
		Для Каждого ДанныеДома Из ЗданияПомещения.Здания Цикл
			Если Не ПустаяСтрока(ДанныеДома.Значение) Тогда
				ЗданиеНеУказано = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗданиеНеУказано Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, 
				КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации("Дом"),
				НСтр("ru = 'Не указан дом или корпус'"), 
				НСтр("ru = 'Дом'")
			);
		КонецЕсли;
			
	Иначе
		// Должен быть указан дом (владение и т.п) с возможным уточнением корпусом, строением и т.п.
		
		ДанныеДома = ЗданияПомещения.Здания.Найти(1, "Вид");	// 1 - вид по признаку владения
		Если ДанныеДома = Неопределено Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, 
				КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации("Дом"),
				НСтр("ru = 'Не указан дом или владение (домовладение).'"),
				НСтр("ru = 'Дом'")
			);
		ИначеЕсли ПустаяСтрока(ДанныеДома.Значение) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, ДанныеДома.ПутьXPath,
				НСтр("ru = 'Не заполнено значение дома или владения (домовладения).'"),
				НСтр("ru = 'Дом'")
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// 3) Регион, Район, Город, НаселенныйПункт, Улица должны:    
	//      - иметь сокращение
	//      - не длинней 50 символов
	//      - только кириллица
	
	ДопустимоКромеКириллицы = "/,-. 0123456789_";
	
	// Регион
	Если Не ПустаяСтрока(Регион) Тогда
		Поле = "СубъектРФ";
		Если ПустаяСтрока(КонтактнаяИнформацияКлиентСервер.Сокращение(Регион)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, "СубъектРФ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Не указано сокращение в названии региона ""%1"".'"), Регион
				), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если СтрДлина(Регион) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Название региона ""%1"" должно быть короче 50 символов.'"), Регион
				), НСтр("ru = 'Регион'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Регион, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'В названии региона ""%1"" есть не кириллические символы.'"), Регион
				), НСтр("ru = 'Регион'"));
		КонецЕсли
	КонецЕсли;
	
	// Район
	Район = РайонАдреса(АдресРФ);
	Если Не ПустаяСтрока(Район) Тогда
		Поле = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathРайона();
		Если ПустаяСтрока(КонтактнаяИнформацияКлиентСервер.Сокращение(Район)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Не указано сокращение в названии района ""%1""'."), Район
				), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Название района ""%1"" должно быть короче 50 символов.'"), Район
				), НСтр("ru = 'Район'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Район, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'В названии района ""%1"" есть не кириллические символы.'"), Район
				), НСтр("ru = 'Район'"));
		КонецЕсли;
	КонецЕсли;
	
	// Город
	Город = АдресРФ.Город;
	Если Не ПустаяСтрока(Город) Тогда
		Поле = "Город";
		Если ПустаяСтрока(КонтактнаяИнформацияКлиентСервер.Сокращение(Город)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Не указано сокращение в названии города ""%1"".'"), Город
				), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если СтрДлина(Город) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Название города ""%1"" должно быть короче 50 символов.'"), Город
				), НСтр("ru = 'Город'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Город, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'В названии города ""%1"" есть не кириллические символы.'"), Город
				), НСтр("ru = 'Город'"));
		КонецЕсли;
	КонецЕсли;
	
	// Населенный пункт
	НаселенныйПункт = АдресРФ.НаселПункт;
	Если Не ПустаяСтрока(НаселенныйПункт) Тогда
		Поле = "НаселПункт";
		Если ПустаяСтрока(КонтактнаяИнформацияКлиентСервер.Сокращение(НаселенныйПункт)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Не указано сокращение в названии населенного пункта ""%1"".'"), НаселенныйПункт
				), НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если СтрДлина(НаселенныйПункт) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Название населенного пункта ""%1"" должно быть короче 50 символов.'"), НаселенныйПункт
				), НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаселенныйПункт, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'В названии населенного пункта ""%1"" есть не кириллические символы.'"), НаселенныйПункт
				), НСтр("ru = 'Населенный пункт'"));
		КонецЕсли;
	КонецЕсли;
	
	// Улица
	Улица = АдресРФ.Улица;
	Если Не ПустаяСтрока(Улица) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(КонтактнаяИнформацияКлиентСервер.Сокращение(Улица)) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Не указано сокращение в названии улицы ""%1"".'"), Улица
				), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если СтрДлина(Район) > 50 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Название улицы ""%1"" должно быть короче 50 символов.'"), Улица
				), НСтр("ru = 'Улица'"));
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Улица, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'В названии улицы ""%1"" есть не кириллические символы.'"), Улица
				), НСтр("ru = 'Улица'"));
		КонецЕсли;
	КонецЕсли;
	
	// 4) Индекс - если есть, то 6 цифр
	Если Не ПустаяСтрока(Индекс) Тогда
		Поле = КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса();
		Если СтрДлина(Индекс) <> 6 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле,
				НСтр("ru = 'Почтовый индекс должен состоять из 6 цифр.'"),
				НСтр("ru = 'Индекс'")
			);
		КонецЕсли;
	КонецЕсли;
	
	// 5) Дом, Корпус, Квартира не длинней 10 символов
	Для Каждого ДанныеЗдания Из ЗданияПомещения.Здания Цикл
		Если СтрДлина(ДанныеЗдания.Значение) > 10 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеЗдания.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Значение поля ""%1"" должно быть короче 10 символов.'"), ДанныеЗдания.Тип
				), ДанныеЗдания.Тип);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеПомещения Из ЗданияПомещения.Помещения Цикл
		Если СтрДлина(ДанныеПомещения.Значение) > 10 Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, ДанныеПомещения.ПутьXPath,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
					НСтр("ru = 'Значение поля ""%1"" должно быть короче 10 символов.'"), ДанныеПомещения.Тип
				), ДанныеПомещения.Тип);
		КонецЕсли;
	КонецЦикла;
	
	// 6) Поля Город и НаселенныйПункт могут быть одновременно пустые только в регионе - городе ФЗ
	Если ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) Тогда
		Если НазванияГородовФедеральногоЗначения().Найти(ВРег(Регион)) = Неопределено Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Город",
				НСтр("ru = 'Город может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Город'")
			);
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "НаселПункт",
				НСтр("ru = 'Населенный пункт может быть не указан только в регионе - городе федерального значения.'"),
				НСтр("ru = 'Населенный пункт'")
			);
		КонецЕсли;
	КонецЕсли;
	
	// 7) Улица не может быть пустой если НаселенныйПункт пустой
	Если Не ИсключатьПроверкуУлицыВАдресе(АдресРФ) Тогда
			
		Если ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Улица) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Улица",
				НСтр("ru = 'Если неопределен населенный пункт, то должна быть указана улица.'"), 
				НСтр("ru = 'Улица'")
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// Все. Убираем пустые результаты, корректируем сообщение группы.
	Для Индекс = 1-Результат.Количество() По 0 Цикл
		Группа = Результат[-Индекс];
		Поля = Группа.Поля;
		СписокСущностей = "";
		Для ИндексПоля = 1-Поля.Количество() По 0 Цикл
			Поле = Поля[-ИндексПоля];
			Если ПустаяСтрока(Поле.Сообщение) Тогда
				Поля.Удалить(-ИндексПоля);
			Иначе
				СписокСущностей = ", " + Поле.СущностьПоля + СписокСущностей;
				Поле.Удалить("СущностьПоля");
			КонецЕсли;
		КонецЦикла;
		Если Поля.Количество() = 0 Тогда
			Результат.Удалить(-Индекс);
		ИначеЕсли Не ПустаяСтрока(СписокСущностей) Тогда
			Группа.Сообщение = Группа.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Локальные исключения при проверке адреса
//
Функция ИсключатьПроверкуДомаВАдресе(Знач АдресРФ)
	Результат = Ложь;
	
	// В Зеленограде может быть указан непосредственно корпус, без дома/владения
	Если ВРег(СокрЛП(АдресРФ.СубъектРФ)) = "МОСКВА Г" И ВРег(СокрЛП(АдресРФ.Город)) = "ЗЕЛЕНОГРАД Г" Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Локальные исключения при проверке адреса
//
Функция ИсключатьПроверкуУлицыВАдресе(Знач АдресРФ)
	Результат = Ложь;
	
	// В Зеленограде улицы не проверяем
	Если ВРег(СокрЛП(АдресРФ.СубъектРФ)) = "МОСКВА Г" И ВРег(СокрЛП(АдресРФ.Город)) = "ЗЕЛЕНОГРАД Г" Тогда
		Результат = Истина;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

//  Возвращает массив наименований регионов - городов федерального значения
Функция НазванияГородовФедеральногоЗначения() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("МОСКВА Г");
	Результат.Добавить("САНКТ-ПЕТЕРБУРГ Г");
	Результат.Добавить("СЕВАСТОПОЛЬ Г");
	Результат.Добавить("БАЙКОНУР Г");
	
	Возврат Результат;
КонецФункции

//  Возвращает представление телефона
//
//  Параметры:
//      XDTOДанные    - ОбъектXDTO - контактная информация
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации 
//
// Возвращаемое значение:
//      Строка - представление
//
Функция ПредставлениеТелефона(XDTOДанные, ВидИнформации = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
КонецФункции    

//  Возвращает представление факса
//
//  Параметры:
//      XDTOДанные    - ОбъектXDTO - контактная информация
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации 
//
// Возвращаемое значение:
//      Строка - представление
//
Функция ПредставлениеФакса(XDTOДанные, ВидИнформации = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
КонецФункции    

// Возвращает флаг того, что текущий пользователь может загружать или очищать адресный классификатор
//
// Возвращаемое значение:
//     Булево- результат проверки
//
Функция ЕстьВозможностьИзмененияАдресногоКлассификатора() Экспорт
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
		
	Если Вариант = "КЛАДР" Тогда
		ОбъектКонтроля = Метаданные.РегистрыСведений.Найти("АдресныйКлассификатор");
		Возврат ОбъектКонтроля <> Неопределено И ПравоДоступа("Изменение", ОбъектКонтроля);
	КонецЕсли;
	
	// Нет классификатора
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// Совместимость
//

//  Возвращает структуру  заполненную строкой и списком
//
//  Параметры:
//      XDTOКонтактнаяИнформация - ОбъектXDTO, Строка - контактная информация или строка XML
//      СтарыйСоставПолей        - Булево - необязательный флаг того, что из состава полей будут исключены
//                                          поля, отсутствующие в версиях БСП младше 2.1.3
//
//  Возвращаемое значение:
//      Структура - данные. Содержит поля:
//          * Представление - Строка - представление адреса
//          * ЗначенияПолей - СписокЗначений - значения
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация, СтарыйСоставПолей = Ложь) Экспорт
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOКонтактнаяИнформация) Тогда
		XDTOКонтактная = ДесериализацияКонтактнойИнформации(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Состав = XDTOКонтактная.Состав;
	
	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСтарыйСписокПолей(Состав, Не СтарыйСоставПолей);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
		
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует адрес формата XDTO в старый список полей типа СписокЗначений
//
// Параметры:
//     XDTOАдрес               - ОбъектXDTO, Строка - контактная информация или строка XML
//     РасширенныйСоставПолей - Булево - необязательный флаг того, что состав полей будет сокращен для совместимости
//                                     с обменом БСП 2.1.2
//
//  Возвращаемое значение:
//     СписокЗначений 
//
Функция АдресВСтарыйСписокПолей(XDTOАдрес, РасширенныйСоставПолей = Истина) Экспорт
	Список = Новый СписокЗначений;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	XDTOТип = XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны = СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);
		
		Если Не ЭтоРоссийскийАдрес(XDTOАдрес) Тогда
			Возврат Список;
		КонецЕсли;
		
		АдресРФ = XDTOАдрес.Состав;
		
	ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		АдресРФ = XDTOАдрес;
		
	Иначе
		Возврат Список;
		
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Индекс", ПочтовыйИндексАдреса(АдресРФ) );
	
	ДобавитьЗначение(Список, "Регион", АдресРФ.СубъектРФ);
	ДобавитьЗначение(Список, "КодРегиона", КодРегиона(АдресРФ.СубъектРФ) );
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РегионСокращение", КонтактнаяИнформацияКлиентСервер.Сокращение(АдресРФ.СубъектРФ));
	КонецЕсли;
	
	Район = РайонАдреса(АдресРФ);
	ДобавитьЗначение(Список, "Район", Район);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РайонСокращение", КонтактнаяИнформацияКлиентСервер.Сокращение(Район));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Город", АдресРФ.Город);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "ГородСокращение", КонтактнаяИнформацияКлиентСервер.Сокращение(АдресРФ.Город));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "НаселенныйПункт", АдресРФ.НаселПункт);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "НаселенныйПунктСокращение", КонтактнаяИнформацияКлиентСервер.Сокращение(АдресРФ.НаселПункт));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Улица", АдресРФ.Улица);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "УлицаСокращение", КонтактнаяИнформацияКлиентСервер.Сокращение(АдресРФ.Улица));
	КонецЕсли;
	
	// Дом и корпус
	ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхДом(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипДома", "");
		ДобавитьЗначение(Список, "Дом",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипДома", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Дом",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхСтроение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
			ДобавитьЗначение(Список, "ТипКорпуса", "");
			ДобавитьЗначение(Список, "Корпус",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипКорпуса", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Корпус",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Помещения, ВариантыДанныхПомещение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКвартиры", "");
		ДобавитьЗначение(Список, "Квартира",    "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл	
			ДобавитьЗначение(Список, "ТипКвартиры", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Квартира",    СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры

Функция ЗначениеЗданияИлиПомещения(Данные, Варианты, ВсеЗначенияВарианта)
	Результат = ТаблицаЗначений("Тип, Значение");
	
	Для Каждого Вариант Из Варианты.ВариантыТипа Цикл
		Для Каждого Строка Из Данные.НайтиСтроки(Новый Структура("Тип", Вариант)) Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
			Если Не ВсеЗначенияВарианта Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НомерТелефонаВСтарыйСписокПолей(XDTOТелефон)
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(XDTOТелефон.КодСтраны,  "КодСтраны");
	Результат.Добавить(XDTOТелефон.КодГорода,  "КодГорода");
	Результат.Добавить(XDTOТелефон.Номер,      "НомерТелефона");
	Результат.Добавить(XDTOТелефон.Добавочный, "Добавочный");
	
	Возврат Результат;
КонецФункции

Функция ГруппаОшибокАдреса(ТипОшибки, Сообщение)
	Возврат Новый Структура("ТипОшибки, Сообщение, Поля", ТипОшибки, Сообщение, Новый Массив);
КонецФункции

Процедура ДобавитьОшибкуЗаполненияАдреса(Группа, ИмяПоля = "", Сообщение = "", СущностьПоля = "")
	Группа.Поля.Добавить(Новый Структура("ИмяПоля, Сообщение, СущностьПоля", ИмяПоля, Сообщение, СущностьПоля));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Реализация КЛАДР
//

//  Возвращает общий серверный модуль для вызовов подсистемы КЛАДР, обеспечивает работу без подсистемы
//
Функция СерверныйМодульКЛАДР()
	
	Возврат ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
	
КонецФункции

Функция ЧастиКодаКЛАДР(Знач ПолныйКод)
	// СС РРР ГГГ ППП УУУУ АА ДДДД
	
	Результат = Новый Структура("КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома, ПризнакАктуальности");
	
	Результат.КодДома = ПолныйКод % 10000;
	ПолныйКод = Цел(ПолныйКод/10000);
	
	Результат.ПризнакАктуальности = ПолныйКод % 100;
	ПолныйКод = Цел(ПолныйКод/100);
	
	Результат.КодУлицы = ПолныйКод % 10000;
	ПолныйКод = Цел(ПолныйКод/10000);
	
	Результат.КодНаселенногоПункта = ПолныйКод % 1000;
	ПолныйКод = Цел(ПолныйКод/1000);
	
	Результат.КодГорода = ПолныйКод % 1000;
	ПолныйКод = Цел(ПолныйКод/1000);
	
	Результат.КодРайона = ПолныйКод % 1000;
	ПолныйКод = Цел(ПолныйКод/1000);
	
	Результат.КодРегиона = ПолныйКод;
	
	Возврат Результат;
КонецФункции        

Функция РезультатыАвтоПодбораНаселенногоПунктаКЛАДР(Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных, ВыбиратьСтрок)
	Результат = Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Истина, Новый СписокЗначений);
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросРезультатыАвтоПодбораНаселенногоПунктаКЛАДР(ВыбиратьСтрок, СкрыватьНеактуальныеАдреса);
	
	СтрокаПодобия = ЗамаскироватьСпецсимволы(Текст);
	Запрос.УстановитьПараметр("НачалоТекста", СтрокаПодобия + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат.СлишкомМногоДанных = Выборка.Количество() > ВыбиратьСтрок;
	ДанныеВыбора = Результат.ДанныеВыбора;
	
	ПредупреждениеНеактуальности = НСтр("ru = 'Адрес ""%1"" неактуален.'");
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	УникальныеПредставления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ПолноеНаименование = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			Выборка.НаселенныеПунктыНаименование, Выборка.НаселенныеПунктыСокращение,
			Выборка.ГородаНаименование,  Выборка.ГородаСокращение,
			Выборка.РайоныНаименование,  Выборка.РайоныСокращение,
			Выборка.РегионыНаименование, Выборка.РегионыСокращение);
			
		// Одинаковые наименования дополняем почтовым индексом и альтернативными наименованиями
		ПредставлениеВСписке = ПолноеНаименование;
		Если УникальныеПредставления[ПредставлениеВСписке] <> Неопределено Тогда
			ПочтовыйИндекс = СокрЛП(Выборка.Индекс);
			Если ПустаяСтрока(ПочтовыйИндекс) Тогда
				Описание = "";
			Иначе
				Описание = СтрЗаменить(НСтр("ru = 'индекс: %1'"), "%1", ПочтовыйИндекс);
			КонецЕсли;
			АльтернативныеНазвания = СокрЛП(Выборка.АльтернативныеНазвания);
			Если Не ПустаяСтрока(АльтернативныеНазвания) Тогда
				Описание = Описание + ", " + АльтернативныеНазвания;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Описание) Тогда
				ПредставлениеВСписке = ПредставлениеВСписке + " (" + Описание + ")";
			КонецЕсли;
		КонецЕсли;
		УникальныеПредставления[ПредставлениеВСписке] = Истина;
			
		Если Выборка.Неактуален Тогда
			ТекстПредупреждения = СтрЗаменить(ПредупреждениеНеактуальности, "%1", ПолноеНаименование);
			Пометка  = Истина;
			Картинка = КартинкаНеактуальности;
		Иначе
			ТекстПредупреждения = Неопределено;
			Пометка  = Ложь;
			Картинка = КартинкаАктуальности;
		КонецЕсли;
		
		Если ПредупреждатьОНеактуальных Тогда
			ДанныеВыбора.Добавить(
				Новый Структура("Предупреждение, Значение", 
					ТекстПредупреждения, Новый Структура("Код, Представление, МожноЗагружатьРегион", Выборка.Код, ПолноеНаименование, Выборка.МожноЗагружатьРегион)
				), 
				ПредставлениеВСписке, Пометка, Картинка
			);
		Иначе
			ДанныеВыбора.Добавить(ПолноеНаименование, ПредставлениеВСписке, Пометка, Картинка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция РезультатыАвтоПодбораУлицыКЛАДР(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ПредупреждатьОНеактуальных, ВыбиратьСтрок)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросРезультатыАвтоПодбораУлицыКЛАДР(ВыбиратьСтрок, СкрыватьНеактуальныеАдреса);
	
	Запрос.УстановитьПараметр("Код", КодНаселенногоПункта);
	
	СтрокаПоиска = ЗамаскироватьСпецсимволы(Текст);
	Запрос.УстановитьПараметр("НачалоСтроки", СтрокаПоиска +  "%");         // Начало строки
	Запрос.УстановитьПараметр("НачалоСлова",  "% " + СтрокаПоиска + "%");   // Начало слова
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПредупреждениеНеактуальности = НСтр("ru = 'Адрес ""%1"" неактуален.'");
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	УникальныеПредставления = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПолноеНаименование = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.Наименование, Выборка.Сокращение);
		
		// Одинаковые наименования дополняем почтовым индексом и альтернативными наименованиями
		ПредставлениеВСписке = ПолноеНаименование;
		Если УникальныеПредставления[ПредставлениеВСписке] <> Неопределено Тогда
			ПочтовыйИндекс = СокрЛП(Выборка.Индекс);
			Если ПустаяСтрока(ПочтовыйИндекс) Тогда
				Описание = "";
			Иначе
				Описание = СтрЗаменить(НСтр("ru = 'индекс: %1'"), "%1", ПочтовыйИндекс);
			КонецЕсли;
			АльтернативныеНазвания = СокрЛП(Выборка.АльтернативныеНазвания);
			Если Не ПустаяСтрока(АльтернативныеНазвания) Тогда
				Описание = Описание + ", " + АльтернативныеНазвания;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Описание) Тогда
				ПредставлениеВСписке = ПредставлениеВСписке + " (" + Описание + ")";
			КонецЕсли;
		КонецЕсли;
		УникальныеПредставления[ПредставлениеВСписке] = Истина;
		
		Если Выборка.Неактуален Тогда
			ТекстПредупреждения = СтрЗаменить(ПредупреждениеНеактуальности, "%1", ПолноеНаименование);
			Пометка  = Истина;
			Картинка = КартинкаНеактуальности;
		Иначе
			ТекстПредупреждения = Неопределено;
			Пометка  = Ложь;
			Картинка = КартинкаАктуальности;
		КонецЕсли;
		
		Если ПредупреждатьОНеактуальных Тогда
			ДанныеВыбора.Добавить(
				Новый Структура("Предупреждение, Значение", 
					ТекстПредупреждения, Новый Структура("Код, Представление", Выборка.Код, ПолноеНаименование)
				), 
				ПредставлениеВСписке, Пометка, Картинка
			);
		Иначе
			ДанныеВыбора.Добавить(ПолноеНаименование, ПредставлениеВСписке, Пометка, Картинка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Выборка.Количество() > ВыбиратьСтрок, ДанныеВыбора);
	
КонецФункции

Функция НаселенныеПунктыПоПредставлениюКЛАДР(Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок, УточняющаяУлица)
	
	// В противоположность к "РезультатыАвтоПодбораНаселенногоПунктаКЛАДР"
	// 1) Разбиваем на части через ","
	// 2) У каждой части отсекаем и выбрасываем слева одно слово до пробела - это сокращение
	// 3) Пробуем найти все варианты по равенству
	
	ЧастиАдреса = КонтактнаяИнформацияКлиентСервер.ЧастиАдреса(Текст);
	Результат = Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Истина, Новый СписокЗначений);
	
	ДополнительныхСтрокПоиска = ЧастиАдреса.ВГраница();
	Если ДополнительныхСтрокПоиска < 0 Тогда
		// Пустые исходные данные
		Возврат Результат;
	ИначеЕсли ДополнительныхСтрокПоиска = 0 Тогда
		ЧастьАдреса = ЧастиАдреса[0];
		Если ПустаяСтрока(ЧастьАдреса.Сокращение) И СтрДлина(ЧастьАдреса.Наименование) < 3 Тогда
			// Недостаточно исходных данных
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросНаселенныеПунктыПоПредставлениюКЛАДР(ЧастиАдреса, ВыбиратьСтрок, СкрыватьНеактуальныеАдреса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат.СлишкомМногоДанных = Выборка.Количество() > ВыбиратьСтрок;
	ДанныеВыбора = Результат.ДанныеВыбора;
	
	ПредупреждениеНеактуальности = НСтр("ru = 'Населенный пункт неактуален.'");
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ПолноеНаименование = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			Выборка.НаселенныеПунктыНаименование, Выборка.НаселенныеПунктыСокращение,
			Выборка.ГородаНаименование,  Выборка.ГородаСокращение,
			Выборка.РайоныНаименование,  Выборка.РайоныСокращение,
			Выборка.РегионыНаименование, Выборка.РегионыСокращение);
		
		Если Выборка.Неактуален Тогда
			ТекстПредупреждения = ПредупреждениеНеактуальности;
			Пометка  = Истина;
			Картинка = КартинкаНеактуальности;
		Иначе
			ТекстПредупреждения = Неопределено;
			Пометка  = Ложь;
			Картинка = КартинкаАктуальности;
		КонецЕсли;
		
		СписокРеквизитов = СписокРеквизитовНаселенныйПунктКЛАДР();
		СписокРеквизитов.НаселенныйПункт.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.НаселенныеПунктыНаименование, Выборка.НаселенныеПунктыСокращение);
		СписокРеквизитов.НаселенныйПункт.КодКлассификатора = Выборка.НаселенныеПунктыКод;
		СписокРеквизитов.НаселенныйПункт.Наименование      = Выборка.НаселенныеПунктыНаименование;
		СписокРеквизитов.НаселенныйПункт.Сокращение        = Выборка.НаселенныеПунктыСокращение;
		
		СписокРеквизитов.Город.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.ГородаНаименование, Выборка.ГородаСокращение);
		СписокРеквизитов.Город.КодКлассификатора = Выборка.ГородаКод;
		СписокРеквизитов.Город.Наименование      = Выборка.ГородаНаименование;
		СписокРеквизитов.Город.Сокращение        = Выборка.ГородаСокращение;
		
		СписокРеквизитов.Район.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.РайоныНаименование, Выборка.РайоныСокращение);
		СписокРеквизитов.Район.КодКлассификатора = Выборка.РайоныКод;
		СписокРеквизитов.Район.Наименование      = Выборка.РайоныНаименование;
		СписокРеквизитов.Район.Сокращение        = Выборка.РайоныСокращение;
		
		СписокРеквизитов.Регион.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.РегионыНаименование, Выборка.РегионыСокращение);
		СписокРеквизитов.Регион.КодКлассификатора = Выборка.РегионыКод;
		СписокРеквизитов.Регион.Наименование      = Выборка.РегионыНаименование;
		СписокРеквизитов.Регион.Сокращение   = Выборка.РегионыСокращение;
		
		ДанныеВыбора.Добавить(Новый Структура("Предупреждение, Значение", ТекстПредупреждения,
			Новый Структура("Код, Представление, СписокРеквизитов",
				Выборка.Код, ПолноеНаименование, СписокРеквизитов
			)), ПолноеНаименование, Пометка, Картинка);
	КонецЦикла;
	
	// Необходимость уточнения
	ИндексПоследнегоЭлемента = ДанныеВыбора.Количество() - 1;
	Если ПустаяСтрока(УточняющаяУлица) = Неопределено Или ИндексПоследнегоЭлемента = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выбрасываем варианты у которых нет уточняющей улицы
	Пока ИндексПоследнегоЭлемента >=0 Цикл
		КодНаселенного = ДанныеВыбора[ИндексПоследнегоЭлемента].Значение.Значение.Код;
		ВариантыУлиц = УлицыПоПредставлениюКЛАДР(КодНаселенного, УточняющаяУлица, СкрыватьНеактуальныеАдреса, 1);
		Если ВариантыУлиц.ДанныеВыбора.Количество() = 0 Тогда
			ДанныеВыбора.Удалить(ИндексПоследнегоЭлемента);
		КонецЕсли;
		ИндексПоследнегоЭлемента = ИндексПоследнегоЭлемента - 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УлицыПоПредставлениюКЛАДР(КодНаселенногоПункта, Текст, СкрыватьНеактуальныеАдреса, ВыбиратьСтрок)
	
	ЧастиАдреса = КонтактнаяИнформацияКлиентСервер.ЧастиАдреса(Текст);
	Результат = Новый Структура("СлишкомМногоДанных, ДанныеВыбора", Истина, Новый СписокЗначений);
	
	КоличествоСтрокПоиска = ЧастиАдреса.ВГраница();
	Если КоличествоСтрокПоиска  < 0 Тогда
		// Пустые исходные данные
		Возврат Результат;
	ИначеЕсли КоличествоСтрокПоиска = 0 Тогда
		ЧастьАдреса = ЧастиАдреса[0];
		Если ПустаяСтрока(ЧастьАдреса.Сокращение) И СтрДлина(ЧастьАдреса.Наименование) < 3 Тогда
			// Недостаточно исходных данных
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросУлицыПоПредставлениюКЛАДР(ЧастиАдреса, ВыбиратьСтрок, СкрыватьНеактуальныеАдреса);
	
	// Оставшиеся параметры
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	
	СтрокаПоиска = ЗамаскироватьСпецсимволы(Текст);
	Запрос.УстановитьПараметр("НачалоСтроки", СтрокаПоиска +  "%");         // Начало строки
	Запрос.УстановитьПараметр("НачалоСлова",  "% " + СтрокаПоиска + "%");   // Начало слова
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВыбора = Результат.ДанныеВыбора;
	
	ПредупреждениеНеактуальности = НСтр("ru = 'Улица неактуальна.'");
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ПолноеНаименование = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			Выборка.Наименование, Выборка.Сокращение);
		
		Если Выборка.Неактуален Тогда
			ТекстПредупреждения = ПредупреждениеНеактуальности;
			Пометка  = Истина;
			Картинка = КартинкаНеактуальности;
		Иначе
			ТекстПредупреждения = Неопределено;
			Пометка  = Ложь;
			Картинка = КартинкаАктуальности;
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Новый Структура("Предупреждение, Значение", ТекстПредупреждения,
			Новый Структура("Код, Представление",
				Выборка.Код, ПолноеНаименование
			)), ПолноеНаименование, Пометка, Картинка);
	КонецЦикла;
	
	Результат.СлишкомМногоДанных = Выборка.Количество() > ВыбиратьСтрок;
	Возврат Результат;
КонецФункции

Функция ЯвляетсяПотомкомКЛАДР(КодОбъекта, КодРодителя)
	СтруктураРодителя = ЧастиКодаКЛАДР(КодРодителя);
	СтруктураОбъекта  = ЧастиКодаКЛАДР(КодОбъекта);
	
	Если СтруктураОбъекта.КодУлицы <> 0 Тогда
		Возврат СтруктураОбъекта.КодНаселенногоПункта = СтруктураРодителя.КодНаселенногоПункта
		И СтруктураОбъекта.КодГорода = СтруктураРодителя.КодГорода
		И СтруктураОбъекта.КодРайона = СтруктураРодителя.КодРайона
		И СтруктураОбъекта.КодРегиона = СтруктураРодителя.КодРегиона
		
	ИначеЕсли СтруктураОбъекта.КодНаселенногоПункта <> 0 Тогда
		Возврат СтруктураОбъекта.КодГорода = СтруктураРодителя.КодГорода
		И СтруктураОбъекта.КодРайона = СтруктураРодителя.КодРайона
		И СтруктураОбъекта.КодРегиона = СтруктураРодителя.КодРегиона
		
	ИначеЕсли СтруктураОбъекта.КодГорода <> 0 Тогда
		Возврат СтруктураОбъекта.КодРайона = СтруктураРодителя.КодРайона
		И СтруктураОбъекта.КодРегиона = СтруктураРодителя.КодРегиона
		
	ИначеЕсли СтруктураОбъекта.КодРайона <> 0 Тогда
		Возврат СтруктураОбъекта.КодРегиона = СтруктураРодителя.КодРегиона
		
	ИначеЕсли СтруктураОбъекта.КодРегиона <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает или пустую структуру-заготовку, или заполненную структуру по коду
Функция СписокРеквизитовНаселенныйПунктКЛАДР(Код = Неопределено)
	
	// Первый уровень - внутренние идентификаторы
	Результат = Новый Структура;
	Результат.Вставить("Регион",          ЭлементАдреснойСтруктуры(НСтр("ru = 'Регион'"),    "СубъектРФ") );
	Результат.Вставить("Район",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Район'"),     "СвРайМО/Район") );
	Результат.Вставить("Город",           ЭлементАдреснойСтруктуры(НСтр("ru = 'Город'"),     "Город") );
	Результат.Вставить("НаселенныйПункт", ЭлементАдреснойСтруктуры(НСтр("ru = 'Нас.пункт'"), "НаселПункт", ,Истина));
	
	// Подсказки для интерфейса
	Результат.Регион.Вставить("Подсказка",          НСтр("ru = 'Регион адреса'"));
	Результат.Район.Вставить("Подсказка",           НСтр("ru = 'Район адреса'"));
	Результат.Город.Вставить("Подсказка",           НСтр("ru = 'Город адреса'"));
	Результат.НаселенныйПункт.Вставить("Подсказка", НСтр("ru = 'Населенный пункт адреса'"));
	
	Если Код = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросСписокРеквизитовНаселенныйПунктКЛАДР();
	
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.НаселенныйПункт.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.НаселенныеПунктыНаименование, Выборка.НаселенныеПунктыСокращение);
		Результат.НаселенныйПункт.КодКлассификатора = Выборка.НаселенныеПунктыКод;
		Результат.НаселенныйПункт.Наименование      = Выборка.НаселенныеПунктыНаименование;
		Результат.НаселенныйПункт.Сокращение        = Выборка.НаселенныеПунктыСокращение;
		
		Результат.Город.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.ГородаНаименование, Выборка.ГородаСокращение);
		Результат.Город.КодКлассификатора = Выборка.ГородаКод;
		Результат.Город.Наименование      = Выборка.ГородаНаименование;
		Результат.Город.Сокращение        = Выборка.ГородаСокращение;
		
		Результат.Район.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.РайоныНаименование, Выборка.РайоныСокращение);
		Результат.Район.КодКлассификатора = Выборка.РайоныКод;
		Результат.Район.Наименование      = Выборка.РайоныНаименование;
		Результат.Район.Сокращение        = Выборка.РайоныСокращение;
		
		Результат.Регион.Значение          = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.РегионыНаименование, Выборка.РегионыСокращение);
		Результат.Регион.КодКлассификатора = Выборка.РегионыКод;
		Результат.Регион.Наименование      = Выборка.РегионыНаименование;
		Результат.Регион.Сокращение        = Выборка.РегионыСокращение;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает или пустую структуру-заготовку, или заполненную структуру по коду
Функция СписокРеквизитовУлицаКЛАДР(Код = Неопределено)
	Результат = Новый Структура("Улица", ЭлементАдреснойСтруктуры("Улица", "Улица"),);
	
	Если Код <> Неопределено Тогда
		МодульКЛАДР = СерверныйМодульКЛАДР();
		Запрос = МодульКЛАДР.ЗапросСписокРеквизитовУлицаКЛАДР();
		Запрос.УстановитьПараметр("Код", Код);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Улица.Значение     = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Выборка.УлицыНаименование, Выборка.УлицыСокращение);
			Результат.Улица.Код          = Выборка.УлицыКод;
			Результат.Улица.Наименование = Выборка.УлицыНаименование;
			Результат.Улица.Сокращение   = Выборка.УлицыСокращение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СписокАвтоПодбораЭлементаАдресаКЛАДР(Текст, КодЧастиАдреса, ЧастиАдреса, ПредупреждатьОНеактуальных, ВыбиратьСтрок)
	Возврат СписокАнализаЭлементаАдресаКЛАДР(Текст, "", КодЧастиАдреса, ЧастиАдреса, Истина, ПредупреждатьОНеактуальных, ВыбиратьСтрок);
КонецФункции

Функция СписокВариантовЭлементаАдресаПоТекстуКЛАДР(Текст, КодЧастиАдреса, ЧастиАдреса, ВыбиратьСтрок = 50)
	
	ЧастиАдресаПоиска = КонтактнаяИнформацияКлиентСервер.ЧастиАдреса(Текст);
	Если ЧастиАдресаПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Наименование = СокрЛП(ЧастиАдресаПоиска[0].Наименование);
	Сокращение   = СокрЛП(ЧастиАдресаПоиска[0].Сокращение);
	
	ПоискПоПодобию = ПустаяСтрока(Сокращение);
	
	Возврат СписокАнализаЭлементаАдресаКЛАДР(Наименование, Сокращение, КодЧастиАдреса, ЧастиАдреса, ПоискПоПодобию, Истина, ВыбиратьСтрок);
КонецФункции

Функция СписокАнализаЭлементаАдресаКЛАДР(Наименование, Сокращение, КодЧастиАдреса, ЧастиАдреса, ПоискПоПодобию = Истина, ПредупреждатьОНеактуальных = Истина, ВыбиратьСтрок = 50)
	
	КодРеквизита = ВРег(КодЧастиАдреса);
	
	Если КодРеквизита = "РЕГИОН" Тогда
		Уровень = 1;    
	ИначеЕсли КодРеквизита = "РАЙОН" Тогда
		Уровень = 2;    
	ИначеЕсли КодРеквизита = "ГОРОД" Тогда
		Уровень = 3;
	ИначеЕсли КодРеквизита = "НАСЕЛЕННЫЙПУНКТ" Тогда
		Уровень = 4;
	ИначеЕсли КодРеквизита = "УЛИЦА" Тогда
		Уровень = 5;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросСписокАнализаЭлементаАдресаКЛАДР(ЧастиАдреса, Уровень, Наименование, Сокращение, ПоискПоПодобию, ВыбиратьСтрок);
	
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредупреждениеНеактуальности = НСтр("ru = 'Адрес ""%1"" неактуален.'");
	КартинкаНеактуальности = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КартинкаАктуальности   = Неопределено;
	
	УникальныеПредставления = Новый Соответствие;
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		ПолноеНаименование = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			Выборка.АдресаНаименование, Выборка.АдресаСокращение);
			
		// Одинаковые наименования дополняем почтовым индексом и альтернативными наименованиями
		ПредставлениеВСписке = ПолноеНаименование;
		Если УникальныеПредставления[ПредставлениеВСписке] <> Неопределено Тогда
			ПочтовыйИндекс = СокрЛП(Выборка.Индекс);
			Если ПустаяСтрока(ПочтовыйИндекс) Тогда
				Описание = "";
			Иначе
				Описание = СтрЗаменить(НСтр("ru = 'индекс: %1'"), "%1", ПочтовыйИндекс);
			КонецЕсли;
			АльтернативныеНазвания = СокрЛП(Выборка.АльтернативныеНазвания);
			Если Не ПустаяСтрока(АльтернативныеНазвания) Тогда
				Описание = Описание + ", " + АльтернативныеНазвания;
			КонецЕсли;
			
			Если Не ПустаяСтрока(Описание) Тогда
				ПредставлениеВСписке = ПредставлениеВСписке + " (" + Описание + ")";
			КонецЕсли;
		КонецЕсли;
		УникальныеПредставления[ПредставлениеВСписке] = Истина;
			
		Если Выборка.Неактуален Тогда
			ТекстПредупреждения = СтрЗаменить(ПредупреждениеНеактуальности, "%1", ПолноеНаименование);
			Пометка  = Истина;
			Картинка = КартинкаНеактуальности;
		Иначе
			ТекстПредупреждения = Неопределено;
			Пометка  = Ложь;
			Картинка = КартинкаАктуальности;
		КонецЕсли;
		
		Если ПредупреждатьОНеактуальных Тогда
			
			ДанныеСтроки = Новый Структура(
				"Код, Представление, ПолноеНаименование, Наименование, Сокращение, МожноЗагружатьРегион",
				Выборка.Код, ПолноеНаименование, ПолноеНаименование, 
				Выборка.АдресаНаименование, Выборка.АдресаСокращение, Выборка.МожноЗагружатьРегион
			);
			
			ДанныеВыбора.Добавить(
				Новый Структура("Предупреждение, Значение", ТекстПредупреждения, ДанныеСтроки),
				ПредставлениеВСписке, Пометка, Картинка
			);
			
		Иначе
			ДанныеВыбора.Добавить(ПолноеНаименование, ПредставлениеВСписке, Пометка, Картинка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
КонецФункции

Процедура УстановитьНаселенныйПунктАдресаПоКодуКЛАДР(XDTOАдресРФ, КодКлассификатора)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Если МодульКЛАДР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКЛАДР = Новый Структура;
	МодульКЛАДР.ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодКлассификатора, СтруктураКЛАДР);
	XDTOАдресРФ.СубъектРФ = СокрЛП(СтруктураКЛАДР.Регион);
	РайонАдреса(XDTOАдресРФ, СокрЛП(СтруктураКЛАДР.Район));
	XDTOАдресРФ.Город = СокрЛП(СтруктураКЛАДР.Город);
	XDTOАдресРФ.НаселПункт = СокрЛП(СтруктураКЛАДР.НаселенныйПункт);
	
КонецПроцедуры

Процедура УстановитьУлицуАдресаПоКодуКЛАДР(XDTOАдресРФ, КодКлассификатора)
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Если МодульКЛАДР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКЛАДР = Новый Структура;
	МодульКЛАДР.ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодКлассификатора, СтруктураКЛАДР);
	Если Не ПустаяСтрока(СтруктураКЛАДР.Улица) Тогда
		XDTOАдресРФ.Улица = СтруктураКЛАДР.Улица;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьОшибкиАдресаКЛАДР(XDTOАдресРФ, Результат)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Если МодульКЛАДР = Неопределено Тогда
		// Нет классификатора КЛАДР
		Возврат;
	КонецЕсли;
	
	РеквизитыПроверки = СписокРеквизитовАдресаКЛАДР();
	
	СущностьПоляРегион = НСтр("ru = 'Субъект РФ'");
	ИмяРеквизитаРегион = "Регион";
	ПутьXPathРегион    = РеквизитыПроверки[ИмяРеквизитаРегион].ПутьXPath;
	
	Если МодульКЛАДР.ЧислоЗаполненныхАдресныхОбъектов() = 0 Тогда
		// Классификатор КЛАДР не загружен ни по одному региону
		Результат.Добавить(Новый Структура("СущностьПоля, ПутьXPath", СущностьПоляРегион, ПутьXPathРегион),
			НСтр("ru = 'Адресный классификатор не загружен.'"));
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураКЛАДРПоАдресуРФ(XDTOАдресРФ);
	
	// Проверим регион
	КодРегиона = КодРегионаКЛАДР(Данные.Регион);
	Если ПустаяСтрока(КодРегиона) Тогда
		// Переданное значение - не регион с точки зрения КЛАДР
		Результат.Добавить(Новый Структура("СущностьПоля, ПутьXPath", СущностьПоляРегион, ПутьXPathРегион),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Регион ""%1"" не является субъектом РФ по классификатору'"), 
				Данные.Регион));
		Возврат;
	КонецЕсли;
	
	// Проверим классификатор на загруженность по региону
	Если Не МодульКЛАДР.АдресныйЭлементЗагружен(Данные.Регион) Тогда
		Результат.Добавить(Новый Структура("СущностьПоля, ПутьXPath", СущностьПоляРегион, ПутьXPathРегион), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресный классификатор по региону ""%1"" не загружен'"),
				Данные.Регион));
		Возврат;
	КонецЕсли;
		
	// Проверим на соответсвие частей классификатору
	СтруктураПроверки = МодульКЛАДР.ПроверитьСоответствиеАдресаКЛАДРу(
		Данные.Индекс, Данные.Регион, Данные.Район, Данные.Город, Данные.НаселенныйПункт, Данные.Улица, 
		Данные.Дом, Данные.Корпус);
	Если СтруктураПроверки = Неопределено Или Не СтруктураПроверки.ЕстьОшибки Тогда
		// Нет ошибок, адрес корректен
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураПроверки.СтруктураОшибок Цикл
		ИмяРеквизита = Элемент.Ключ;
		Если РеквизитыПроверки.Свойство(ИмяРеквизита) Тогда
			Результат.Добавить(
				Новый Структура("СущностьПоля, ПутьXPath", Элемент.Значение, РеквизитыПроверки[ИмяРеквизита].ПутьXPath),
				Элемент.Значение);
		Иначе
			Результат.Добавить(
				Новый Структура("СущностьПоля, ПутьXPath"),
				Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КодОбъектаПоЧастямАдресаКЛАДР(ЧастиАдреса, СкрыватьНеактуальные = Ложь) 
	Перем ЗначениеЧастиАдреса;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Если МодульКЛАДР = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЧастиАдреса.Свойство("Улица", ЗначениеЧастиАдреса) Тогда
		Улица = СокрЛП(ЗначениеЧастиАдреса.Значение);
	Иначе
		Улица = "";
	КонецЕсли;
	
	Если ЧастиАдреса.Свойство("НаселенныйПункт", ЗначениеЧастиАдреса) Тогда
		НаселенныйПункт = СокрЛП(ЗначениеЧастиАдреса.Значение);
	Иначе
		НаселенныйПункт = "";
	КонецЕсли;
	
	Если ЧастиАдреса.Свойство("Город", ЗначениеЧастиАдреса) Тогда
		Город = СокрЛП(ЗначениеЧастиАдреса.Значение);
	Иначе
		Город = "";
	КонецЕсли;
	
	Если ЧастиАдреса.Свойство("Район", ЗначениеЧастиАдреса) Тогда
		Район = СокрЛП(ЗначениеЧастиАдреса.Значение);
	Иначе
		Район = "";
	КонецЕсли;
	
	Если ЧастиАдреса.Свойство("Регион", ЗначениеЧастиАдреса) Тогда
		Регион = СокрЛП(ЗначениеЧастиАдреса.Значение);
	Иначе
		Регион = "";
	КонецЕсли;
	
	ОбъектАдреса = Новый Структура("Индекс, НомерДома, НомерКорпуса");
	ОбъектАдреса.Вставить("Регион",          Регион);
	ОбъектАдреса.Вставить("Район",           Район);
	ОбъектАдреса.Вставить("Город",           Город);
	ОбъектАдреса.Вставить("НаселенныйПункт", НаселенныйПункт);
	ОбъектАдреса.Вставить("Улица",           Улица);
	
	РезультатыАнализа = МодульКЛАДР.АнализСоответствияАдресаКлассификатору(ОбъектАдреса);
	Варианты = РезультатыАнализа.Варианты;
	Если Не ПустаяСтрока(Улица) Тогда
		Если Варианты.Найти(ЧастиАдреса.Улица.КодКлассификатора, "Код") <> Неопределено  Тогда
			Возврат ЧастиАдреса.Улица.КодКлассификатора;
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(НаселенныйПункт) Тогда
		Если Варианты.Найти(ЧастиАдреса.НаселенныйПункт.КодКлассификатора, "Код") <> Неопределено Тогда
			Возврат ЧастиАдреса.НаселенныйПункт.КодКлассификатора;
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(Город) Тогда
		Если Варианты.Найти(ЧастиАдреса.Город.КодКлассификатора, "Код") <> Неопределено Тогда
			Возврат ЧастиАдреса.Город.КодКлассификатора;
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(Район) Тогда
		Если Варианты.Найти(ЧастиАдреса.Район.КодКлассификатора, "Код") <> Неопределено Тогда
			Возврат ЧастиАдреса.Район.КодКлассификатора;
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(Регион) Тогда
		Если Варианты.Найти(ЧастиАдреса.Регион.КодКлассификатора, "Код") <> Неопределено Тогда
			Возврат ЧастиАдреса.Регион.КодКлассификатора;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция КодРегионаКЛАДР(ПолноеНаименование)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросКодРегионаКЛАДР();
	
	Параметры = КонтактнаяИнформацияКлиентСервер.НаименованиеСокращение(ПолноеНаименование);
	Запрос.УстановитьПараметр("Наименование", Параметры.Наименование);
	Запрос.УстановитьПараметр("Сокращение",   Параметры.Сокращение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Формат(Выборка.Код, "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция РегионКодаКЛАДР(Знач Код)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросРегионКодаКЛАДР();
		
	Если ТипЗнч(Код) = Тип("Число") Тогда
		КодЧислом = Код;
	Иначе 
		ТипЧисло = Новый ОписаниеТипов("Число");
		КодЧислом = ТипЧисло.ПривестиЗначение(Код);
	КонецЕсли;
	Запрос.УстановитьПараметр("Код", КодЧислом);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регион;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ВсеРегионыКЛАДР() 
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросВсеРегионыКЛАДР();
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Код");
	Результат.Индексы.Добавить("Представление");
	
	Возврат Результат;
КонецФункции

Функция ОпределитьПочтовыйИндексАдресаКЛАДР(XDTOАдресРФ)
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Если МодульКЛАДР = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = СтруктураКЛАДРПоАдресуРФ(XDTOАдресРФ);
	
	Индекс = МодульКЛАДР.ИндексАдреса(
		Данные.Регион, Данные.Район, Данные.Город, Данные.НаселенныйПункт, Данные.Улица, 
		Данные.Дом, Данные.Корпус);
		
	Если Не ПустаяСтрока(Индекс) Тогда
		Возврат СокрЛП(Индекс);
	КонецЕсли;
	
КонецФункции

Функция АдресаПоИндексуКЛАДР(Знач Индекс, Знач ДополнительныеПараметрыПоиска = Неопределено)
	
	ПараметрыПоиска = Новый Структура("СкрыватьНеактуальные, ВыбиратьСтрок", Ложь, 0);
	Если ДополнительныеПараметрыПоиска <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДополнительныеПараметрыПоиска);
	КонецЕсли;
	
	СкрыватьНеактуальные = ПараметрыПоиска.СкрыватьНеактуальные;
	ВыбиратьСтрок        = ПараметрыПоиска.ВыбиратьСтрок;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросАдресаПоИндексуКЛАДР(ВыбиратьСтрок, СкрыватьНеактуальные);
	
	Запрос.УстановитьПараметр("ПочтовыйИндекс", СокрЛП(Индекс));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	// Общая часть представления
	Данные = Результаты[2].Выгрузить();
	Строка = Данные[0];
	ОбщаяЧастьПредставления = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
		Строка.УлицаНаименование, Строка.УлицаСокращение,
		Строка.НаселенныйПунктНаименование, Строка.НаселенныйПунктСокращение,
		Строка.ГородНаименование, Строка.ГородСокращение,
		Строка.РайонНаименование, Строка.РайонСокращение,
		Строка.РегионНаименование, Строка.РегионСокращение
	);
	ОбщиеПоля = Новый Структура;
	Для Каждого Колонка Из Данные.Колонки Цикл
		Имя = Колонка.Имя;
		Если Не ПустаяСтрока(Строка[Имя]) Тогда
			ОбщиеПоля.Вставить(Имя, "");
		КонецЕсли;
	КонецЦикла;
	
	// Весь результат
	Данные = Результаты[1].Выгрузить();
	КолонкиДанных = Данные.Колонки;
	КолонкиДанных.Вставить(0, "Представление", Новый ОписаниеТипов("Строка") );
	
	Для Каждого Строка Из Данные Цикл
		// Очищаем общие поля
		ЗаполнитьЗначенияСвойств(Строка, ОбщиеПоля);
		// По оставшимся полям строим представление
		Строка.Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
			Строка.УлицаНаименование, Строка.УлицаСокращение,
			Строка.НаселенныйПунктНаименование, Строка.НаселенныйПунктСокращение,
			Строка.ГородНаименование, Строка.ГородСокращение,
			Строка.РайонНаименование, Строка.РайонСокращение,
			Строка.РегионНаименование, Строка.РегионСокращение
		);
	КонецЦикла;
	
	// Удаляем ненужные колонки
	Позиция = КолонкиДанных.Количество() - 1;
	Пока Позиция > 3 Цикл 
		КолонкиДанных.Удалить(Позиция);
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Возврат Новый Структура("Данные, ОбщаяЧастьПредставления, СлишкомМногоДанных", Данные, ОбщаяЧастьПредставления,
		(ВыбиратьСтрок > 0) И (Данные.Количество() > ВыбиратьСтрок) );
КонецФункции

// Конструктор таблицы значений
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

// Конструктор внутренней структуры элемента адреса
Функция ЭлементАдреснойСтруктуры(Заголовок, ПутьXPath, Значение = Неопределено, Предопределенный = Ложь)
	Возврат Новый Структура("Заголовок, ПутьXPath, Значение, Предопределенный, Наименование, Сокращение, КодКлассификатора", 
		Заголовок, ПутьXPath, Значение, Предопределенный);
КонецФункции

// Возвращает строку для поиска в операторе ПОДОБНО
Функция ЗамаскироватьСпецсимволы(Текст)
	Результат = Текст;
	Спецсимвол = "\";
	Служебные  = "%_[]^" + Спецсимвол;
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СписокРеквизитовАдресаКЛАДР() 
	
	Результат = СписокРеквизитовНаселенныйПунктКЛАДР();
	Для Каждого КлючЗначение Из СписокРеквизитовУлицаКЛАДР() Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	// Индекс
	Результат.Вставить("Индекс", ЭлементАдреснойСтруктуры("Индекс", 
		КонтактнаяИнформацияКлиентСерверПовтИсп.XPathПочтовогоИндекса()));
	// Дом
	Результат.Вставить("Дом", ЭлементАдреснойСтруктуры("Дом",
		КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации("Дом")));
	// Корпус
	Результат.Вставить("Корпус", ЭлементАдреснойСтруктуры("Корпус", 
		КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации("Корпус")));
	
	Возврат Результат;
КонецФункции

Функция СтруктураКЛАДРПоАдресуРФ(XDTOАдресРФ)
	Результат = Новый Структура;
	
	// Поля, известные КЛАДР
	Результат.Вставить("Индекс", ПочтовыйИндексАдреса(XDTOАдресРФ));
	Результат.Вставить("Регион", XDTOАдресРФ.СубъектРФ);
	Результат.Вставить("Район", РайонАдреса(XDTOАдресРФ));
	Результат.Вставить("Город", XDTOАдресРФ.Город);
	Результат.Вставить("НаселенныйПункт", XDTOАдресРФ.НаселПункт);
	Результат.Вставить("Улица", XDTOАдресРФ.Улица);
	
	ТаблицаЗданий = ЗданияИПомещенияАдреса(XDTOАдресРФ).Здания;
	ВсегоЗданий   = ТаблицаЗданий.Количество();
	
	// По КЛАДРу можно проверить только дом и корпус
	Дом = Неопределено;
	Для Каждого Вариант Из ВариантыДанныхДом().ВариантыТипа Цикл
		Строка = ТаблицаЗданий.Найти(Вариант, "Тип");
		Дом = ?(Строка = Неопределено, Неопределено, Строка.Значение);
		Если Не ПустаяСтрока(Дом) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("Дом", Дом);
	
	Корпус = Неопределено;
	Для Каждого Вариант Из ВариантыДанныхСтроение().ВариантыТипа Цикл
		Строка = ТаблицаЗданий.Найти(Вариант, "Тип");
		Корпус = ?(Строка = Неопределено, Неопределено, Строка.Значение);
		Если Не ПустаяСтрока(Корпус) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("Корпус", Корпус);
	
	Возврат Результат;
КонецФункции

// Внутреннее для сериализации
Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	АдресРоссийский = Истина;
	НазваниеРоссии  = ВРег(Справочники.СтраныМира.Россия.Наименование);
	
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	// Российский
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			УправлениеКонтактнойИнформациейКлиентСервер.СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс = СоздатьДопАдрЭл(АдресРФ);
			ЭлементИндекс.ТипАдрЭл = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеРоссии Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			;
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			АдресРФ.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			АдресРФ.СубъектРФ = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если АдресРФ.СвРайМО = Неопределено Тогда
				АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			АдресРФ.СвРайМО.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			АдресРФ.Город = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			АдресРФ.НаселПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			АдресРФ.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементДом.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭл(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;
	
	// Представление с приоритетами
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресРоссийский, АдресРФ, Результат.Представление);
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что переданных объект КИ содержит данные
//
// Параметры:
//     XDTOДанные - ОбъектXDTO - проверяемые данные контактной информации
//
// Возвращаемое значение:
//     Булево - флаг наличия данных
//
Функция XDTOКонтактнаяИнформацияЗаполнена(Знач XDTOДанные) Экспорт
	
	Возврат ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(XDTOДанные);
	
КонецФункции

// Параметры: Владелец - ОбъектXDTO, Неопределено
//
Функция ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Знач Владелец)
	
	Если Владелец = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Список игнорируемых при сравнении свойств текущего владельца - особенности контактной информации
	Игнорируемые = Новый Соответствие;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	ТипВладельца     = Владелец.Тип();
	
	Если ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		// Страна не влияет на заполнение при остальных пустых. Игнорируем
		Игнорируемые.Вставить(Владелец.Свойства().Получить("Страна"), Истина);
		
	ИначеЕсли ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		// Игнорируем список с пустыми значениями и возможно непустыми типами
		Список = Владелец.ПолучитьСписок("ДопАдрЭл");
		Если Список <> Неопределено Тогда
			Для Каждого СвойствоСписка Из Список Цикл
				Если ПустаяСтрока(СвойствоСписка.Значение) Тогда
					Игнорируемые.Вставить(СвойствоСписка, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Свойство Из Владелец.Свойства() Цикл
		
		Если Не Владелец.Установлено(Свойство) Или Игнорируемые[Свойство] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Свойство.ВерхняяГраница > 1 Или Свойство.ВерхняяГраница < 0 Тогда
			Список = Владелец.ПолучитьСписок(Свойство);
			
			Если Список <> Неопределено Тогда
				Для Каждого ЭлементСписка Из Список Цикл
					Если Игнорируемые[ЭлементСписка] = Неопределено 
						И ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(ЭлементСписка) 
					Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Значение = Владелец.Получить(Свойство);
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
			Если ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Не ПустаяСтрока(Значение) Тогда
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Ложь;
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = XDTOАдрес.Получить( КонтактнаяИнформацияКлиентСерверПовтИсп.XPathНомераДополнительногоОбъектаАдресации(Тип) );
	Если Запись = Неопределено Тогда
		Запись = XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		Запись.Номер = ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение = Значение;
		
		КодТипа = КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе        
		Запись.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНомерДопАдрЭл(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭл(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭл(АдресРФ)
	СвойствоДопАдрЭл = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭл = ФабрикаXDTO.Создать(СвойствоДопАдрЭл.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭл);
	Возврат ДопАдрЭл;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

Функция ДесериализацияАдресаПоПредставлениюКЛАДР(Знач Представление)
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	ДанныеАнализа = ЧастиАдресаТаблицей(Представление);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Адрес = Результат.Состав;
	
	МодульКЛАДР = СерверныйМодульКЛАДР();
	Запрос = МодульКЛАДР.ЗапросДесериализацияАдресаПоПредставлениюКЛАДР();
	
	НаименованиеРоссии = СокрЛП(Справочники.СтраныМира.Россия.Наименование);
	
	Классификатор = Справочники.СтраныМира.ТаблицаКлассификатора();
	
	Запрос.УстановитьПараметр("СтраныКлассификатора", Классификатор.ВыгрузитьКолонку("Наименование") );
	Запрос.УстановитьПараметр("ДанныеАдреса", ДанныеАнализа);
	Запрос.УстановитьПараметр("НаименованиеРоссии", НаименованиеРоссии);
	
	РезультатАнализа = Запрос.Выполнить().Выгрузить();
	
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	
	// Просмотр будет с конца, чтобы актуальным было первое
	ЭтоРоссийскийАдрес = Истина;
	СтрокаСтраны = Неопределено;
	
	ОбработанныеУровни = Новый Соответствие;
	ВведеноВСвободнойФорме = Ложь;
	
	ТаблицаЗданийПомещений = Новый ТаблицаЗначений;
	ТаблицаЗданийПомещений.Колонки.Добавить("Тип");
	ТаблицаЗданийПомещений.Колонки.Добавить("Значение");
	
	Для Каждого Строка Из РезультатАнализа Цикл
		// Проход по классификатору, сокращения, страны, индекс
		Если Строка.НайденоПоИндексу Тогда
			ПочтовыйИндексАдреса(АдресРФ, Строка.Значение);
			Строка.Обработано = Истина;
			
		ИначеЕсли Строка.ЭтоСтранаРоссия Тогда
			ЭтоРоссийскийАдрес = Истина;
			Строка.Обработано  = Истина;
			СтрокаСтраны       = Строка;
			
		ИначеЕсли Строка.НайденоПоСтранамМира Тогда
			ЭтоРоссийскийАдрес = Ложь;
			Строка.Обработано  = Истина;
			СтрокаСтраны       = Строка;
			
		ИначеЕсли Строка.НайденоПоКлассификатору Тогда
			Уровень = Строка.УровеньПоКлассификатору;
			УстановитьЧастьВАдресеПоУровнюКЛАДР(АдресРФ, Уровень, Строка.Значение);
			Строка.Обработано = Истина;
			// Контроль повторной обработки
			Если ОбработанныеУровни[Уровень] <> Неопределено Тогда
				ВведеноВСвободнойФорме = Истина;
			КонецЕсли;
			
		ИначеЕсли Строка.НайденоПоСокращениям Тогда
			Уровень = Строка.УровеньПоСокращениям;
			УстановитьЧастьВАдресеПоУровнюКЛАДР(АдресРФ, Уровень, Строка.Значение);
			Строка.Обработано = Истина;
			// Контроль повторной обработки
			Если ОбработанныеУровни[Уровень] <> Неопределено Тогда
				ВведеноВСвободнойФорме = Истина;
			КонецЕсли;
			
		Иначе
			// Проверка на квартиру или здание
			Тип = СокрЛП(СтрЗаменить(Строка.Наименование, "№", ""));
			Если КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(Тип) <> Неопределено Тогда
				// Вставляем в начало, так как порядок результата запроса у нас обратный
				НоваяСтрока = ТаблицаЗданийПомещений.Вставить(0);
				НоваяСтрока.Значение = СокрЛП(СтрЗаменить(Строка.Сокращение, "№", ""));
				НоваяСтрока.Тип      = Тип;
				Строка.Обработано = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Смотрим на страну разбора
	Если ЭтоРоссийскийАдрес Тогда
		Адрес.Страна = НаименованиеРоссии;
		Адрес.Состав = АдресРФ;
		
		ЗданияИПомещения = Новый Структура("Здания, Помещения", ТаблицаЗданийПомещений, ТаблицаЗданийПомещений);
		ЗданияИПомещенияАдреса(АдресРФ, ЗданияИПомещения);
		
		Если ВведеноВСвободнойФорме Или РезультатАнализа.Найти(Ложь, "Обработано") <> Неопределено Тогда
			// Что-то осталось, считаем адресом в свободной форме
			АдресРФ.Адрес_По_Документу = Представление;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Адрес за пределами РФ
	Если СтрокаСтраны = Неопределено Тогда
		Адрес.Состав = Представление;
	Иначе
		Адрес.Страна = СтрокаСтраны.Значение;
		
		// Состав без страны, она остается в представлении
		Позиция = СтрокаСтраны.Начало + СтрокаСтраны.Длина;
		Длина   = СтрДлина(Представление);
		Разделители = "," + Символы.ПС;
		Пока Позиция <= Длина И Найти(Разделители, Сред(Представление, Позиция, 1)) <= 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Пока Позиция <= Длина И Найти(Разделители, Сред(Представление, Позиция, 1)) > 0 Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Адрес.Состав = СокрЛП( Лев(Представление, СтрокаСтраны.Начало -1 ) + " " + Сред(Представление, Позиция) );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЧастиАдресаТаблицей(Знач Текст)
	
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Позиция0",     ТипЧисло);
	Колонки.Добавить("Позиция",      ТипЧисло);
	Колонки.Добавить("Значение",     ТипСтрока);
	Колонки.Добавить("Наименование", ТипСтрока);
	Колонки.Добавить("Сокращение",   ТипСтрока);
	
	Колонки.Добавить("Начало", ТипЧисло);
	Колонки.Добавить("Длина",  ТипЧисло);
	
	Номер = 0;
	Для Каждого Часть Из СловаТекстаТаблицей(Текст, "," + Символы.ПС) Цикл
		Значение = СокрЛП(Часть.Значение);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Результат.Добавить();
		Строка.Значение = Значение;
		
		Строка.Позиция0 = Номер;
		Номер = Номер + 1;
		Строка.Позиция  = Номер;
		
		Строка.Начало = Часть.Начало;
		Строка.Длина  = Часть.Длина;
		
		Позиция = СтрДлина(Значение);
		Пока Позиция > 0 Цикл
			Символ = Сред(Значение, Позиция, 1);
			Если ПустаяСтрока(Символ) Тогда
				Строка.Наименование = Лев(Значение, Позиция-1);
				Прервать;
			КонецЕсли;
			Строка.Сокращение = Символ + Строка.Сокращение;
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если ПустаяСтрока(Строка.Наименование) Тогда
			Строка.Наименование = Строка.Сокращение;
			Строка.Сокращение   = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СловаТекстаТаблицей(Знач Текст, Знач Разделители = Неопределено)
	
	НачалоСлова = 0;
	Состояние   = 0;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Начало",   ТипЧисло);
	Колонки.Добавить("Длина",    ТипЧисло);
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), Найти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Строка = Результат.Добавить();
			Строка.Начало = НачалоСлова;
			Строка.Длина  = Позиция-НачалоСлова;
			Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина);
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Строка = Результат.Добавить();
		Строка.Начало = НачалоСлова;
		Строка.Длина  = Позиция-НачалоСлова;
		Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьЧастьВАдресеПоУровнюКЛАДР(XDTOАдресРФ, Знач Уровень, Знач Значение)
	
	// XPath
	Если Уровень = 1 Тогда
		Путь = "СубъектРФ";
	ИначеЕсли Уровень = 2 Тогда
		Путь = "СвРайМО/Район";
	ИначеЕсли Уровень = 3 Тогда
		Путь = "Город";
	ИначеЕсли Уровень = 4 Тогда
		Путь = "НаселПункт";
	ИначеЕсли Уровень = 5 Тогда
		Путь = "Улица";
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоПоXPath(XDTOАдресРФ, Путь, Значение);
КонецПроцедуры

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Если ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			
			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Представление с приоритетами
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		Иначе
			Результат.Представление = ПолеПредставления;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если Лев(Добавочный, 1) = "," Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если Лев(СокрЛ(Представление),1)="+" Тогда
			// Была попытка явно указать код страны, оставляем страну в покое
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Представление = Представление;
	Возврат Результат;
КонецФункции  

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или Найти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или Найти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Получение глубокого свойства объекта
Функция ЗначениеСвойстваПоXPath(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Возврат ОбъектXTDO.Получить(СтрокаСвойств);
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));     
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Установка глубокого свойства объекта
Процедура УстановитьСвойствоПоXPath(ОбъектXTDO, XPath, Значение) Экспорт
	
	// Переносов строки в XPath не ожидаем
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		ОбъектXTDO.Установить(СтрокаСвойств, Значение);
		Возврат;
	ИначеЕсли ЧислоСвойств < 1 Тогда
		Возврат;
	КонецЕсли;
		
	РодительскийОбъект = Неопределено;
	ТекущийОбъект      = ОбъектXTDO;
	Для Индекс = 1 По ЧислоСвойств Цикл
		
		ТекущееИмя = СтрПолучитьСтроку(СтрокаСвойств, Индекс);
		Если ТекущийОбъект.Установлено(ТекущееИмя) Тогда
			РодительскийОбъект = ТекущийОбъект;
			ТекущийОбъект = ТекущийОбъект.ПолучитьXDTO(ТекущееИмя);
		Иначе
			НовыйТип = ТекущийОбъект.Свойства().Получить(ТекущееИмя).Тип;
			ТипТипа = ТипЗнч(НовыйТип);
			Если ТипТипа = Тип("ТипОбъектаXDTO") Тогда
				НовыйОбъект = ФабрикаXDTO.Создать(НовыйТип);
				ТекущийОбъект.Установить(ТекущееИмя, НовыйОбъект);
				РодительскийОбъект = ТекущийОбъект;
				ТекущийОбъект = НовыйОбъект; 
			ИначеЕсли ТипТипа = Тип("ТипЗначенияXDTO") Тогда
				// Непосредственное значение
				ТекущийОбъект.Установить(ТекущееИмя, Значение);
				РодительскийОбъект = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РодительскийОбъект <> Неопределено Тогда
		РодительскийОбъект.Установить(ТекущееИмя, Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
