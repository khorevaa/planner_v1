////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Добавляет файлы перетаскиванием в список файлов.
//
// Параметры:
//  ВладелецФайла      - Ссылка - владелец файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//  МассивИменФайлов   - Массив Строк - путей к файлам.
//
Процедура ДобавитьФайлыПеретаскиванием(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач МассивИменФайлов) Экспорт
	
	ПрисоединенныеФайлыМассив = Новый Массив;
	ПоместитьВыбранныеФайлыВХранилище(
		МассивИменФайлов,
		ВладелецФайла,
		ПрисоединенныеФайлыМассив,
		ИдентификаторФормы);
	
	Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
		ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			ПрисоединенныйФайл,
			БиблиотекаКартинок.Информация32);
		
		ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
		ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), ПрисоединенныеФайлыМассив);
	КонецЕсли;
	
КонецПроцедуры

// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ПрисоединенныйФайл      - Ссылка, Неопределено - ссылка на добавленный файл, либо Неопределено, если
//                                                                              файл не был помещен;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилищеВеб(ОбработчикРезультата, Знач ВладелецФайла, Знач ИдентификаторФормы)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьВыбранныеФайлыВХранилищеВебЗавершение", ЭтотОбъект, Параметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьВыбранныеФайлыВХранилищеВеб.
Процедура ПоместитьВыбранныеФайлыВХранилищеВебЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилищаФайла = Адрес;
	ИмяФайла = ВыбранноеИмяФайла;
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	
	СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'"),
			ИмяФайла);
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	// Создание карточки Файла в базе данных.
	ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		Расширение,
		,
		,
		АдресВременногоХранилищаФайла,
		"");
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ПрисоединенныйФайл);
	
КонецПроцедуры

// Помещает отредактированные файлы в хранилище.
// Используется, как обработчик команды окончания редактирования файлов.
//
// Параметры
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если помещение не было
//                                                                          выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилище(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеРасширениеПредложено", ЭтотОбъект, Параметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ИнформацияОФайле = Неопределено;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если Файл.Существует() Тогда
			ИнформацияОФайле = ПрисоединенныеФайлыКлиент.ПоместитьФайлВХранилище(ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеВыполненоПомещение", ЭтотОбъект, ДополнительныеПараметры);
		ПоместитьФайлНаДискеВХранилищеВеб(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	Если ИнформацияОФайле = Неопределено Или ДанныеФайла.ИмяФайла = ИнформацияОФайле.ИмяФайла Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Имя выбранного файла
		           |""%1""
		           |отличается от имени файла в хранилище
		           |""%2"".
		           |
		           |Продолжить?'"),
		ИнформацияОФайле.ИмяФайла,
		ДанныеФайла.ИмяФайла);
		
	ДополнительныеПараметры.Вставить("ИнформацияОФайле", ИнформацияОФайле);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьРедактируемыйФайлНаДискеВХранилищеОтветПолучен", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

// Продолжение процедуры ПоместитьРедактируемыйФайлНаДискеВХранилище.
Процедура ПоместитьРедактируемыйФайлНаДискеВХранилищеОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Результат = Неопределено;
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Результат = ДополнительныеПараметры.ИнформацияОФайле;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
КонецПроцедуры

// Выбирает файл с диска и помещает его во временное хранилище на сервере.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если помещение не было
//                                                                          выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ВыбратьФайлНаДискеИПоместитьВХранилище(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлНаДискеИПоместитьВХранилищеРасширениеПредложено", ЭтотОбъект, Параметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ВыбратьФайлНаДискеИПоместитьВХранилище.
Процедура ВыбратьФайлНаДискеИПоместитьВХранилищеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		ИнформацияОФайле = Неопределено;
		Если ВыборФайла.Выбрать() Тогда
			ИнформацияОФайле = ПрисоединенныеФайлыКлиент.ПоместитьФайлВХранилище(ВыборФайла.ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлНаДискеИПоместитьВХранилищеВыполненоПомещение", ЭтотОбъект);
		ПоместитьФайлНаДискеВХранилищеВеб(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыбратьФайлНаДискеИПоместитьВХранилище.
Процедура ВыбратьФайлНаДискеИПоместитьВХранилищеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	
КонецПроцедуры

// Помещает файл с диска клиента во временное хранилище.
//  Аналог функции ПоместитьФайлНаДискеВХранилище
// для веб-клиента без расширения для работы с файлами.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ИнформацияОФайле - Структура, Неопределено - информация о помещенном файле. Если помещение не было
//                                                                          выполнено, то возвращается Неопределено;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
Процедура ПоместитьФайлНаДискеВХранилищеВеб(ОбработчикРезультата, Знач ДанныеФайла, Знач ИдентификаторФормы)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлНаДискеВХранилищеВебВыполненоПомещение", ЭтотОбъект, Параметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ДанныеФайла.ИмяФайла, Истина, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ПоместитьФайлНаДискеВХранилищеВеб.
Процедура ПоместитьФайлНаДискеВХранилищеВебВыполненоПомещение(Результат, АдресВременногоХранилищаФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		НовоеИмя = СтрокиПути[СтрокиПути.Количество()-2];
		НовоеРасширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
	ИначеЕсли СтрокиПути.Количество() = 1 Тогда
		НовоеИмя = СтрокиПути[0];
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(НовоеРасширение);
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Неопределено);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяФайла",                       ИмяФайла);
	ИнформацияОФайле.Вставить("Расширение",                     НовоеРасширение);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ИнформацияОФайле);
	
КонецПроцедуры

// Открывает каталог с файлом (при необходимости получает файл из хранилища).
// Используется, как обработчик команды открытия каталога с файлом.
//
// Параметры:
//  ДанныеФайла - Структура с данными файла.
//
Процедура ОткрытьКаталогСФайлом(Знач ДанныеФайла) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогСФайломРасширениеПредложено", ЭтотОбъект, Параметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ОткрытьКаталогСФайлом.
Процедура ОткрытьКаталогСФайломРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	Перем ПолноеИмяФайла;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;

	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		Файл = Новый Файл(ПолныйПуть);
		Если Не Файл.Существует() Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |отсутствует в рабочем каталоге.
				           |
				           |Получить файл из хранилища файлов?'"),
				Файл.Имя);
			ДополнительныеПараметры.Вставить("РабочийКаталогПользователя", РабочийКаталогПользователя);
			ДополнительныеПараметры.Вставить("ПолныйПуть", ПолныйПуть);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКаталогСФайломОтветПолучен", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьКаталогСФайлом.
Процедура ОткрытьКаталогСФайломОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	РабочийКаталогПользователя = ДополнительныеПараметры.РабочийКаталогПользователя;
	ПолныйПуть = ДополнительныеПараметры.ПолныйПуть;
	
	ПолноеИмяФайлаНаКлиенте = "";
	ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		ДанныеФайла.ОтносительныйПуть,
		ДанныеФайла.ДатаМодификацииУниверсальная,
		ДанныеФайла.ИмяФайла,
		РабочийКаталогПользователя,
		ПолноеИмяФайлаНаКлиенте);
		
	ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭП

// Подписывает присоединенный файл:
// - предлагает пользователю выбрать ЭП для подписания и получает данные подписи,
// - записывает файл с ЭП в хранилище.
// Используется в обработчике команды "Подписать" формы списка.
//
// Параметры:
//  ПараметрыВыполнения - Структура - содержащая параметры:
//   * ПрисоединенныйФайл     - СправочникСсылка.*ПрисоединенныеФайлы - ссылка на файл.
//   * ДанныеФайла            - Структура - данные файла.
//   * ОповещениеПользователя - Структура - параметры оповещения пользователя об успехе:
//                              Текст, НавигационнаяСсылка, Пояснение, Картинка;
//                            - Неопределено - не выводить оповещение;
//                              если свойства нет, используется стандартное оповещение.
//   * ОбработкаРезультата    - ОписаниеОповещения - при вызове передается результат типа Булево,
//                              если Истина - файл успешно подписан.
//
Процедура СформироватьПодписьФайла(ПараметрыВыполнения) Экспорт
	
	ВыбратьСертификатыЭПИСформироватьДанныеПодписи(
		Новый ОписаниеОповещения(
			"СформироватьПодписьФайлаПодписьПолучена", ЭтотОбъект, ПараметрыВыполнения),
		ПараметрыВыполнения.ПрисоединенныйФайл,
		ПараметрыВыполнения.ДанныеФайла);
	
КонецПроцедуры

// Продолжение процедуры СформироватьПодписьФайла.
Процедура СформироватьПодписьФайлаПодписьПолучена(ДанныеПодписи, ПараметрыВыполнения) Экспорт
	
	ПодписьСформирована = ДанныеПодписи <> Неопределено;
	
	Если ПодписьСформирована Тогда
		ПрисоединенныйФайл = ПараметрыВыполнения.ПрисоединенныйФайл;
		
		ПрисоединенныеФайлыСлужебныйВызовСервера.ЗанестиИнформациюОднойПодписи(
			ПрисоединенныйФайл, ДанныеПодписи);
		
		ОповеститьОбИзменении(ПрисоединенныйФайл);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПрисоединенныйФайл);
		
		Если ПараметрыВыполнения.Свойство("ОповещениеПользователя") Тогда
			Оповещение = ПараметрыВыполнения.ОповещениеПользователя;
			Если Оповещение = Неопределено Тогда
				ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ПрисоединенныйФайл);
			Иначе
				ПоказатьОповещениеПользователя(
					Оповещение.Текст,
					Оповещение.НавигационнаяСсылка,
					Оповещение.Пояснение,
					Оповещение.Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ОбработкаРезультата") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработкаРезультата, ПодписьСформирована);
	КонецЕсли;
	
КонецПроцедуры

// Формирует подпись для двоичных данных файла:
// - предлагает пользователю диалог выбора сертификатов ЭП,
// - подписывает двоичные данные присоединенного файла с целью получения подписи.
//
// Параметры:
//  ОбработчикРезультата    - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                            Параметры вызываемой процедуры:
//                             ДанныеПодписи - Структура, Неопределено - сформированная подпись, либо Неопределено, если подпись не была сформирована;
//                             ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//
Процедура ВыбратьСертификатыЭПИСформироватьДанныеПодписи(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	Если Не ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(Неопределено);
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьСертификатыЭПИСформироватьДанныеПодписиПодписьВыбрана", ЭтотОбъект, ДополнительныеПараметры);
	
	МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ПрисоединенныйФайл);
	
	ОткрытьФорму("ОбщаяФорма.УстановкаПодписиЭП", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ВыбратьСертификатыЭПИСформироватьДанныеПодписи.
Процедура ВыбратьСертификатыЭПИСформироватьДанныеПодписиПодписьВыбрана(СтруктураПараметровПодписи, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = ЭлектроннаяПодписьКлиент.СформироватьДанныеПодписи(
		МенеджерКриптографии,
		ПрисоединенныйФайл,
		ДвоичныеДанные,
		СтруктураПараметровПодписи);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ДанныеПодписи);
	
КонецПроцедуры

// Добавляет ЭП из файла(ов) на диске.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл, которому требуется добавить подпись.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ДобавитьЭПИзФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(Неопределено);
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаРасширениеПредложено", ЭтотОбъект, Параметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ДобавитьЭПИзФайла.
Процедура ДобавитьЭПИзФайлаРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаПодписиПолучены", ЭтотОбъект, ПрисоединенныйФайл);
		ПолучитьМассивПодписей(ОписаниеОповещения, ПрисоединенныйФайл, ИдентификаторФормы);
		Возврат;
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДобавитьЭПИзФайла.
Процедура ДобавитьЭПИзФайлаПодписиПолучены(МассивПодписей, ПрисоединенныйФайл) Экспорт
	
	Если МассивПодписей.Количество() > 0 Тогда
		ПрисоединенныеФайлыСлужебныйВызовСервера.ЗанестиИнформациюОПодписях(ПрисоединенныйФайл, МассивПодписей);
		ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, МассивПодписей.Количество());
	КонецЕсли;
	
КонецПроцедуры

// Возвращает подписи, для чего вызывает диалог добавления подписей.
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами
// и расширения для работы со средствами криптографии.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                         Параметры вызываемой процедуры:
//                          Подписи - Массив - массив структур подписей;
//                         ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ПрисоединенныйФайл - Ссылка на файл.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ПолучитьМассивПодписей(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьМассивПодписейПодписиДобавлены", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ДобавлениеПодписиИзФайла", , , , , , ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьМассивПодписей.
Процедура ПолучитьМассивПодписейПодписиДобавлены(МассивФайловПодписей, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Массив;
	Если ТипЗнч(МассивФайловПодписей) = Тип("Массив") И МассивФайловПодписей.Количество() > 0 Тогда
		Результат = ЭлектроннаяПодписьКлиент.СформироватьПодписиДляЗанесениюВБазу(ДополнительныеПараметры.ПрисоединенныйФайл,
			МассивФайловПодписей, ДополнительныеПараметры.ИдентификаторФормы);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры

// Служебная процедура используется для оповещения системы об изменении объекта,
// а так же для отображения оповещения пользователя о добавлении подписей.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл с добавленными подписями
//  КоличествоПодписей - количество добавленных подписей
//
Процедура ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, КоличествоПодписей) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Если КоличествоПодписей = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1"".'"),
			ПрисоединенныйФайл);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1"".'"),
			ПрисоединенныйФайл);
	КонецЕсли;
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шифрование.

// Шифрует файл в хранилище:
// - предлагает пользователю выбрать сертификаты для шифрования,
// - выполняет шифрование файла,
// - записывает зашифрованные данные вместе с отпечатками в хранилище,
// - оповещает систему и пользователя об изменениях.
// Используется в обработчике команды шифрования файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл, который требуется зашифровать.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
// 
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗашифроватьДанныеПолучены", ЭтотОбъект, Параметры);
	ПолучитьЗашифрованныеДанные(ОписаниеОповещения, ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры Зашифровать.
Процедура ЗашифроватьДанныеПолучены(РезультатПолучения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеДанные = РезультатПолучения.ЗашифрованныеДанные;
	МассивОтпечатков = РезультатПолучения.МассивОтпечатков;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.Зашифровать(ПрисоединенныйФайл, ЗашифрованныеДанные, МассивОтпечатков);
	ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ПрисоединенныйФайл, ДанныеФайла);
	
КонецПроцедуры

// Шифрует двоичные данные файла с помощью сертификатов, выбранных пользователем.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                         Параметры вызываемой процедуры:
//                          Результат - Структура, Неопределено - если данные не были зашифрованы, то неопределено, иначе структура:
//                           ЗашифрованныеДанные - Структура  - содержит зашифрованные данные файла (для записи).
//                           МассивОтпечатков    - Массив     - содержит отпечатки.
//                          ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ПрисоединенныйФайл  - Ссылка на файл.
//  ДанныеФайла         - Структура с данными файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//
Процедура ПолучитьЗашифрованныеДанные(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(Неопределено);
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.Зашифрован Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |уже зашифрован.'"), Строка(ПрисоединенныйФайл)));
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	ОтпечатокЛичногоСертификатаДляШифрования = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ОтпечатокЛичногоСертификатаДляШифрования;
	
	// Отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить.
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("МассивСтруктурСертификатов", МассивСтруктурСертификатов);
	ДополнительныеПараметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ДополнительныеПараметры.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено
	 ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		МассивСтруктурЛичныхСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьЗашифрованныеДанныеСертификатВыбран", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ПерсональныеСертификатыДляШифрования", ПараметрыФормы, , , , , ОписаниеОповещения);
	Иначе
		ПолучитьЗашифрованныеДанныеВыборСертификатов(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучитьЗашифрованныеДанные.
Процедура ПолучитьЗашифрованныеДанныеСертификатВыбран(ВыбранныйСертификат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйСертификат) = Тип("Структура") Тогда
		ДополнительныеПараметры.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ВыбранныйСертификат.Отпечаток);
		ПолучитьЗашифрованныеДанныеВыборСертификатов(ДополнительныеПараметры);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучитьЗашифрованныеДанные.
Процедура ПолучитьЗашифрованныеДанныеВыборСертификатов(ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов", ДополнительныеПараметры.МассивСтруктурСертификатов);
	ПараметрыФормы.Вставить("ФайлСсылка", ДополнительныеПараметры.ПрисоединенныйФайл);
	ПараметрыФормы.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ДополнительныеПараметры.ОтпечатокЛичногоСертификатаДляШифрования);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьЗашифрованныеДанныеСертификатыВыбраны", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьЗашифрованныеДанные.
Процедура ПолучитьЗашифрованныеДанныеСертификатыВыбраны(МассивСертификатов, ДополнительныеПараметры) Экспорт
	Перем ЗашифрованныеДанные, МассивОтпечатков;
	
	Результат = Неопределено;
	
	Если ТипЗнч(МассивСертификатов) = Тип("Массив") Тогда
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
		ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
		Если ВыполнитьШифрованиеПоПараметрам(МассивСертификатов, ДанныеФайла, ИдентификаторФормы, ЗашифрованныеДанные, МассивОтпечатков) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ЗашифрованныеДанные", ЗашифрованныеДанные);
			Результат.Вставить("МассивОтпечатков", МассивОтпечатков);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры

// Шифрует двоичные данные файла по указанному массиву сертификатов.
//
// Параметры:
//  МассивСертификатов  - Массив сертификатов для шифрования.
//  ДанныеФайла         - Структура данных файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//  ЗашифрованныеДанные - Структура (возвращаемое значение) - содержит зашифрованные данные файла.
//  МассивОтпечатков    - Массив    (возвращаемое значение) - содержит отпечатки.
//
// Возвращаемое значение:
//  Истина - шифрование выполнено успешно, иначе Ложь.
//
Функция ВыполнитьШифрованиеПоПараметрам(Знач МассивСертификатов,
                                        Знач ДанныеФайла,
                                        Знач ИдентификаторФормы,
                                        ЗашифрованныеДанные,
                                        МассивОтпечатков)
	
	МассивОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Выполняется шифрование ...'"));
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, ИдентификаторФормы);
	
	ЗашифрованныеДанные = Новый Структура;
	ЗашифрованныеДанные.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	Состояние(НСтр("ru = 'Шифрование завершено.'"));
	
	Возврат Истина;
	
КонецФункции

// Удаляет файл из рабочего каталога, оповещает об изменениях открытые формы.
Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |зашифрован.'"),
		ПрисоединенныйФайл) );
		
	Параметры = Новый Структура;
	Параметры.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	Параметры.Вставить("ДанныеФайла", ДанныеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталогеРасширениеПредложено", ЭтотОбъект, Параметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталогеРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолныйПутьКФайлу = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		Если Файл.Существует() Тогда
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПутьКФайлу);
			Исключение
				// Попытка удалить файл с диска.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Расшифровывает файл в хранилище:
// - показывает пользователю диалог с предложением расшифровать файл,
// - получает двоичные данные и массив отпечатков,
// - производит расшифровку,
// - записывает расшифрованные данные файла в хранилище.
// Используется как обработчик команды расшифровки файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьДанныеПолучены", ЭтотОбъект, ПрисоединенныйФайл);
	ПолучитьРасшифрованныеДанные(ОписаниеОповещения, ПрисоединенныйФайл, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры Расшифровать.
Процедура РасшифроватьДанныеПолучены(РасшифрованныеДанные, ПрисоединенныйФайл) Экспорт
	Если РасшифрованныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные);
	ОповеститьОРасшифровкеФайла(ПрисоединенныйФайл);
КонецПроцедуры

// Получает расшифрованные данные файла.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения - процедура, в которую необходимо передать управление при завершении.
//                         Параметры вызываемой процедуры:
//                          РасшифрованныеДанные - Структура, Неопределено - содержит расшифрованные данные, либо Неопределено, если расшифровка не была выполнена.
//                          ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта оповещения.
//  ПрисоединенныйФайл   - Ссылка на файл.
//  ДанныеФайла          - Структура с данными файла.
//  ИдентификаторФормы   - УникальныйИдентификатор формы.
// 
Процедура ПолучитьРасшифрованныеДанные(ОбработчикРезультата, Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	Если Не ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(Неопределено);
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПредставленияСертификатов = "";
	МассивСертификатовШифрования = ДанныеФайла.МассивСертификатовШифрования;
	Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
		Отпечаток = СтруктураСертификата.Отпечаток;
		Сертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, Истина);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",                 НСтр("ru = 'Введите пароль для расшифровки'"));
	ПараметрыФормы.Вставить("ПредставленияСертификатов", ПредставленияСертификатов);
	ПараметрыФормы.Вставить("Файл",                      ПрисоединенныйФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьРасшифрованныеДанныеПарольВведен", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьРасшифрованныеДанные.
Процедура ПолучитьРасшифрованныеДанныеПарольВведен(Пароль, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Пароль) <> Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется расшифровка ...'"));
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	
	АдресВременногоХранилищаРасшифрованныхДанных = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеРасшифрованные, ИдентификаторФормы);
	
#Если ВебКлиент Тогда
	АдресВременногоХранилищаТекста = "";
#Иначе
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами(
		).ИзвлекатьТекстыФайловНаСервере;
	
	Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
		
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
		
		АдресВременногоХранилищаТекста =
			ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПолныйПутьКФайлу, ИдентификаторФормы);
		
		УдалитьФайлы(ПолныйПутьКФайлу);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
#КонецЕсли
	
	РасшифрованныеДанные = Новый Структура;
	РасшифрованныеДанные.Вставить("АдресВременногоХранилища",       АдресВременногоХранилищаРасшифрованныхДанных);
	РасшифрованныеДанные.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	
	Состояние(НСтр("ru = 'Расшифровка завершена.'"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, РасшифрованныеДанные);
	
КонецПроцедуры

// Оповещает систему и пользователя о расшифровке файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//
Процедура ОповеститьОРасшифровкеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |расшифрован.'"),
		ПрисоединенныйФайл) );
	
КонецПроцедуры

// Помещает файлы с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВыбранныеФайлы                 - Массив - пути к файлам на диске.
//  ВладелецФайла                  - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами        - Структура.
//  ПрисоединенныеФайлыМассив      - Массив (возвращаемое значение) - заполняется ссылками
//                                   на добавленные файлы.
//  ИдентификаторФормы             - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилище(Знач ВыбранныеФайлы,
                                            Знач ВладелецФайла,
                                            ПрисоединенныеФайлыМассив,
                                            Знач ИдентификаторФормы) Экспорт
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	ТекущаяПозиция = 0;
	
	ПоследнийСохраненныйФайл = Неопределено;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
		
		Если ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста =
				ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
	
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, Файл, ТекущаяПозиция);
		ПоследнийСохраненныйФайл = Файл;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла
					           |""%1""
					           |во временное хранилище.'"),
					Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		// Создание карточки Файла в базе данных.
		ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
			ВладелецФайла,
			Файл.ИмяБезРасширения,
			ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, ПоследнийСохраненныйФайл);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ОбновитьСостояниеОСохраненииФайлов(Знач ВыбранныеФайлы, Знач Файл, Знач ТекущаяПозиция = Неопределено);
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазмерВМб = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Файл.Размер() / (1024 * 1024));
	
	Если ВыбранныеФайлы.Количество() > 1 Тогда
		
		Если ТекущаяПозиция = Неопределено Тогда
			Состояние(НСтр("ru = 'Сохранение файлов завершено.'"));
		Иначе
			ИндикаторПроцент = ТекущаяПозиция * 100 / ВыбранныеФайлы.Количество();
			
			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб) ...'"), Файл.Имя, РазмерВМб);
				
			ТекстСостояния = НСтр("ru = 'Сохранение нескольких файлов.'");
			
			Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	Иначе
		Если ТекущаяПозиция = Неопределено Тогда
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохранение файла ""%1"" (%2 Мб)
				           |завершено.'"), Файл.Имя, РазмерВМб);
		Иначе
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб).
				           |Пожалуйста, подождите...'"), Файл.Имя, РазмерВМб);
		КонецЕсли;
		Состояние(ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Продолжения асинхронных процедур

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ДляРедактирования = ДополнительныеПараметры.ДляРедактирования;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		
		ДополнительныеПараметры.Вставить("ДляРедактирования", ДляРедактирования);
		ДополнительныеПараметры.Вставить("РабочийКаталогПользователя", РабочийКаталогПользователя);
		ДополнительныеПараметры.Вставить("ФайлНаДиске", ФайлНаДиске);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайлаНаКлиенте", ПолноеИмяФайлаНаКлиенте);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) И ДляРедактирования И ФайлНаДиске.Существует() Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ПолучитьФайл = Ложь;
		ИначеЕсли ФайлНаДиске.Существует() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДиалогПоказан", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьДиалогНужноПолучитьФайлССервера(ОписаниеОповещения, ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ДляРедактирования);
			Возврат;
		Иначе
			ПолучитьФайл = Истина;
		КонецЕсли;
		
		ОткрытьФайлДиалогПоказан(ПолучитьФайл, ДополнительныеПараметры);
	Иначе
		Если ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлНапоминаниеПоказано", ЭтотОбъект, ДополнительныеПараметры);
			ФайловыеФункцииСлужебныйКлиент.ВывестиНапоминаниеПриРедактировании(ОписаниеОповещения);
		КонецЕсли;
		
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлДиалогПоказан(ПолучитьФайл, ДополнительныеПараметры) Экспорт
	Если ПолучитьФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ДляРедактирования = ДополнительныеПараметры.ДляРедактирования;
	РабочийКаталогПользователя = ДополнительныеПараметры.РабочийКаталогПользователя;
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	ПолноеИмяФайлаНаКлиенте = ДополнительныеПараметры.ПолноеИмяФайлаНаКлиенте;
	
	ФайлМожноОткрывать = Истина;
	Если ПолучитьФайл Тогда
		ПолноеИмяФайлаНаКлиенте = "";
		ФайлМожноОткрывать = ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
			ДанныеФайла.ОтносительныйПуть,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			ДанныеФайла.ИмяФайла,
			РабочийКаталогПользователя,
			ПолноеИмяФайлаНаКлиенте);
	КонецЕсли;
		
	Если ФайлМожноОткрывать Тогда
		Если ДляРедактирования Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		Иначе
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
		ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте, ДанныеФайла);
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ОткрытьФайл.
Процедура ОткрытьФайлНапоминаниеПоказано(РезультатНапоминания, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ДобавитьФайлы.
Процедура ДобавитьФайлыРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	Фильтр = ДополнительныеПараметры.Фильтр;
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, НСтр("ru = 'Все файлы'") + " (*.*)|*.*");
		
		Если ВыборФайла.Выбрать() Тогда
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(
				ВыборФайла.ВыбранныеФайлы,
				ВладелецФайла,
				ПрисоединенныеФайлыМассив,
				ИдентификаторФормы);
			
			Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
				ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Создание:'"),
					ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
					ПрисоединенныйФайл,
					БиблиотекаКартинок.Информация32);
				
				ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
				ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
			КонецЕсли;
			
			Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
				ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
				Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), ПрисоединенныеФайлыМассив);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе // Если веб-клиент без подключенного расширения.
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыЗавершение", ЭтотОбъект);
		ПоместитьВыбранныеФайлыВХранилищеВеб(ОписаниеОповещения, ВладелецФайла, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.ДобавитьФайлы.
Процедура ДобавитьФайлыЗавершение(ПрисоединенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПрисоединенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание'"),
		ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
		ПрисоединенныйФайл,
		БиблиотекаКартинок.Информация32);
		
	ОповеститьОбИзменении(ПрисоединенныйФайл);
		
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП.
Процедура СохранитьВместеСЭПРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВместеСЭПИмяФайлаПолучено", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОписаниеОповещения);
		СохранитьФайлКакРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры);
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП.
Процедура СохранитьВместеСЭПИмяФайлаПолучено(ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ПолноеИмяФайла = "" Тогда
		Возврат; // Пользователь нажал Отмена или это веб клиент без расширения.
	КонецЕсли;
	
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	Настройка = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().ДействияПриСохраненииСЭП;
	Если Настройка = "Спрашивать" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект",                  ПрисоединенныйФайл);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", ИдентификаторФормы);
		
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВместеСЭППодписиВыбраны", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ВыборПодписей", ПараметрыФормы, , , , , ОписаниеОповещения);
		Возврат;
	ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
		МассивСтруктурПодписей = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьВсеПодписи(ПрисоединенныйФайл, ИдентификаторФормы);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		ЭлектроннаяПодписьКлиент.СохранитьПодписи(
			ПрисоединенныйФайл,
			ПолноеИмяФайла,
			ИдентификаторФормы,
			МассивСтруктурПодписей);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП.
Процедура СохранитьВместеСЭППодписиВыбраны(МассивСтруктурПодписей, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		ЭлектроннаяПодписьКлиент.СохранитьПодписи(
			ДополнительныеПараметры.ПрисоединенныйФайл,
			ДополнительныеПараметры.ПолноеИмяФайла,
			ДополнительныеПараметры.ИдентификаторФормы,
			МассивСтруктурПодписей);
	КонецЕсли;
КонецПроцедуры

// Продолжение процедуры ПрисоединенныеФайлыКлиент.СохранитьФайлКак.
Процедура СохранитьФайлКакРасширениеПредложено(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ПолноеИмяФайла = "";
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
				           |Пожалуйста, подождите...'"),
				ДанныеФайла.ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб) );
		
		Состояние(ТекстПояснения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	Иначе
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбработчикЗавершения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ПоказатьДиалогНужноПолучитьФайлССервера(ОбработчикРезультата, Знач ИмяФайлаСПутем, Знач ДанныеФайла, Знач ДляРедактирования)
	
	СтандартныеДанныеФайла = Новый Структура;
	СтандартныеДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ДанныеФайла.ДатаМодификацииУниверсальная);
	СтандартныеДанныеФайла.Вставить("Размер",                       ДанныеФайла.Размер);
	СтандартныеДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение",     НЕ ДляРедактирования);
	СтандартныеДанныеФайла.Вставить("Редактирует",                  ДанныеФайла.Редактирует);
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Параметры.Вставить("ИмяФайлаСПутем", ИмяФайлаСПутем);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьДиалогНужноПолучитьФайлССервераДействиеОпределено", ЭтотОбъект, Параметры);
	ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		ОписаниеОповещения, ИмяФайлаСПутем, СтандартныеДанныеФайла);
КонецПроцедуры

// Продолжение процедуры ПоказатьДиалогНужноПолучитьФайлССервера.
Процедура ПоказатьДиалогНужноПолучитьФайлССервераДействиеОпределено(Действие, ДополнительныеПараметры) Экспорт
	ИмяФайлаСПутем = ДополнительныеПараметры.ИмяФайлаСПутем;
	
	Если Действие = "ВзятьИзХранилищаИОткрыть" Тогда
		Файл = Новый Файл(ИмяФайлаСПутем);
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ИмяФайлаСПутем);
		Результат = Истина;
	ИначеЕсли Действие = "ОткрытьСуществующий" Тогда
		Результат = Ложь;
	Иначе // Действие = "Отмена".
		Результат = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
	
КонецПроцедуры

Процедура ОткрытьФайлПриложением(Знач ИмяОткрываемогоФайла, ДанныеФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение);
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("mxl") Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяОткрываемогоФайла);
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ТабличныйДокумент = ФайловыеФункцииСлужебныйВызовСервера.ТабличныйДокументИзВременногоХранилища(Адрес);
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ЗаголовокСтрока);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяОткрываемогоФайла);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия);
			Возврат;
		КонецЕсли;
		
		// Открытие Файла.
		Попытка
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При открытии файла
				           |""%1""
				           |произошла ошибка:
				           |""%2"".'"),
				ИмяОткрываемогоФайла,
				ИнформацияОбОшибке.Описание));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Обновляет данные файла из файла, выбранного пользователем.
// Используется, как обработчик команды обновления присоединенного файла из другого файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура - данные файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПрисоединенныйФайлПомещениеВыполнено", ЭтотОбъект, ПрисоединенныйФайл);
	ВыбратьФайлНаДискеИПоместитьВХранилище(ОписаниеОповещения, ДанныеФайла, ИдентификаторФормы);
	
КонецПроцедуры

// Продолжение процедуры ОбновитьПрисоединенныйФайл.
Процедура ОбновитьПрисоединенныйФайлПомещениеВыполнено(ИнформацияОФайле, ПрисоединенныйФайл) Экспорт
	
	Если ИнформацияОФайле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебныйВызовСервера.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
КонецПроцедуры

#КонецОбласти
