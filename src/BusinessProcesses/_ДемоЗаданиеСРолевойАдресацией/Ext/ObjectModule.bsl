#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

// СтандартныеПодсистемы.УправлениеДоступом

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:    Автор ИЛИ Исполнитель ИЛИ (Предмет И <исполнитель по адресации>)
	// Изменения: Автор
	//
	// Если предмет не задан (т.е. бизнес-процесс без основания),
	// тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор №1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор №2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = Исполнитель;
	
	// Чтение: набор "№3".
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Пользователи") Тогда
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
		
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.ЗначениеДоступа = Предмет;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы")
	      ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		
		НаборыГруппыДоступаИсполнителей = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
		Строка = НаборыГруппыДоступаИсполнителей.Добавить();
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
		
		НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
		УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
		
		// Умножение наборов предмета на наборы группы доступа исполнителей.
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(НаборыПредмета, НаборыГруппыДоступаИсполнителей, Истина);
		
		// Добавление результата к таблице наборов.
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		
	Иначе // Без зависимости от предмета
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
		РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	ГруппаИсполнителейЗадачПроверяющий = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(
		РольПроверяющего, ОсновнойОбъектАдресацииПроверяющий, ДополнительныйОбъектАдресацииПроверяющий);
	УстановитьПривилегированныйРежим(Ложь);
		
	Если Не ЗначениеЗаполнено(Состояние) Тогда 
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	Если РеквизитыАдресацииЗаполнены() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Исполнитель");
	КонецЕсли;
	Если Не ПроверитьВыполнение Или Не РольПроверяющего.Пустая() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Проверяющий");
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
		СрокИсполнения = ТекущаяДатаСеанса();
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") 
		И ДанныеЗаполнения <> Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		Предмет = ДанныеЗаполнения;
	КонецЕсли;	

	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаЗавершения = '00010101000000';
	Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура ВыполнитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Если НЕ РеквизитыАдресацииЗаполнены() Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.Исполнитель = Исполнитель;
		Задача.РольИсполнителя = РольИсполнителя;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
		Задача.Наименование = Наименование;
		Задача.СрокИсполнения = СрокИсполнения;
		Задача.Предмет = Предмет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоручениеИсполнителюПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Задача.ДатаИсполнения > ТекущаяДатаСеанса() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Фактическая дата выполнения задачи не может быть больше текущей даты.'"),
			Задача, "Объект.ДатаИсполнения");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ПроверитьВыполнение; 
КонецПроцедуры

Процедура ПроверитьПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Для Каждого БизнесПроцессПроверки Из ФормируемыеБизнесПроцессы Цикл
		 БизнесПроцессПроверки.Исполнитель = Проверяющий;
		 БизнесПроцессПроверки.РольИсполнителя = РольПроверяющего;
		 БизнесПроцессПроверки.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющий;
		 БизнесПроцессПроверки.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющий;
		 БизнесПроцессПроверки.Наименование = НСтр("ru = 'Проверить:'") + " " + Наименование;
		 БизнесПроцессПроверки.Автор = Автор;
		 БизнесПроцессПроверки.СрокИсполнения = СрокПроверки;
		 БизнесПроцессПроверки.Предмет = Предмет;
		 БизнесПроцессПроверки.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = БизнесПроцессыИЗадачиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыАдресацииЗаполнены() 
	
	Возврат НЕ Исполнитель.Пустая() ИЛИ НЕ РольИсполнителя.Пустая();

КонецФункции

#КонецОбласти

#КонецЕсли